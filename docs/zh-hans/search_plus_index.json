{"./":{"url":"./","title":"路印","keywords":"","body":"关于路印 路印协议和路印交易所 路印协议是第一个基于zkRollup技术的去中心化交易协议。使用路印协议，您可以搭建一个不托管用户交易资产，基于订单撮合，高性能的去中心化交易所。由于采用了zkRollup这种Layer-2扩容技术，路印协议在以太坊不扩容的前提下，也可以每秒清算超过2000笔交易。 如果您想了解路印协议的设计和技术细节，请访问路印协议官网：https://loopring.org。 路印交易所是第一个使用路印协议搭建的去中心化交易平台。其网页应用的地址是：Loopring.io。路印交易所目前的版本是beta1，采用了路印协议3.0版本。其以太坊主网合约的地址为：0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777。该地址对应的永久ENS为：beta1.loopringio.eth。 路印交易所并不是路印协议上唯一的交易所，WeDEX.io也是建立在路印协议的基础上。在您使用不同的路印去中心化交易所前，您需要明确知道您是在和哪个交易所打交道。路印协议本身的智能合约并不与用户直接交互，只为各个交易所合约提供包括用户注册，充值提现，交易清算在内的业务逻辑。 优势 路印协议保障了用户充值到交易所的资产不会被任何人挪用。即使交易所网站关闭或者运营者失联，也可以通过使用默克尔证明，在锁定期过后将全部资产提现出来。 路印协议不保障撮合的效率和公平性。撮合是由路印交易所的中继系统完成的，而中继是整个解决方案里面很中心化的部分。基于同样版本协议的不同交易所，可以采用不同的中继架构，因此用户可以根据不同交易所中继的效率和公平性，选择使用不同的交易所。路印协议保障中继撮合过程必须遵守一定的规则，但对中继没有任何服务质量的要求。 路印交易所中继是闭源开发的，目前吞吐量大约是每笔200笔交易。 架构 路印交易所的整体架构如下图所示： 您需要了解的一些关键点包括： 路印的API除了提供读取中继数据功能，主要用来处理用户和客户端的链下请求（offchain requests），包括提交订单，取消订单，和提现。 用户账号注册，修改密码，充值必须通过以太坊交易来发起请求（onchain requests）。用户也可以通过以太坊交易，提交提现请求。路印协议要求交易所必须无条件按顺序处理所有链上请求。 路印具有与中心化交易所相似的高性能交易体验，这主要得益于中继的批处理能力。路印仅把以太坊作为数据存储层和零知识证明的验证层，不用做与交易清结算相关的任何计算。 "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"术语","keywords":"","body":"术语 DEX Decenralized EXchange的简称，即去中心化交易所。路印交易所是搭建在以太坊公有链上的去中心化交易所。 零知识证明。 一种证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的一种技术。 中继 路印交易所的后台系统，负责订单操作，交易撮合，零知识证明生成等。 链上请求 通过交易，在以太坊上发送给路印交易所智能合约的请求。 链下请求 通过路印中继的API，绕过以太坊区块链，直接发送给路印交易所的请求。 基础代币（Base Token） 指一个交易对的交易对象。如LRC-ETH市场对中，LRC即为该市场对的基础代币。 计价代币（Quote Token） 指一个交易对的定计价代币。如LRC-ETH市场对中，ETH即为该市场对的计价代币。 Size 指订单的base Token数量。对于 2000 LRC 买 1 EHT的订单，size为2000。 Volume 指订单的quote Token 数量。对于 2000 LRC 买 1 EHT的订单，Volume为1。 EdDSA 路印协议用于对链下请求做签名的算法。路印交易所的链上请求需要用户使用以太坊地址对应的ECDSA私钥签名，而链下请求则需要使用交易账号的EdDSA私钥来签名。 "},"tutorials/api_key.html":{"url":"tutorials/api_key.html","title":"管理API Key","keywords":"","body":"管理API Key 您可以通过路印交易所的UI（Loopring.io），在登陆账号后，通过『导出账户』功能获取自己账号的API Key和EdDSA私钥。您也通过查询用户ApiKey获取自己账号的API Key。此时您需要对请求做签名，以保证别的用户无法获取您的API key。 如果您想更改API Key，可以调用更新用户ApiKey接口，并提供入老的API Key。或者您也可以通过路印交易所的UI（Loopring.io）手动更新API Key. "},"tutorials/signing.html":{"url":"tutorials/signing.html","title":"链下请求签名","keywords":"","body":"Poseidon哈希与EdDSA签名 Poseidon哈希 EdDSA签名 除了需要API-KEY外，和账户信息有关的还需要签名，详见Restful API 概述，这里仅以取消订单为例。 调用取消订单接口时，除了接口本身所需的参数外，还需传递signature即参数签名。 路印交易所对API签名使用EdDSA SHA256算法，首先将API参数序列化成型如[(参数1名, 参数1值), (参数2名, 参数2值), ..., (参数N名, 参数N值)]的字符串二元组数组，其中参数名按照字典序排序，从而保证服务器验证顺序一致。然后整体转为JSON字符串作为SHA256的操作对象，得到SHA256Hash值，再用EdDSA算法对该SHA256Hash进行签名，私钥即privateKey，最终的签名包含三个整数：Rx, Ry, S，将这三个序列化成字符串并用,连接起来即为API签名，流程请参考sign_api_data代码示例。 对API接口的签名使用的EdDSA使用ethsnarks工程代码，其内部使用Poseidon HASH算法，路印交易所的签名参数如下: poseidon_params(SNARK_SCALAR_FIELD, 6, 6, 52, b'poseidon', 5, security_target=128) EdDSA和Poseidon Hash算法细节见参考文献[3]，[4]。 可以重载ethsnarks的_SignatureScheme实现该固定参数的签名类，如下面python代码所示。 签名数据放在http request header里的X-API-SIG中。 session = init_request_session(user_api_key) ... #初始化API数据 api_request_params ... #对API数据签名 x_api_sign = sign_api_data(api_request_params，user_api_secret) session.headers.update({'X-API-SIG': x_api_sign}) API接口签名代码部分关键函数示例： #继承ethsnarks.eddsa._SignatureScheme class PoseidonEdDSA(_SignatureScheme): @classmethod def hash_public(cls, *args): PoseidonHashParams = poseidon_params(SNARK_SCALAR_FIELD, 6, 6, 52, b'poseidon', 5, security_target=128) inputMsg = list(as_scalar(*args)) return poseidon(inputMsg, PoseidonHashParams) #对数据签名并返回签名 def sign_api_data(api_request_params，api_secret): data = serialize_api_data(api_request_params) hasher = hashlib.sha256() msgBuf = ujson.dumps(data).encode('utf-8') hasher.update(msgBuf) msgHash = int(hasher.hexdigest(), 16) % SNARK_SCALAR_FIELD signed = PoseidonEdDSA.sign(msgHash, FQ(int(api_secret))) signature = ','.join(str(_) for _ in [signed.sig.R.x, signed.sig.R.y, signed.sig.s]) return signature def serialize_api_data(data): has_signature = False params = [] for key, value in data.items(): if key == 'signature': has_signature = True else: params.append((key, value)) # sort parameters by key, in alphabet order params.sort(key=itemgetter(0)) if has_signature: params.append(('signature', data['signature'])) return params "},"tutorials/trading.html":{"url":"tutorials/trading.html","title":"做市商集成","keywords":"","body":"需要API-KEY的API接口 API密钥可以从loopringDEX网页导出或通过API获取。 所有接口（除查询用户ApiKey）都需要传入API-KEY，API信息请查询Restful API 概述。 API密钥数据放在http request header里的X-API-KEY中。 def init_request_session(user_api_key): session = requests.session() session.headers.update({'Accept': 'application/json', 'X-API-KEY': user_api_key}) return session 做市商集成 我们希望通过本教程，可以让您了解到如何通过路印交易所的API来实现自动化交易和做市商程序。 本教程中的代码示例均使用Python语言。 注册账户 要使用路印（去中心化）交易所，您必须先通过向交易所的智能合约发送特殊的以太坊交易来注册帐户。 创建帐户后，您可以通过链上和链下请求与交易所进行交互。 我们建议使用路印交易所的网页界面（Loopring.io）进行帐户注册。 但是，您也可以使用Etherescan和MyEtherWallet等工具直接与智能合约交互。 获取API Keyz 创建好账户之后，您可以使用Loopring.io的『导出账号』功能导出API-Key、EdDSA公私钥publicKeyX、publicKeyY，和privateKey。使用路印交易所的API需要上述信息。您到处的信息应该类似于下面的例子： { \"exchangeName\": \"LoopringDEX: Beta 1\", \"exchangeAddress\": \"0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777\", \"exchangeId\": 2, \"accountAddress\": \"0xe9577b420d96adfc97ff1e9e0557f8c73d7247fe\", \"accountId\": 123456, \"apiKey\": \"qXJpfTKrF0O5jIDPYIu7YkVgLFbvm5uIgPKBmHP2kBpcdKZjgfFKhIlE8evo9lKa\", \"publicKeyX\": \"20230748339558541226323870947000799026059173889124399831342481595010628000129\", \"publicKeyY\": \"4980637490279511620100245514492532318691849019959343538108355525575855311214\", \"privateKey\": \"1242957328515765470505753610060337585626176314364086438653683782645761561015\" } 请妥善保管API Key和EdDSA私钥。如果这些信息不慎泄漏，会导致您资产的损失。在任何情况下，路印交易所和其API均不会向您询问EdDSA私钥。 提交订单 订单格式 您可以通过下面的JSON来表达一个路印的限价单（目前路印不支持市价单）。具体参数细节详见提交订单。 newOrder = { \"exchangeId\": 2, \"orderId\": 5, \"accountId\": 1234, \"tokenSId\": 2, \"tokenBId\": 3, \"amountS\": \"5000000000000000000\", \"amountB\": \"15000000\", \"allOrNone\": \"false\", \"buy\": \"false\", \"validSince\": 1582094327, \"validUntil\": 1587278341, \"maxFeeBips\": 50, \"label\": 211, \"hash\": \"14504358714580556901944011952143357684927684879578923674101657902115012783290\", \"signatureRx\": \"15179969700843231746888635151106024191752286977677731880613780154804077177446\", \"signatureRy\": \"8103765835373541952843207933665617916816772340145691265012430975846006955894\", \"signatureS\" : \"4462707474665244243174020779004308974607763640730341744048308145656189589982\", \"clientOrderId\": \"Test01\" } 价格与数量 假设您想在LRC-USDT市场上以$0.03的价格卖出500个LRC，即售出500个LRC，买入至少15个USDT (500 * 0.03 = 15)。 首先您需要通过/api/v2/exchange/token这个API获取LRC和USDT这两个币种在路印交易所的相关配置信息 - 注意：同一个币种，在基于路印协议的两个不同的交易所的配置信息是不相同的。在Loopring.io，LRC和USDT对应的TokenID分别是2和3；它们ERC20合约的decimals分别是18和6。其它代币配置信息可以详见查询交易所支持的通证信息。 通过查询获得的代币信息，可以将订单中的部分数据准备好： newOrder = { 'exchangeId': 2, 'accountId': 1234, 'tokenSId': 2, #LRC 'tokenBId': 3, #USDT 'amountS': '500000000000000000000', # 500 * 10**18 'amountB': '15000000', # 15 * 10**6 'allOrNone': 'false', 'buy': 'false', # 卖出 'validSince': 1582094327, # 生效时间，比下单时间提前15分钟，见注意事项 'validUntil': 1587278341, # 失效时间 'maxFeeBips': 63, # 最大费率，实际费率由服务器计算 'label': 'hebao::subchannel::0001' } 几点说明： exchangeId是Loopring.io现在运行的beta1版本的交易所ID，后续路印交易所升级智能合约后，这个exchangeId就会更新。beta1对应的exchangeId就是2，这是个常量。 accountId是您注册后获得的账号ID。 tokenS, amountS中的S代表Sell，代表这两个值和卖出的代币相关； tokenB, amountB中的B代表Buy，代表这两个值和买入的代币相关。路印订单采用的是单向表达，买卖单的数据格式完全一致。 amountS的值是 500跟着18个0；amountB的值是15跟着6个0。 buy的值决定订单的完全成交条件。如果buy是'true'，那么只要买到了15 USDT，该订单就算完全成交，这时候也许订单中的500个LRC并没被全部卖掉。如果buy是'false'，那么只要卖出了500个LRC，该订单就算完全成交了，可能实际买到的USDT多于15。 validSince和validUntil代表该订单的生效时间和过期时间。通过这两个时间戳，您可以不必对每个订单做主动取消的动作。我们强烈建议您在现阶段，将validSince设置为比当前时间早15分钟。 maxFeeBips是此订单愿意支付的最大费率，单位是万分之一。如果maxFeeBips = 10，代表该订单愿意支付实际买入的tokenB数量的0.1%给交易所。但实际交易所收取的交易手续费可以小于maxFeeBips，比如交易所愿意为VIP用户的交易费打折。在实际使用时，我们建议您使用63作为该项的值。如果该值太小，服务器会拒绝撮合您的订单。 订单号 接下来您需要为新订单指定一个OrderId。订单OrderId是路印交易所一个比较特殊的地方，详见注意事项一节关于OrderId的说明。您可以通过访问/api/v2/orderId获取下一个有效OrderId。注意OrderId由用户出售的代币（tokenS）决定，然后根据返回值更新订单数据结构。 访问/api/v2/orderid得到当前币种的OrderID，API参数细节参考获取下一个有效OrderId，建议提前访问API建立并维护一个币种和OrderID的对应关系，类似： token_orderid_mapping = { 'ETH' : 3, 'LRC' : 5， 'DAI' : 2 } 订单OrderID由用户售出的代币品种，在LRC-ETH市场上，如果用户提交一个买单，即售出ETH，买入LRC，则OrderID值为： order[\"orderId\"] = token_orderid_mapping['ETH'] 反之如果是卖单，即售出LRC，买入ETH，则OrderID为： order[\"orderId\"] = token_orderid_mapping['LRC'] 订单号的限制是基于卖出的token共享的，比如LRC-USDT和ETH-USDT两个市场会共享220 2^{20} 2​20​​个订单号，用完就不能再下单。因此针对不同的市场，建议注册不同账号做市。 当前路印交易所每一个币种的最大订单OrderID为220 2^{20} 2​20​​，如果当前账户某个币种的OrderID超过该值，则下单失败。后续版本的路印交易所将会更新此限制。 对于任何一个卖出币种，同时存活有效的订单数量为214 2^{14} 2​14​​即16384。您可以想象有16384个槽位，如果两个订单的OrderID对16384同余即： OrderA.OrderID % 214≡OrderB.OrderID % 214 OrderA.OrderID\\ \\%\\ 2^{14} \\equiv OrderB.OrderID\\ \\%\\ 2^{14} OrderA.OrderID % 2​14​​≡OrderB.OrderID % 2​14​​ 那么必须先取消掉先下的那个订单，且保证后下的订单的OrderID要大于前一个订单的OrderID，否则服务器会拒绝新的订单。普通用户一般不会遇到这个问题。 order.update({\"orderId\": 2}) 时间戳 服务器收到订单时会判断订单中的ValidSince时间戳，注意不是订单发送的时间，而是订单开始生效的时间，因此推荐订单的ValidSince在当前时间上提前15分钟，即： order[\"validSince\"] = int(time.time() - 900) 签名 然后您需要对订单做Poseidon哈希计算并对哈希做EdDSA签名，再将hash和签名添加到订单JSON中。签名过程详见注意事项签名部分。注意订单签名和普通网络请求的签名算法不同，不同请求的签名请参考对应Restful API请求文档以及注意事项签名部分，算法细节请查询参考文献[3]和[4]。 下面是使用Python对订单做签名的示例代码，详情请参考注意事项签名部分关键代码实现一节： from ethsnarks.poseidon import poseidon_params, poseidon # 对订单数据签名 PoseidonHashParams = poseidon_params( SNARK_SCALAR_FIELD, 14, 6, 53, b'poseidon', 5, security_target=128 ) serialized_order = [ int(order[\"exchangeId\"]), int(order[\"orderId\"]), int(order[\"accountId\"]), int(order[\"tokenSId\"]), int(order[\"tokenBId\"]), int(order[\"amountS\"]), int(order[\"amountB\"]), int(order[\"allOrNone\"]==\"true\"), int(order[\"validSince\"]), int(order[\"validUntil\"]), int(order[\"maxFeeBips\"]), int(order[\"buy\"]==\"true\"), int(order[\"label\"]) ] orderHash = poseidon(serialized_order, PoseidonHashParams) signedMessage = PoseidonEdDSA.sign(serialized_order, FQ(int(privateKey))) order.update({ \"hash\": str(orderHash), \"signatureRx\": str(signedMessage.sig.R.x), \"signatureRy\": str(signedMessage.sig.R.y), \"signatureS\": str(signedMessage.sig.s), }) 在访问api/v2/order发送订单之前，和其他需要API参数签名不同的是，这里要对订单本身进行签名，签名结果放在订单参数里面，同样地，订单参数也需要序列化再进行PoseidonHash运算，这里为了配合PoseidonHash，所以序列化成整数数组，请注意这里序列化数组的顺序和服务器必须保持一致，如示例代码所示： def serialize_api_data(order): return [ int(order[\"exchangeId\"]), int(order[\"orderId\"]), int(order[\"accountId\"]), int(order[\"tokenSId\"]), int(order[\"tokenBId\"]), int(order[\"amountS\"]), int(order[\"amountB\"]), int(order[\"allOrNone\"]==\"true\"), int(order[\"validSince\"]), int(order[\"validUntil\"]), int(order[\"maxFeeBips\"]), int(order[\"buy\"]==\"true\"), int(order[\"label\"]) ] def sign_order(order, api_secret): PoseidonHashParams = poseidon_params(SNARK_SCALAR_FIELD, 14, 6, 53, b'poseidon', 5, security_target=128) serialized_order = serialize_api_data(order) msgHash = poseidon(serialized_order, PoseidonHashParams) signedMessage = PoseidonEdDSA.sign(msgHash, FQ(int(api_secret))) order.update({ \"hash\": str(msgHash), \"signatureRx\": str(signedMessage.sig.R.x), \"signatureRy\": str(signedMessage.sig.R.y), \"signatureS\": str(signedMessage.sig.s), }) 路印交易所使用EdDSA PoseidonHASH算法对订单参数签名，EdDSA PoseidonHASH算法代码可以参考ethsnarks，对订单参数计算PoseidonHash的参数如下： poseidon_params(SNARK_SCALAR_FIELD, 14, 6, 53, b'poseidon', 5, security_target=128) 订单参数签名和API接口参数签名的区别在于：API接口参数是用SHA256计算HASH值，再经过EdDSA签名，而订单内容是用PoseidonHASH计算HASH值，然后经过EdDSA签名，而EdDSA签名算法是相同的。 订单提交 最后您需要通过/api/v2/order发送订单到服务器。 查询订单 您可以通过/api/v2/orders查看订单状态。或者通过订阅WebSocket更新来跟踪订单状态。关于WebSocket订阅部分，请参考WebSocket介绍。 取消订单 你可以通过/api/v2/orders取消订单。取消订单接口需要签名，和订单数据的签名略有不同，请参考注意事项需要签名的API接口一节。 另一种取消订单的方式是通过和交易所的合约交互，改变交易密码和EdDSA秘钥。和中心化交易所不同，改变交易密码后，您的全部订单都会被取消。 参考文献及代码库 ethsnarks代码仓库：https://github.com/HarryR/ethsnarks.git SHA256 Hash算法：https://en.wikipedia.org/wiki/SHA-2 EdDSA算法：https://en.wikipedia.org/wiki/EdDSA Poseidon Hash算法：https://www.poseidon-hash.info/ "},"REST_APIS.html":{"url":"REST_APIS.html","title":"REST APIs","keywords":"","body":"REST APIs 本文主要描述路印交易所REST API的共性部分。 API限流 每个API请求都有流量限制，超额的调用请求会被拒绝（返回429）。如果您长期超额调用API，您的账户就会被列入黑名单，从而无法继续使用API。 HTTP头 所有API都需要指定X-API-KEYHTTP头；有一些API还需要指定X-API-SIGHTTP头来提供EdDSA签名信息。 需要X-API-KEYHTTP头的API： 除查询用户ApiKey外的所有API。 需要X-API-SIGHTTP头的API： 查询用户ApiKey 取消订单 需要特殊X-API-SIGHTTP头签名的请求： 提交订单 请求签名 请求参数是大小写不敏感 一种是与电路无关的签名，主要用于网关进行权限校验。生成规则如下： 将请求参数按key字典顺序升序排序后生成JSON字符串，并统一转换为小写。 使用SHA256计算JSON字符串的哈希。 使用创建账户时的EdDSA私钥，对哈希签名。然后将签名结果Rx,Ry,S三部分按\",\"分隔并以该顺序拼成一个字符串。 另一种是与电路有关的签名，详情请见电路签名。 API返回 除了网络错误，所有API都会返回200状态码和代表API结果的JSON数据。JSON返回信息中都包含一个resultInfo字段，用以反馈API调用的通用状态，特别是出错时候的状态码。如果请求正常返回，则还会返回一个data字段，该字段的值也是一个JSON结构，针对不同API代表不同的业务数据，可以参考每个API说明。 公共信息 URL https://api.loopring.io HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 否 API Key \"sra1aavfa\" X-API-SIG string 否 签名信息 \"dkkfinfasdf\" 返回值 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 调用结果 - ResultInfo 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回说明。用来帮助调试，不应在前端显示或用于逻辑判断。 \"SUCCESS\" 返回码 返回码 描述 0 成功 100000 内部未知错误 100001 参数非法 100002 请求超时 100202 更新失败 100203 内部存储错误 100204 重复提交 "},"dex_apis/getTimestamp.html":{"url":"dex_apis/getTimestamp.html","title":"查询服务器当前时间","keywords":"","body":"查询服务器当前时间 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/timestamp 功能 返回服务器当前时间，以毫秒为单位 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/timestamp HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/timestamp 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data integer 否 获取服务器时间返回 1584683483382 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : 1584683483382 } 返回码 返回码 描述 100000 未知错误 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getApiKey.html":{"url":"dex_apis/getApiKey.html","title":"查询用户ApiKey","keywords":"","body":"查询用户ApiKey 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/apiKey 功能 用户注册的时候系统已经产生一个ApiKey，用户通过此接口当前的ApiKey API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-SIG string 是 签名信息 \"dkkfinfasdf\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 10 pubKeyX string 是 公钥X 123 pubKeyY string 是 公钥X 456 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/apiKey?accountId=10&pubKeyX=123&pubKeyY=456 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-SIG: dkkfinfasdfcurl -H \"X-API-SIG:dkkfinfasdf\" https://api.loopring.io/api/v2/apiKey\\?accountId\\=10\\&pubKeyX\\=123\\&pubKeyY\\=456 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 是 ApiKey 6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } 返回码 返回码 描述 100000 未知错误 101002 未找到该用户 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 104004 未提供签名信息 104005 错误的签名信息 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/applyApiKey.html":{"url":"dex_apis/applyApiKey.html","title":"更新用户ApiKey","keywords":"","body":"更新用户ApiKey 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 POST 访问路径 /api/v2/apiKey 功能 如果用户想要更换ApiKey，就调用此接口，header中传入最近使用的API key，返回结果会传回新的ApiKey。之后每次调用getApiKey都返回当前最新的ApiKey API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 publicKeyX string 是 公钥X 13375450901292179417154974849571793069911517354720397125027633242680470075859 publicKeyY string 是 公钥X 13375450901292179417154974849571793069911517354720397125027633242680470075859 请求示例 HTTPCURLPOST https://api.loopring.io/api/v2/apiKey HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"accountId\" : 1, \"publicKeyX\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"publicKeyY\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/apiKey -d \\ '{ \"accountId\" : 1, \"publicKeyX\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"publicKeyY\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" }' 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 是 ApiKey 6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } 返回码 返回码 描述 100000 未知错误 101002 未找到该用户 100001 参数非法 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 104004 未提供签名信息 104005 错误的签名信息 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getNextOrderId.html":{"url":"dex_apis/getNextOrderId.html","title":"获取下一个有效OrderId","keywords":"","body":"获取下一个有效OrderId 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/orderId 功能 获取下一个有效OrderId API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 账户ID 1 tokenSId integer 是 需要卖出的Token ID 0 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/orderId?accountId=1&tokenSId=0 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orderId\\?accountId\\=1\\&tokenSId\\=0 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 订单Id 108 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"108\" } 返回码 返回码 描述 100000 未知错误 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getOrderDetail.html":{"url":"dex_apis/getOrderDetail.html","title":"获取订单详情","keywords":"","body":"获取订单详情 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/order 功能 根据指定hash获取订单详情 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 orderHash string 是 订单HASH 13375450901292179417154974849571793069911517354720397125027633242680470075859 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/order?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/order\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data OrderDetail 否 订单详情 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"size\" : \"8210000000000001024\", \"volume\" : \"163182534700000032\", \"price\" : \"0.01987608\", \"filledSize\" : \"0\", \"filledVolume\" : \"0\", \"filledFee\" : \"0\", \"status\" : \"processing\", \"validSince\" : 1583929591, \"validUntil\" : 1586521591, \"createdAt\" : 1583933191494, \"side\" : \"SELL\", \"market\" : \"LRC-ETH\" } } 返回码 返回码 描述 100000 未知错误 107001 用户ID不能为空 107002 订单HASH不能为空 107003 订单不存在 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS OrderDetail 订单详情信息 字段 类型 必须 说明 举例 hash string 是 订单HASH 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf clientOrderId string 是 客户端订单唯一ID 200310143135081332 size string 是 下单量 8210000000000001024 volume string 是 下单额 163182534700000032 price string 是 成交价格 0.01987608 filledSize string 是 成交量 0 filledVolume string 是 成交额 0 filledFee string 是 已生成手续费 0 status string 是 订单状态取值范围 : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] processing validSince integer 是 生效起始时间 1583929591 validUntil integer 是 生效截止时间 1586521591 createdAt integer 是 订单创建时间 1583933191494 side string 是 买卖方向取值范围 : ['SELL', 'BUY'] SELL market string 是 市场对 LRC-ETH "},"dex_apis/submitOrder.html":{"url":"dex_apis/submitOrder.html","title":"提交订单","keywords":"","body":"提交订单 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 POST 访问路径 /api/v2/order 功能 提交订单接口, 要正确提交Loopring订单,需要以下步骤: 通过/api/v2/orderId获取正确的orderId 选择合理有效时间(validSince和validUntil, 最佳方案是validSince大于当前时间, validUntil是当前时间很久之后, 比如一年) 选择合理的MaxFeeBips, 这个字段限制了交易所对用户收费的上限 如果做市商想使用自己的唯一ID来标示订单, 请使用clientOrderId 如果订单是有渠道来源的, 请使用channelId 对订单进行签名 提交订单, 确认返回的结果包含订单Hash API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 exchangeId integer 是 交易所ID 1 orderId integer 是 订单ID 1 accountId integer 是 账户ID 1 tokenSId integer 是 需要卖出的Token ID 0 tokenBId integer 是 需要买入的Token ID 2 amountS string 是 需要卖出的Token数量 1000000000000000000 amountB string 是 需要买入的Token数量 1000000000000000000 allOrNone string 否 订单是否只能完全成交或者0成交, 目前只支持false false buy string 是 买到为止或者卖出为止 true validSince integer 是 订单生效时间, 精确到秒 1567053142 validUntil integer 是 订单失效时间, 精确到秒 1567053142 maxFeeBips integer 是 用户可以接受的最大订单费用, 取值范围(万分之)1~63 20 label integer 是 订单来源标签 20 signatureRx string 是 订单签名结果x部分 13375450901292179417154974849571793069911517354720397125027633242680470075859 signatureRy string 是 订单签名结果y部分 13375450901292179417154974849571793069911517354720397125027633242680470075859 signatureS string 是 订单签名结果s部分 13375450901292179417154974849571793069911517354720397125027633242680470075859 clientOrderId string 否 客户端标识的订单唯一ID 1 channelId string 否 订单渠道号 1 请求示例 HTTPCURLPOST https://api.loopring.io/api/v2/order HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"1\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/order -d \\ '{ \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"1\" }' 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 订单Hash 13375450901292179417154974849571793069911517354720397125027633242680470075859 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" } 返回码 返回码 描述 100000 未知错误 102001 交易所ID不正确 102002 订单中存在不支持的TokenId 102003 无效的账户ID 102004 无效的订单ID 102005 市场对不支持 102006 不合法的费率字段 102007 订单已经存在 102008 订单已经过期 102010 订单缺少签名信息 102011 用户余额不足 102012 下单金额太小 102014 冻结金额失败，请稍后重试 102020 超过下单最大金额 102120 订单未生效 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 104004 未提供签名信息 104005 错误的签名信息 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/batchSubmitOrder.html":{"url":"dex_apis/batchSubmitOrder.html","title":"批量提交订单","keywords":"","body":"批量提交订单 流量控制（请求数/秒数）: 5 / 1 摘要 HTTP 方法 POST 访问路径 /api/v2/batchOrders 功能 批量提交订单，最多一次可以提交10个订单 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 orders List[SubmitOrderRequest] 是 要提交的订单 / 请求示例 HTTPCURLPOST https://api.loopring.io/api/v2/batchOrders HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"orders\" : [ { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"1\" } ] }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/batchOrders -d \\ '{ \"orders\" : [ { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"1\" } ] }' 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[SubmitOrderResult] 是 批量提交订单的详细结果 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } 返回码 返回码 描述 100000 未知错误 100001 参数非法 104209 批量操作部分失败 模型 SubmitOrderRequest 提交订单参数 字段 类型 必须 说明 举例 exchangeId integer 是 交易所ID 1 orderId integer 是 订单ID 1 accountId integer 是 账户ID 1 tokenSId integer 是 需要卖出的Token ID 0 tokenBId integer 是 需要买入的Token ID 2 amountS string 是 需要卖出的Token数量 1000000000000000000 amountB string 是 需要买入的Token数量 1000000000000000000 allOrNone string 否 订单是否只能完全成交或者0成交, 目前只支持false false buy string 是 买到为止或者卖出为止 true validSince integer 是 订单生效时间, 精确到秒 1567053142 validUntil integer 是 订单失效时间, 精确到秒 1567053142 maxFeeBips integer 是 用户可以接受的最大订单费用, 取值范围(万分之)1~63 20 label integer 是 订单来源标签 20 signatureRx string 是 订单签名结果x部分 13375450901292179417154974849571793069911517354720397125027633242680470075859 signatureRy string 是 订单签名结果y部分 13375450901292179417154974849571793069911517354720397125027633242680470075859 signatureS string 是 订单签名结果s部分 13375450901292179417154974849571793069911517354720397125027633242680470075859 clientOrderId string 否 客户端标识的订单唯一ID 1 channelId string 否 订单渠道号 1 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS SubmitOrderResult 单个订单的提交结果 字段 类型 必须 说明 举例 hash string 是 提交的订单的HASH 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf error ResultInfo 否 提交订单的失败错误信息 / ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getOrders.html":{"url":"dex_apis/getOrders.html","title":"获取用户订单列表","keywords":"","body":"获取用户订单列表 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/orders 功能 获取指定用户的订单列表，可以根据市场对、起始时间等条件过滤 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 market string 否 市场对 LRC-ETH start integer 否 起始时间,单位ms 1567053142000 end integer 否 结束时间,单位ms 1567053242000 fromHash string 否 锚定hash（会返回该hash以后的数据） 2600105125336468966417510367500403435128941502452005674156103328855968837178 side string 否 买卖方向取值范围 : ['BUY', 'SELL'] BUY status string 否 订单状态列表取值范围 : ['waiting', 'processing', 'processed', 'failed', 'cancelled', 'expired'] processing,processed limit integer 否 限定数据条数（默认50条） 50 offset integer 否 偏移量（默认0）默认值 : 0L 0 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/orders?accountId=1&market=LRC-ETH&start=1567053142000&end=1567053242000&fromHash=2600105125336468966417510367500403435128941502452005674156103328855968837178&side=BUY&status=processing,processed&limit=50&offset=0 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders\\?accountId\\=1\\&market\\=LRC-ETH\\&start\\=1567053142000\\&end\\=1567053242000\\&fromHash\\=2600105125336468966417510367500403435128941502452005674156103328855968837178\\&side\\=BUY\\&status\\=processing,processed\\&limit\\=50\\&offset\\=0 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data OrdersDetail 否 订单列表返回结果 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 10, \"orders\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"size\" : \"8210000000000001024\", \"volume\" : \"163182534700000032\", \"price\" : \"0.01987608\", \"filledSize\" : \"0\", \"filledVolume\" : \"0\", \"filledFee\" : \"0\", \"status\" : \"processing\", \"validSince\" : 1583929591, \"validUntil\" : 1586521591, \"createdAt\" : 1583933191494, \"side\" : \"SELL\", \"market\" : \"LRC-ETH\" } ] } } 返回码 返回码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS OrdersDetail 订单列表返回结果 字段 类型 必须 说明 举例 totalNum integer 是 满足条件的订单总条数，用于分页 10 orders List[OrderDetail] 否 订单列表 / OrderDetail 订单详情信息 字段 类型 必须 说明 举例 hash string 是 订单HASH 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf clientOrderId string 是 客户端订单唯一ID 200310143135081332 size string 是 下单量 8210000000000001024 volume string 是 下单额 163182534700000032 price string 是 成交价格 0.01987608 filledSize string 是 成交量 0 filledVolume string 是 成交额 0 filledFee string 是 已生成手续费 0 status string 是 订单状态取值范围 : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] processing validSince integer 是 生效起始时间 1583929591 validUntil integer 是 生效截止时间 1586521591 createdAt integer 是 订单创建时间 1583933191494 side string 是 买卖方向取值范围 : ['SELL', 'BUY'] SELL market string 是 市场对 LRC-ETH "},"dex_apis/cancelOrders.html":{"url":"dex_apis/cancelOrders.html","title":"取消订单","keywords":"","body":"取消订单 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 DELETE 访问路径 /api/v2/orders 功能 根据账户ID和订单HASH或者客户端唯一ID取消订单。订单HASH及客户端唯一ID可不传，如果都不传，则取消用户的所有挂单。 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" X-API-SIG string 是 签名信息 \"dkkfinfasdf\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 账户ID 1 orderHash string 否 订单HASH 13375450901292179417154974849571793069911517354720397125027633242680470075859 clientOrderId string 否 客户端标识的订单唯一ID 20200318000000001010 请求示例 HTTPCURLDELETE https://api.loopring.io/api/v2/orders?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859&clientOrderId=20200318000000001010 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdfcurl -X DELETE -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" https://api.loopring.io/api/v2/orders\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859\\&clientOrderId\\=20200318000000001010 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data boolean 否 取消订单返回 true 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : true } 返回码 返回码 描述 100000 未知错误 104001 APIKEY不能为空 102117 没有可以取消的订单 102118 取消订单失败, 请稍后重试 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/batchCancelOrdersByOrderHash.html":{"url":"dex_apis/batchCancelOrdersByOrderHash.html","title":"根据订单HASH批量取消订单","keywords":"","body":"根据订单HASH批量取消订单 流量控制（请求数/秒数）: 5 / 1 摘要 HTTP 方法 DELETE 访问路径 /api/v2/orders/byHash 功能 根据订单HASH,多个订单Hash以逗号分隔开，最多一次10个。 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 账户ID 1 orderHash string 是 要取消的订单HASH,多个HASH以\",\"分隔 13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 请求示例 HTTPCURLDELETE https://api.loopring.io/api/v2/orders/byHash?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -X DELETE -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders/byHash\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[CancelOrderResult] 是 批量取消订单的详细结果 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"id\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"result\" : true, \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } 返回码 返回码 描述 100000 未知错误 100001 参数非法 104209 批量操作部分失败 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS CancelOrderResult 单个订单取消的结果 字段 类型 必须 说明 举例 id string 是 要取消订单的HASH或者ID 13375450901292179417154974849571793069911517354720397125027633242680470075859 result boolean 是 订单取消的结果 true error ResultInfo 否 订单取消失败的错误 / ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/batchCancelOrdersByClientOrderId.html":{"url":"dex_apis/batchCancelOrdersByClientOrderId.html","title":"根据订单的客户端标识的订单ID批量取消订单","keywords":"","body":"根据订单的客户端标识的订单ID批量取消订单 流量控制（请求数/秒数）: 5 / 1 摘要 HTTP 方法 DELETE 访问路径 /api/v2/orders/byClientOrderId 功能 根据订单的客户端标识的订单ID批量取消订单,多个订单ID以\",\"分隔开，最多一次10个。 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 账户ID 1 clientOrderId string 是 要取消的订单的客户端标识的订单唯一ID，多个ID以\",\"分隔，最多10个 20200318000000001010,20200318000000001011 请求示例 HTTPCURLDELETE https://api.loopring.io/api/v2/orders/byClientOrderId?accountId=1&clientOrderId=20200318000000001010,20200318000000001011 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -X DELETE -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders/byClientOrderId\\?accountId\\=1\\&clientOrderId\\=20200318000000001010,20200318000000001011 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[CancelOrderResult] 是 批量取消订单的详细结果 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"id\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"result\" : true, \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } 返回码 返回码 描述 100000 未知错误 100001 参数非法 104209 批量操作部分失败 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS CancelOrderResult 单个订单取消的结果 字段 类型 必须 说明 举例 id string 是 要取消订单的HASH或者ID 13375450901292179417154974849571793069911517354720397125027633242680470075859 result boolean 是 订单取消的结果 true error ResultInfo 否 订单取消失败的错误 / ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/sendTransaction.html":{"url":"dex_apis/sendTransaction.html","title":"发送以太坊交易","keywords":"","body":"发送以太坊交易 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 POST 访问路径 /api/v2/sendEthTx 功能 deposit,onchainWithdrawal,createAccount,updatePassword,enableToken 均使用该接口 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 data string 是 序列化的以太坊签名交易，16进制形式字符串 0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2 请求示例 HTTPCURLPOST https://api.loopring.io/api/v2/sendEthTx HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"data\" : \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/sendEthTx -d \\ '{ \"data\" : \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" }' 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 发送的交易的哈希 0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886\" } 返回码 返回码 描述 100000 未知错误 104202 当前节点服务不可用 104205 内部请求出错 104208 节点服务返回错误信息 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getEthNonce.html":{"url":"dex_apis/getEthNonce.html","title":"查询nonce","keywords":"","body":"查询nonce 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/ethNonce 功能 查询以太坊地址的nonce API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 0x0000000000000000000000000000000000000000 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/ethNonce?owner=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ethNonce\\?owner\\=0x0000000000000000000000000000000000000000 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data integer 否 查询的nonce结果 0 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : 0 } 返回码 返回码 描述 100000 未知错误 104205 内部请求出错 104208 节点服务返回错误信息 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getEthBalance.html":{"url":"dex_apis/getEthBalance.html","title":"查询ETH余额","keywords":"","body":"查询ETH余额 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/ethBalances 功能 查询以太坊地址ETH的余额 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 0x0000000000000000000000000000000000000000 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/ethBalances?owner=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ethBalances\\?owner\\=0x0000000000000000000000000000000000000000 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 余额 0 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0\" } 返回码 返回码 描述 100000 未知错误 104205 内部请求出错 104208 节点服务返回错误信息 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getRecommendedGasPrice.html":{"url":"dex_apis/getRecommendedGasPrice.html","title":"获取推荐gas","keywords":"","body":"获取推荐gas 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/recommendedGasPrice 功能 获取推荐gas API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/recommendedGasPrice HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/recommendedGasPrice 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 推荐gas值 10000000000 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"10000000000\" } 返回码 返回码 描述 100000 未知错误 105001 获取推荐gas失败 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getMarkets.html":{"url":"dex_apis/getMarkets.html","title":"查询市场配置","keywords":"","body":"查询市场配置 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/exchange/markets 功能 查询所有支持的市场配置 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/exchange/markets HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/markets 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[MarketInfo] 否 市场列表 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"market\" : \"LRC-USDT\", \"baseTokenId\" : 2, \"quoteTokenId\" : 0, \"precisionForPrice\" : 6, \"orderbookAggLevels\" : 4, \"enabled\" : false } ] } 返回码 返回码 描述 100000 未知错误 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS MarketInfo 字段 类型 必须 说明 举例 market string 是 市场 LRC-USDT baseTokenId integer 是 基础货币ID 2 quoteTokenId integer 是 定价货币ID 0 precisionForPrice integer 是 服务器端返回深度中支持的最大价格精度 6 orderbookAggLevels integer 是 服务器端返回深度中支持的最大归并等级，支持范围是[0,orderbookAggLevels) 4 enabled boolean 是 是否开放 false "},"dex_apis/getTokens.html":{"url":"dex_apis/getTokens.html","title":"查询交易所支持的通证信息","keywords":"","body":"查询交易所支持的通证信息 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/exchange/tokens 功能 获取交易所支持的全部的通证信息,包含未上架或者已下架的通证信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/exchange/tokens HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/tokens 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[TokenInfo] 否 通证信息列表 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"type\" : \"ERC20\", \"tokenId\" : 2, \"symbol\" : \"LRC\", \"name\" : \"Loopring\", \"address\" : \"0x97241525fe425C90eBe5A41127816dcFA5954b06\", \"unit\" : \"LRC\", \"decimals\" : 18, \"precision\" : 6, \"minOrderAmount\" : \"10000000000000000\", \"maxOrderAmount\" : \"1000000000000000000\", \"dustOrderAmount\" : \"1000000000000000\", \"enabled\" : true } ] } 返回码 返回码 描述 100000 未知错误 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS TokenInfo 通证的详细信息 字段 类型 必须 说明 举例 type string 是 通证的种类取值范围 : ['ERC20', 'ETH'] ERC20 tokenId integer 是 通证在路印协议注册的编号 2 symbol string 是 通证的符号 LRC name string 是 通证的名称 Loopring address string 是 通证的地址 0x97241525fe425C90eBe5A41127816dcFA5954b06 unit string 是 通证的单位 LRC decimals integer 是 通证合约中定义的通证小数位 18 precision integer 是 通证数量保留的小数位 6 minOrderAmount string 是 单笔订单允许的最小下单数量 10000000000000000 maxOrderAmount string 是 单笔订单允许的最大下单数量 1000000000000000000 dustOrderAmount string 是 订单被判定为灰尘单的数量，即小于该数量则不会继续撮合 1000000000000000 enabled boolean 是 服务端当前是否支持该通证的充值提现等操作 true "},"dex_apis/getExchangeInfo.html":{"url":"dex_apis/getExchangeInfo.html","title":"查询交易所的基本必要信息","keywords":"","body":"查询交易所的基本必要信息 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/exchange/info 功能 获取与交易所交互所需的必要信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/exchange/info HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/info 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data ExchangeInfo 否 交易所的必要基本信息 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"chainId\" : 1, \"exchangeId\" : 1, \"exchangeAddress\" : \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\", \"onchainFees\" : [ { \"type\" : \"withdraw\", \"fee\" : \"2000000000000000\" } ] } } 返回码 返回码 描述 100000 未知错误 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS ExchangeInfo 交易所基本信息 字段 类型 必须 说明 举例 chainId integer 是 交易所支持的以太坊网络编号 1 exchangeId integer 是 交易所在路印协议合约的编号 1 exchangeAddress string 是 交易所合约地址 0xbA1D5779131aa529F51B4B00186E9e97f3BeB854 onchainFees List[FeeInfo] 是 交易所收费信息 / FeeInfo 交易所收取的费用信息 字段 类型 必须 说明 举例 type string 是 费用类型 withdraw fee string 是 费用数量，单位为Wei数量的以太坊 2000000000000000 "},"dex_apis/getDepth.html":{"url":"dex_apis/getDepth.html","title":"获取市场深度信息","keywords":"","body":"获取市场深度信息 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/depth 功能 获取某个市场对的深度信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 market string 是 市场对，不支持多市场 LRC-ETH level integer 是 深度等级，越大表示合并的深度越多 2 limit integer 否 返回条数限制默认值 : 50 50 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/depth?market=LRC-ETH&level=2&limit=50 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/depth\\?market\\=LRC-ETH\\&level\\=2\\&limit\\=50 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data Depth 否 深度信息 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"version\" : 147, \"timestamp\" : 432312312, \"bids\" : [[\"0.002\",\"21000\",\"33220000\",\"4\"]], \"asks\" : [] } } 返回码 返回码 描述 100000 未知错误 108000 不支持的市场 108001 不支持的深度等级 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS Depth 深度信息 字段 类型 必须 说明 举例 version integer 是 连续版本号。前端据此判断是否丢失数据。（参考websocket的使用） 147 timestamp integer 是 时间戳 432312312 bids List[List[string]] 是 买单深度,每一条深度包含四个元素，分别是价格，挂单量，挂单总量，和挂单数 [[\"0.002\",\"21000\",\"33220000\",\"4\"]] asks List[List[string]] 是 卖单深度,每一条深度包含四个元素，分别是价格，挂单量，挂单总量，和挂单数 [] "},"dex_apis/getTicker.html":{"url":"dex_apis/getTicker.html","title":"查询交易所Ticker","keywords":"","body":"查询交易所Ticker 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/ticker 功能 查询交易所24小时维度Ticker API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 market string 是 市场对，支持多市场 LRC-ETH,LRC-USDT 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/ticker?market=LRC-ETH,LRC-USDT HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ticker\\?market\\=LRC-ETH,LRC-USDT 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 返回信息 / data List[List[string]] 否 Ticker信息，每一组数据包括市场对，时间戳，Base Token成交总量，Quote Token成交总额，开盘价，最高价，最低价，收盘价，交易笔数，买单盘口，卖单盘口 [[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]] 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]] } 返回码 返回码 描述 100000 未知错误 100001 参数非法 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getCandlestick.html":{"url":"dex_apis/getCandlestick.html","title":"查询K线数据","keywords":"","body":"查询K线数据 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/candlestick 功能 查询K线数据，目前支持2年内范围的数据，每次请求最多查询120个数据点 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 market string 是 市场对，不支持多市场 LRC-ETH interval string 是 间隔，可以是: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w 5min start integer 否 开始时间 1584479105000 end integer 否 结束时间 1584565505000 limit integer 否 数据点数量 120 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/candlestick?market=LRC-ETH&interval=5min&start=1584479105000&end=1584565505000&limit=120 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/candlestick\\?market\\=LRC-ETH\\&interval\\=5min\\&start\\=1584479105000\\&end\\=1584565505000\\&limit\\=120 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[List[string]] 否 K线数据，每一组数据包括开始时间，交易笔数，开盘价，收盘价，最高价，最低价，Base Token成交总量，Quote Token成交总额 [[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]] 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]] } 返回码 返回码 描述 100000 未知错误 100001 参数非法 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getPrice.html":{"url":"dex_apis/getPrice.html","title":"查询token法币价","keywords":"","body":"查询token法币价 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/price 功能 查询以传入法币计价的token价格 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 legal string 是 指定的计价法币，支持USD，CNY，JPY，EUR，GBP，HKD USD 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/price?legal=USD HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/price\\?legal\\=USD 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[Price] 否 返回所有支持token的法币价 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"symbol\" : \"LRC\", \"price\" : \"0\", \"timestamp\" : 0 } ] } 返回码 返回码 描述 100000 未知错误 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS Price Token的法币价 字段 类型 必须 说明 举例 symbol string 是 币种 LRC price string 是 法币价格 0 timestamp integer 是 获取价格的时间 0 "},"dex_apis/getMarketTrade.html":{"url":"dex_apis/getMarketTrade.html","title":"查询市场交易","keywords":"","body":"查询市场交易 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/trade 功能 查询指定市场交易信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 market string 是 要查询的市场，不支持多市场 LRC-USDT limit integer 否 查询条数 20 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/trade?market=LRC-USDT&limit=20 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/trade\\?market\\=LRC-USDT\\&limit\\=20 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data MarketTrades 否 市场交易信息 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 0, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } } 返回码 返回码 描述 100000 未知错误 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS MarketTrades 市场交易信息 字段 类型 必须 说明 举例 totalNum integer 是 总记录数 0 trades List[List[string]] 是 交易记录列表,每条交易记录按照数组顺序分别是交易时间，交易记录id,买卖方向，成交量，成交价格，市场和费用 [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] "},"dex_apis/getAllowance.html":{"url":"dex_apis/getAllowance.html","title":"查询授权","keywords":"","body":"查询授权 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/allowances 功能 查询以太坊地址在交易所的授权情况 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 0x0000000000000000000000000000000000000000 token string 是 要查询的Token地址 0x0000000000000000000000000000000000000000 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/allowances?owner=0x0000000000000000000000000000000000000000&token=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/allowances\\?owner\\=0x0000000000000000000000000000000000000000\\&token\\=0x0000000000000000000000000000000000000000 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 授权的值 0 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0\" } 返回码 返回码 描述 100000 未知错误 104205 内部请求出错 104208 节点服务返回错误信息 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getTokenBalance.html":{"url":"dex_apis/getTokenBalance.html","title":"查询Token余额","keywords":"","body":"查询Token余额 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/tokenBalances 功能 查询以太坊地址Token的余额 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 0x0000000000000000000000000000000000000000 token string 是 要查询的Token地址 0x0000000000000000000000000000000000000000 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/tokenBalances?owner=0x0000000000000000000000000000000000000000&token=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/tokenBalances\\?owner\\=0x0000000000000000000000000000000000000000\\&token\\=0x0000000000000000000000000000000000000000 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 余额 0 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0\" } 返回码 返回码 描述 100000 未知错误 104205 内部请求出错 104208 节点服务返回错误信息 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS "},"dex_apis/getAccount.html":{"url":"dex_apis/getAccount.html","title":"查询用户信息","keywords":"","body":"查询用户信息 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/account 功能 查询用户信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 0x123456 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/account?owner=0x123456 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/account\\?owner\\=0x123456 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data DexAccount 是 用户信息 0 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"accountId\" : 10, \"isFreeze\" : false, \"publicKeyX\" : \"123\", \"publicKeyY\" : \"456\", \"tags\" : \"vip_1\" } } 返回码 返回码 描述 100000 未知错误 101001 未找到该地址 101002 未找到该用户 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS DexAccount 用户信息 字段 类型 必须 说明 举例 accountId integer 是 用户ID 10 isFreeze boolean 是 账户是否冻结状态 false publicKeyX string 是 公钥X 123 publicKeyY string 是 公钥X 456 tags string 否 标记在用户身上的等级和其他特殊标识，以\",\"分隔 vip_1 "},"dex_apis/getUserCreate.html":{"url":"dex_apis/getUserCreate.html","title":"获取用户开户记录","keywords":"","body":"获取用户开户记录 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/user/createInfo 功能 获取用户开户记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer 否 限制条数(默认50) 50 fromHash string 否 锚定HASH(会返回该条hash后面的数据，用于翻页) 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/createInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/createInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data TxDataList 否 用户操作记录列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } 返回码 返回码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS TxDataList 用户操作记录列表对象 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[TxData] 是 操作记录当前页列表 / TxData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 txType string 是 操作类型取值范围 : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string 是 操作币种 LRC amount string 是 申请数量 1000000000000000000 realAmount string 是 实际数量 1000000000000000000 receiver integer 否 接收方 1 txHash string 是 交易HASH 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string 是 操作类型 1000000000000000 status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing progress string 是 进度 100% timestamp integer 是 更新时间 1578572292000 depositType string 否 充值类型取值范围 : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer 否 块高度 100 "},"dex_apis/getUserUpdate.html":{"url":"dex_apis/getUserUpdate.html","title":"获取用户更新记录","keywords":"","body":"获取用户更新记录 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/user/updateInfo 功能 获取用户更新记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer 否 限制条数(默认50) 50 fromHash string 否 锚定HASH(会返回该条hash后面的数据，用于翻页) 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/updateInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/updateInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data TxDataList 否 用户操作记录列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } 返回码 返回码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS TxDataList 用户操作记录列表对象 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[TxData] 是 操作记录当前页列表 / TxData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 txType string 是 操作类型取值范围 : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string 是 操作币种 LRC amount string 是 申请数量 1000000000000000000 realAmount string 是 实际数量 1000000000000000000 receiver integer 否 接收方 1 txHash string 是 交易HASH 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string 是 操作类型 1000000000000000 status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing progress string 是 进度 100% timestamp integer 是 更新时间 1578572292000 depositType string 否 充值类型取值范围 : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer 否 块高度 100 "},"dex_apis/getUserBalances.html":{"url":"dex_apis/getUserBalances.html","title":"查询用户交易所余额","keywords":"","body":"查询用户交易所余额 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/user/balances 功能 查询用户交易所余额 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 tokens string 否 资产列表 0,1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/balances?accountId=1&tokens=0,1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/balances\\?accountId\\=1\\&tokens\\=0,1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[Balance] 是 资产信息 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"accountId\" : 10, \"tokenId\" : 10, \"totalAmount\" : \"100\", \"frozenAmount\" : \"100\" } ] } 返回码 返回码 描述 100000 未知错误 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS Balance 资产信息 字段 类型 必须 说明 举例 accountId integer 是 用户ID 10 tokenId integer 是 资产ID 10 totalAmount string 是 资产数量 100 frozenAmount string 是 资产冻结数量 100 "},"dex_apis/getUserDeposits.html":{"url":"dex_apis/getUserDeposits.html","title":"获取用户充值记录","keywords":"","body":"获取用户充值记录 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/user/deposits 功能 获取用户充值记录列表 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 allType boolean 否 是否获取创建用户伴随的充值记录 false status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer 否 限制条数(默认50) 50 fromHash string 否 锚定HASH(会返回该条hash后面的数据，用于翻页) 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 tokenSymbol string 否 币种 ETH offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/deposits?accountId=1&start=1578558098000&end=1578558098000&allType=false&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=ETH&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/deposits\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&allType\\=false\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=ETH\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data TxDataList 否 用户操作记录列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } 返回码 返回码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS TxDataList 用户操作记录列表对象 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[TxData] 是 操作记录当前页列表 / TxData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 txType string 是 操作类型取值范围 : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string 是 操作币种 LRC amount string 是 申请数量 1000000000000000000 realAmount string 是 实际数量 1000000000000000000 receiver integer 否 接收方 1 txHash string 是 交易HASH 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string 是 操作类型 1000000000000000 status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing progress string 是 进度 100% timestamp integer 是 更新时间 1578572292000 depositType string 否 充值类型取值范围 : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer 否 块高度 100 "},"dex_apis/getUserWithdrawals.html":{"url":"dex_apis/getUserWithdrawals.html","title":"获取用户提现记录","keywords":"","body":"获取用户提现记录 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/user/withdrawals 功能 获取用户提现记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer 否 限制条数(默认50) 50 fromHash string 否 锚定HASH(会返回该条hash后面的数据，用于翻页) 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 tokenSymbol string 否 币种 LRC offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/withdrawals?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=LRC&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/withdrawals\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=LRC\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data TxDataList 否 用户操作记录列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } 返回码 返回码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS TxDataList 用户操作记录列表对象 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[TxData] 是 操作记录当前页列表 / TxData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 txType string 是 操作类型取值范围 : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string 是 操作币种 LRC amount string 是 申请数量 1000000000000000000 realAmount string 是 实际数量 1000000000000000000 receiver integer 否 接收方 1 txHash string 是 交易HASH 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string 是 操作类型 1000000000000000 status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing progress string 是 进度 100% timestamp integer 是 更新时间 1578572292000 depositType string 否 充值类型取值范围 : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer 否 块高度 100 "},"dex_apis/getUserTransfers.html":{"url":"dex_apis/getUserTransfers.html","title":"获取用户转账记录","keywords":"","body":"获取用户转账记录 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/user/transfers 功能 获取用户转账记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer 否 限制条数(默认50) 50 fromHash string 否 锚定HASH(会返回该条hash后面的数据，用于翻页) 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 tokenSymbol string 否 币种 LRC offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/transfers?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=LRC&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/transfers\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=LRC\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data TxDataList 否 用户操作记录列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } 返回码 返回码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS TxDataList 用户操作记录列表对象 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[TxData] 是 操作记录当前页列表 / TxData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 txType string 是 操作类型取值范围 : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string 是 操作币种 LRC amount string 是 申请数量 1000000000000000000 realAmount string 是 实际数量 1000000000000000000 receiver integer 否 接收方 1 txHash string 是 交易HASH 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string 是 操作类型 1000000000000000 status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] processing progress string 是 进度 100% timestamp integer 是 更新时间 1578572292000 depositType string 否 充值类型取值范围 : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer 否 块高度 100 "},"dex_apis/getUserTrades.html":{"url":"dex_apis/getUserTrades.html","title":"获取用户交易记录","keywords":"","body":"获取用户交易记录 流量控制（请求数/秒数）: 1 / 1 摘要 HTTP 方法 GET 访问路径 /api/v2/user/trades 功能 获取用户交易记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 API Key \"sra1aavfa\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 orderHash string 否 指定订单Hash 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 offset integer 否 偏移量(默认0) 1 limit integer 否 限制条数(默认50) 50 fromId integer 否 锚定ID(会返回该条ID后面的数据，用于翻页) 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/trades?accountId=1&orderHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1&limit=50&fromId=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/trades\\?accountId\\=1\\&orderHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1\\&limit\\=50\\&fromId\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data TradeList 否 用户交易列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 100, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } } 返回码 返回码 描述 100000 未知错误 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 ResultInfo API返回信息 字段 类型 必须 说明 举例 code integer 是 返回码 0 message string 是 返回信息 SUCCESS TradeList 用户交易列表对象 字段 类型 必须 说明 举例 totalNum integer 是 交易记录符合条件的总条数，用于分页 100 trades List[List[string]] 是 交易记录列表,每条交易记录按照数组顺序分别是交易时间，交易记录id,买卖方向，成交量，成交价格，市场和费用 [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] "},"websocket/overview.html":{"url":"websocket/overview.html","title":"WebSocket APIs","keywords":"","body":"WebSocket 概述 接入URL wss://api.loopring.io/v2/ws 心跳消息 当用户连接到光锥中继的WebSocket之后，中继会进行心跳检测，每30s会发送“ping”信息，期待接收客户端的“pong”信息。2分钟未收到回复会自动断开连接。 订阅规则 用户在与光锥中继建立WebSocket连接之后，可以订阅消息。需满足以下规则： 用户可以一次订阅或者取消订阅多个主题，如果订阅的多个主题中有需要ApiKey的，则必须包含ApiKey。 用户可以重复订阅相同的主题，最新的订阅条件会覆盖之前的订阅条件。 用户在一次订阅中，不允许订阅相同的主题 用户在取消订阅需要ApiKey的主题时，必须包含订阅该主题时所使用的ApiKey。 模型 订阅结构 字段 类型 是否必现 说明 举例 op string 是 订阅或者取消订阅 \"sub\" apiKey string 否 订阅要求传ApiKey的主题才是必须的 “16M2hKHw9b5VuP21YBAJQmCd3VhuNtdDqG” args list 是 订阅的主题及条件 [ \"depth&LRC-ETH&0\",\"trade&LRC-ETH\"] 订阅示例 订阅示例 { \"op\": \"sub\", \"args\": [ \"candlestick&LRC-BTC&1Hour\", \"depth&LRC-BTC&1\", \"depth10&LRC-BTC&1\", \"trade&LRC-BTC\", \"ticker&LRC-BTC\" ] } 取消订阅示例 { \"op\": \"unSub\", \"args\": [ \"candlestick\", \"depth\", \"depth10\", \"trade\", \"ticker\" ] } 订阅响应结构 字段 类型 是否必现 说明 举例 op string 是 用户传送来的操作 \"sub\" apiKey string 否 订阅要求传ApiKey的主题才是必须的 “16M2hKHw9b5VuP21YBAJQmCd3VhuNtdDqG” args list 是 订阅的主题及条件 [ \"depth&LRC-ETH&0\",\"trade&LRC-ETH\"] result Result 是 订阅结果 / 订阅返回示例 订阅成功示例 { \"op\": \"sub\", \"apiKey\": \"\", \"args\": [ \"candlestick&LRC-ETH&1hr\", \"depth&LRC-ETH&1\", \"trade&LRC-ETH\", \"ticker&LRC-ETH\" ], \"result\": { \"status\": \"ok\" } } 订阅条件不合法的失败示例 { \"op\": \"sub\", \"apiKey\": \"\", \"args\": [ \"candlestick&LRC-ETH\" ], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104106, \"message\": \"receive illegal arg for candlestick:lrc-eth\" } } } 订阅条件无法解析的失败示例 { \"op\": \"\", \"apiKey\": \"\", \"args\": [], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104115, \"message\": \"unexpected msg:xxx\" } } } Result 字段 类型 是否必现 说明 举例 status string 是 订阅是否成功 \"OK\" error Error 否 订阅失败时的错误信息 / Error 字段 类型 是否必现 说明 举例 code integer 是 错误码 107500 message string 是 错误信息 空的订阅信息 公共错误码信息 返回码 描述 104100 空的订阅信息 104101 不支持的操作（光锥中继服务器仅支持sub 和 unsub操作） 104102 不支持的主题 104103 重复的订阅主题 104104 缺少ApiKey信息 104105 与之前订阅使用的ApiKey不符 104112 不合法的ApiKey 104113 取消订阅未曾订阅过的主题 104114 无法通过APiKey找到对应的用户 104115 无法识别的订阅消息 "},"websocket/depth.html":{"url":"websocket/depth.html","title":"订阅订单簿更新","keywords":"","body":"depth 主题 订阅深度的主题，获取定时推送的深度信；订阅该主题不需要apiKey；在没有数据更新时，不进行数据推送。 订阅规则 主题&市场&归并等级 支持的市场以及市场对应支持的归并等级，可以通过api接口api/v2/exchange/markets 获取 返回错误码 返回码 描述 104107 depth主题的订阅条件不合法或者不支持 推送示例 { \"topic\": \"depth&LRC-ETH&1\", \"ts\": 1584717910000, \"startVersion\": 1212121, \"endVersion\": \"1212123\", \"data\": { bids: [ [ \"295.97\", //price \"456781000000000\", //size \"3015000000000\", //volume \"4\" //count ] ], asks: [ ] } } 模型 推送数据结构 字段 类型 是否必现 说明 举例 topic string 是 订阅的主题和条件 \"depth&LRC-ETH&1\" ts integer 是 推送时间 1584717910000 startVersion integer 是 该次推送的起始版本号 1212121 endVersion integer 是 该次推送的终结版本号 1212123 data Depth 是 深度信息 / Depth数据结构 字段 类型 是否必现 说明 举例 bids List[List[string]] 是 买单深度 / asks List[List[string]] 是 卖单深度 / 深度条目 每一条深度数据 字段编号 类型 是否必现 说明 举例 1 string 是 价格 \"0.002\" 2 string 是 挂单量 \"21000\" 3 string 是 挂单总量 \"33220000\" 4 string 是 聚合的订单数目 \"4\" 如何构建本地的Orderbook 订阅 depth主题 开始缓存收到的更新。同一个价位，后收到的更新覆盖前面的。 访问接口 api/v1/depth 获得一个全量的深度快照。 3中获取的快照如果version大约本地version（endVersion），则直接覆盖，如果小于本地version，则相同的价格不覆盖，不同的价格则覆盖。 将深度快照中的内容更新到本地orderbook副本中，并从websocket接收到的第一个startVersion = 本地version 的event开始继续更新本地副本。 每一个新推送的startVersion应该恰好等于上一个event的endVersion+1，否则可能出现了丢包，请从step3重新进行初始化 每一个推送中的挂单量代表这个价格目前的挂单量绝对值，而不是相对变化。 如果某个价格对应的挂单量为0，表示该价位的挂单已经撤单或者被吃，应该移除这个价位。 "},"websocket/depth10.html":{"url":"websocket/depth10.html","title":"订阅订单簿买卖前10的全量推送","keywords":"","body":"depth10 主题 获取定时推送的当前深度中卖单和买单的前10条数据。该订阅不需要apikey，有无数据都会进行推送。 订阅规则： ​ 主题&市场&归并等级 支持的市场以及市场对应支持的归并等级，可以通过api接口api/v2/exchange/markets 获取 返回错误码 返回码 描述 104108 depth10主题的订阅条件不合法或者不支持 订阅推送示例 { \"topic\": \"depth10&LRC-BTC&1\", \"ts\": 1565844208, \"data\": { \"bids\": [ [ \"295.97\", //price \"4567810000000000\", //size \"30150000000000\", //volume \"2\" //count ] ], \"asks\": [ [ \"298.97\", \"456781000000000000\", \"301500000000000\", \"2\" ] ] } } 模型 推送数据结构 字段 类型 是否必现 说明 举例 topic string 是 订阅的主题和条件 \"depth10&LRC-ETH&1\" ts integer 是 推送时间 1584717910000 data Depth 是 深度信息 / Depth数据结构 字段 类型 是否必现 说明 举例 bids List[List[string]] 是 买单深度 / asks List[List[string]] 是 卖单深度 / 深度条目 每一条深度数据 字段编号 类型 是否必现 说明 举例 1 string 是 价格 \"0.002\" 2 string 是 挂单量 \"21000\" 3 string 是 挂单总量 \"33220000\" 4 string 是 聚合的订单数目 \"4\" "},"websocket/trade.html":{"url":"websocket/trade.html","title":"订阅市场交易的更新","keywords":"","body":"trade 主题 订阅该主题，获取定时的最新的成交信息；没有更新则不推送 订阅规则 主题&市场 支持的市场可以通过api接口api/v2/exchange/markets 获取 返回错误码 返回码 描述 104109 trade主题的订阅条件不合法或者不支持 订阅推送示例 { \"topic\": \"trade&LRC-ETH\", \"ts\": 1584717910000, \"data\": { [ \"1584717910000\", //timestamp \"123456789\", //tradeId \"buy\", //side \"500000\", //size \"0.0008\", //price \"100\" //fee ] } } 模型 推送数据结构 字段 类型 是否必现 说明 举例 topic string 是 订阅的主题和条件 \"trade&LRC-ETH\" integer integer 是 推送时间 1584717910000 data List[string] 是 深度信息 / Trade 数据结构 字段编号 类型 是否必现 说明 举例 1 integer 是 成交时间 1584717910000 2 integer 是 交易编号 123456789 3 string 是 买或者卖，指taker \"buy\" 4 string 是 base token的成交数量 \"500000\" 5 string 是 成交价格 \"0.0008\" 6 string 是 base token的收费 \"100\" "},"websocket/ticker.html":{"url":"websocket/ticker.html","title":"订阅市场Ticker的更新","keywords":"","body":"ticker 主题 订阅以获得定时推送的最新的ticker信息，没有更新则不推送 订阅规则 主题&市场 支持的市场可以通过api接口api/v2/exchange/markets获取 返回错误码 返回码 描述 104111 ticker主题的订阅条件不合法或者不支持 订阅推送示例 { \"topic\": \"ticker&LRC-ETH\", \"ts\": 1584717910000, \"data\": [ \"LRC-ETH\", //market \"1584717910000\", //timestamp \"5000000\", //size \"1000\", //volume \"0.0002\", //open \"0.00025\", //high \"0.0002\", //low \"0.00025\", //close \"5000\", //count \"0.00026\", //bid \"0.00027\" //ask ] } 模型 订阅推送模型 字段 类型 是否必现 说明 举例 topic string 是 订阅的主题和条件 \"ticker&LRC-ETH\" integer integer 是 推送时间 1584717910000 data List[string] 是 深度信息 / Ticker数据结构 字段编号 类型 是否必现 说明 举例 1 string 是 市场 \"LRC-ETH\" 2 integer 是 ticker生成时间 1584717910000 3 string 是 base token的成交量 \"5000000\" 4 string 是 quote token 的成交量 \"1000\" 5 string 是 开盘价 \"0.0002\" 6 string 是 最高价 0.00025\" 7 string 是 最低价 \"0.0002\" 8 string 是 最新成交价 \"0.00025\" 9 integer 是 成交笔数 5000 10 string 是 买单最高价 \"0.00026\" 11 string 是 卖单最低价 \"0.00027\" "},"websocket/candleStick.html":{"url":"websocket/candleStick.html","title":"订阅市场CandleStick更新","keywords":"","body":"candlestick 主题 订阅candlestick，获取定时推送的candlestick数据的更新消息推送。订阅该主题不需要传ApiKey信息。 订阅格式 主题&市场&间隔 支持的市场可以通过api接口api/v2/exchange/markets获取 支持的间隔（interval）为1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w 间隔 说明 1min 1分钟 5min 5分钟 15min 15分钟 30min 30分钟 1hr 1小时 2hr 2小时 4hr 4小时 12hr 12小时 1d 1天 1w 1周 返回错误码 返回码 描述 104106 candlestick主题的订阅条件不合法或者不支持 推送示例 { \"topic\": \"candlestick&lrc-btc&1hr\", \"ts\":1584717910000, \"data\": { \"1584717910000\", //start \"5000\", //count \"3997.3\", //open \"3998.7\", //close \"4031.9\", //high \"3982.5\", //low \"500000000000000000\", //size \"2617521141385000000\", //volume } } 模型 推送数据结构 字段 类型 是否必现 说明 举例 topic string 是 订阅的主题和条件 \"candlestick&lrc-btc&1hr\" ts integer 时 推送时间（毫秒） 1584717910000 data List[string] 是 candlestick数据 / CandleStick结构 字段编号 类型 是否必现 说明 举例 1 integer 是 指开盘时间 1584717910000 2 integer 是 成交笔数 5000 3 string 是 开盘价格 \"3997.3\" 4 string 是 收盘价格 \"3998.7\" 5 string 是 最高价 \"4031.9\" 6 string 是 最低价 \"3982.5\" 7 string 是 为wei为单位的base token的成交数量 “500000000000000000” 8 string 是 为wei为单位 quote token的成交数量 \"2617521141385000000\" "},"websocket/account.html":{"url":"websocket/account.html","title":"订阅用户余额更新","keywords":"","body":"Account 主题 订阅用户的余额和冻结金额相关的信息 订阅规则 主题即Account 订阅该主题必须传Apikey 订阅推送示例 { \"topic\": \"account\", \"ts\":1584717910000, \"data\": { \"accountId\":1, \"totalAmount\": \"24439253519655\", \"tokenId\": 2, \"frezeeAmount\": \"0\" } } 模型 订阅推送数据结构 字段 类型 是否必现 说明 举例 topic string 是 订阅的主题和条件 \"account\" ts integer 是 推送时间 1584717910000 data Balance 是 余额信息 / Balance 数据结构 字段 类型 是否必现 说明 举例 accountId integer 是 用户Id 1 tokenId integer 是 通证Id 2 totalAmount string 是 用户余额 \"24439253519655\" frezeeAmount string 是 冻结的余额 \"0\" "},"websocket/order.html":{"url":"websocket/order.html","title":"订阅用户订单更新","keywords":"","body":"order主题 订阅用户的订单更新 订阅规则 主题&市场 订阅该主题必须传apikey 支持的市场可以通过api接口api/v2/exchange/markets 获取 返回错误码 返回码 描述 104110 order主题的订阅条件不合法或者不支持 推送示例 { \"topic\": \"order&LRC-BTC\", \"ts\":1565844328, \"data\": { \"hash\": \"11212\", \"clientOrderId\": \"myOrder\", \"size\": \"500000000\", \"volume\": \"210000000\", \"price\": \"0.000004\", \"filledSize\": \"30000000\", \"filledVolume\": \"100000\", \"filledFee\": \"1000000\", \"status\": \"processing\", \"createdAt\": \"1494900087\", \"validSince\": \"1494900087\", \"validUntil\": \"1495900087\", \"side\": \"buy\", \"market\": \"LRC-BTC\" } } 模型 推送数据结构 字段 类型 是否必现 说明 举例 topic string 是 订阅的主题和条件 \"order&lrc-eth\" ts integer 是 推送时间 1584717910000 data Order 是 订单信息 / Order数据结构 字段 类型 是否必现 说明 举例 hash string 是 订单哈希 \"11212\" clientOrderId string 是 用户自定义id \"myOrder\" size string 是 base token 的数量 \"500000000\" volume string 是 quote token 的数量 \"210000000\" price string 是 订单价格 \"0.000004\" filledSize string 是 已经成交的basetoken的数量 \"30000000\" filledVolume string 是 已经成交的quotetoken的数量 \"100000\" filledFee string 是 已支付的手续费 \"1000000\" status string 是 订单状态 \"processing\" createdAt integer 是 订单创建时间 1584717910000 updateAt integer 是 订单最后一次的更新时间 1584717910000 side string 是 买或卖 \"buy\" market string 是 市场 \"LRC-ETH\" 订单状态取值范围 状态 说明 processing 订单进行中，订单等待成交或者已经成交一部分 processed 订单完全成交 cancelling 取消中 cancelled 订单取消 expired 订单过期 waiting 订单还未生效 "}}