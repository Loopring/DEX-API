{"./":{"url":"./","title":"路印","keywords":"","body":"关于路印 路印协议和路印交易所 路印协议是第一个基于zkRollup技术的去中心化交易协议。使用路印协议，您可以搭建一个不托管用户交易资产，基于订单撮合，高性能的去中心化交易所。由于采用了zkRollup这种Layer-2扩容技术，路印协议在以太坊不扩容的前提下，也可以每秒清算超过2000笔交易。 如果您想了解路印协议的设计和技术细节，请访问路印协议官网：https://loopring.org。 路印交易所是第一个使用路印协议搭建的去中心化交易平台。其网页应用的地址是：Loopring.io。路印交易所目前的版本是beta1，采用了路印协议3.1.1版本。其以太坊主网合约的地址为：0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777。该地址对应的永久ENS为：beta1.loopringio.eth。 路印交易所并不是路印协议上唯一的交易所，WeDEX.io也是建立在路印协议的基础上。在您使用不同的路印去中心化交易所前，您需要明确知道您是在和哪个交易所打交道。路印协议本身的智能合约并不与用户直接交互，只为各个交易所合约提供包括用户注册，充值提现，交易清算在内的业务逻辑。 优势 路印协议保障了用户充值到交易所的资产不会被任何人挪用。即使交易所网站关闭或者运营者失联，也可以通过使用默克尔证明，在锁定期过后将全部资产提现出来。 路印协议不保障撮合的效率和公平性。撮合是由路印交易所的中继系统完成的，而中继是整个解决方案里面很中心化的部分。基于同样版本协议的不同交易所，可以采用不同的中继架构，因此用户可以根据不同交易所中继的效率和公平性，选择使用不同的交易所。路印协议保障中继撮合过程必须遵守一定的规则，但对中继没有任何服务质量的要求。 路印中继是闭源开发的，目前吞吐量大约是每秒200笔交易。 架构 路印交易所的整体架构如下图所示： 您需要了解的一些关键点包括： 路印的API除了提供读取中继数据功能，主要用来处理用户和客户端的链下请求（offchain requests），包括提交订单，取消订单，和提现。 用户账号注册，修改密码，充值必须通过以太坊交易来发起请求（onchain requests）。用户也可以通过以太坊交易，提交提现请求。路印协议要求交易所必须无条件按顺序处理所有链上请求。 路印具有与中心化交易所相似的高性能交易体验，这主要得益于中继的批处理能力。路印仅把以太坊作为数据存储层和零知识证明的验证层，不在以太坊上做与交易清结算相关的任何计算。 "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"术语","keywords":"","body":"术语 DEX Decenralized EXchange的简称，即去中心化交易所。路印交易所是搭建在以太坊上的去中心化交易所。 零知识证明。 一种证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的一种技术。 中继 路印交易所的后台系统，负责订单操作，交易撮合，零知识证明生成等。 链上请求 通过以太坊交易发送给路印交易所智能合约的请求。 链下请求 通过路印中继的API，绕过以太坊区块链，直接发送给路印交易所的请求。 基础通证（Base Token） 指一个交易对的交易对象。如LRC-ETH交易对中，LRC即为该交易对的基础通证。 计价通证（Quote Token） 指一个交易对的计价通证。如LRC-ETH交易对中，ETH即为该交易对的计价通证。 Size 指订单的基础通证数量。对于2000LRC 买 1EHT的订单，Size为2000。 Volume 指订单的计价通证数量。对于2000LRC 买 1EHT的订单，Volume为1。 EdDSA 路印协议用于对链下请求做签名的算法。路印交易所的链上请求需要用户使用以太坊地址对应的ECDSA私钥签名，而链下请求则需要使用交易账号的EdDSA私钥来签名。 "},"basics/orders.html":{"url":"basics/orders.html","title":"订单模型","keywords":"","body":"订单模型 单向订单模型 与多数中心化交易所的订单模型不同，路印采用的是单向订单模型（Uni-Directional Order Model，简称UDOM）。也就是说，无论买单还是卖单，都统一用一种数据结构表示。我们先通过一个简化过的模型举几个路印限价单的例子（路印目前不支持市价单）。 在LRC-ETH交易对，一个用0.03价格卖出500个LRC的卖单可以这样表示： { // LRC-ETH市场：0.03价格卖出500个LRC的卖单 \"tokenS\": \"LRC\", \"tokenB\": \"ETH\", \"amountS\": 500, \"amountB\": 15 // = 500 * 0.03 } 订单数据项中的的字母S代表Sell，B代表Buy。 用0.03价格买入出500个LRC的买单这样表示： { // LRC-ETH市场：0.03价格买入500个LRC的买单 \"tokenS\": \"ETH\", \"tokenB\": \"LRC\", \"amountS\": 15, // = 500 * 0.03 \"amountB\": 500 } 单向订单模型中不显性表达交易对和价格。 不过上面的模型有个小问题：对完全成交的判断条件没有做说明。或者说，一个订单完全成交，是按照amountS的实际交易额达到了指定的值做标准，还是按照amountB的实际交易额达到了指定的值做标准。因此我们还需引入了另一个参数buy来指明完全成交的判断条件。如果buy==true，就按照amountB的实际交易判断是否完全成交；否者按照amountS的实际交易额判断。因此这上面的卖单和买单就需要这样修改： { // LRC-ETH市场：0.03价格卖出500个LRC的卖单 \"tokenS\": \"LRC\", \"tokenB\": \"ETH\", \"amountS\": 500, \"amountB\": 15 // = 500 * 0.03， \"buy\": false // 完全成交用amountS实际交易额判断 } { // LRC-ETH市场：0.03价格买入500个LRC的买单 \"tokenS\": \"ETH\", \"tokenB\": \"LRC\", \"amountS\": 15, // = 500 * 0.03 \"amountB\": 500, \"buy\": true // 完全成交用amountB实际交易额判断 } 注意：上面的卖单如果完全成交，实际上获得的ETH可能大于15ETH；而上面的买单如果完全成交，实际上支付的ETH可能少于15ETH。这就是buy这个参数对撮合引擎行为影响的结果。 将上面两个订单的buy值反转，会有什么效果呢？答案是：LRC-ETH交易对的卖单就变成了ETH-LRC交易对的买单；而LRC-ETH交易对的买单就变成了ETH-LRC交易对的卖单。也就是说，路印协议的一个交易对，实际上等同于多数中心化交易所的LRC-ETH和ETH-LRC两个交易对，并且可以表达这个两个交易对各自的买卖单，并将其放在一起撮合。 除了优雅和简单之外，路印协议的单向订单模型还使得在零知识证明电路中实现更简单的结算逻辑成为可能。 订单数据 路印实际的订单格式要更加复杂一些。您可以通过下面的JSON来表达一个路印的限价单。具体参数细节详见提交订单。 newOrder = { \"tokenSId\": 2, // LRC \"tokenBId\": 0, // ETH \"amountS\": \"500000000000000000000\", \"amountB\": \"15000000000000000000\", \"buy\": \"false\", \"exchangeId\": 2, \"accountId\": 1234, \"allOrNone\": \"false\", // 目前值必须为\"false\" \"maxFeeBips\": 50, \"label\": 211, \"validSince\": 1582094327, \"validUntil\": 1587278341, \"orderId\": 5, \"hash\": \"14504358714580556901944011952143357684927684879578923674101657902115012783290\", \"signatureRx\": \"15179969700843231746888635151106024191752286977677731880613780154804077177446\", \"signatureRy\": \"8103765835373541952843207933665617916816772340145691265012430975846006955894\", \"signatureS\" : \"4462707474665244243174020779004308974607763640730341744048308145656189589982\", \"clientOrderId\": \"Test01\", \"channelId\": \"channel1::maker1\" } 接下来我们为您对其中的一些数据项做进一步说明。 通证和数量 与简化模型不同，实际订单中通证不用其名字或ERC20地址表达，而是使用该通证在路印交易所的合约中注册的序号（Token ID）表达。上面的例子中，我们假设LRC和ETH的ID分别是2和0。 实际通证配置信息可以通过交易所支持的通证信息查询。 订单中的通证数量使用通证的最小单元，通过字符串类型表达。以LRC为例，LRC的ERC20合约中decimals为18，因此1.0LRC应该表示为\"1000000000000000000\"(1后面跟18个0)。每个通证的decimals都是由其智能合约决定；ETH的decimals是18。 请注意：订单中的buy和allOrNone的类型是字符串而不是布尔。 交易手续费 maxFeeBips=50代表该订单愿意支付给交易所的最高手续费比例是0.5%（maxFeeBips的单位是0.01%）。路印的交易手续费都是用成交获得的tokenB支付的。假设上面订单某次成交买入了\"10000000000000000000\"ETH（10ETH)，那么实际支付的手续费不会超过0.05ETH（\"10000000000000000000\" * 0.5%）。 实际支付的手续费比例是由路印中继决定的。中继会根据不同的VIP等级，给不同的用户相应的交易手续费折扣。路印协议不允许实际手续费比例大于用户订单中指定的最高手续费比例。 用户下单的时候，必须将maxFeeBips设置为不小于该用户在指定交易对的默认交易手续费比例。该信息可以通过/api/v2/user/feeRates查询获得。如果您信任路印交易所，也可以将这个maxFeeBips设置为协议允许的最大值63。 生效和过期时间 validSince代表订单生效时间，validUntil代表订单过期时间，其单位均为秒。 中继服务器收到订单时会验证订单中的这两个时间戳；路印协议的零知识证明电路代码在清算时候也需要判断这两个时间戳。由于zkRollup批处理延迟，以及以太坊上时间与服务器时间可能存在的偏差，我们强烈建议validSince设置为当前时间，且validSince和validUntil之间的时间窗口不小于一个星期，否则您的订单可能不会被撮合。 您可以通过使用validUntil时间戳来让订单自动过期，避免不必要的主动取消订单操作。 成交量与订单号 路印协议3.1.1为支持的每个通证预留了16384（2142^{14}2​14​​）个槽位来记录卖出该通证的订单的成交量。如果订单ID是N，那么使用的槽位编号就是N % 16384。换言之，如果槽位编号是m，该槽位就可以被用来记录具有下列ID的订单：m，m + 16384，m + 16384 * 2，... 以此类推。 每个槽位都记录了当前在追踪的订单的ID（初始值就是槽位编号），并且后续不接受订单ID比当前订单ID更小的订单。假设槽位1记录的是ID为32769（ 1 + 16384 * 2）的订单的订单状态，当用户下一个订单ID为1或16385的订单的时候，下单就会失败。当您在一个市场的活跃订单达到16384后，您需要先取消部分订单释放槽位，才可以继续下新的订单。 订单ID的最大值是1048576，即2202^{20}2​20​​。到达这个ID上限后，对应的通证就无法再下任何卖单。对于普通用户，这不是大问题；但对于程序化交易，您可能需要注册一个新账号继续交易。 路印协议3.5会去除订单ID最大值的限制，但依然保留槽位的设计和数量。 值得注意的是，同一用户在基础通证相同的多个交易对（如LRC-ETH和LRC-USDT）的所有卖单共享上面的16384槽位的。如果您不想在客户端维护交易对间订单ID和槽位的分配，您可以注册多个账号：一个账号参与LRC-ETH市场的交易，另一个账号参与LRC-USDT市场的交易。 我们知道这种设计带来的不便利。不过这是路印协议设计时候做的取舍。希望后续技术的进步可以将这个限制去除。 其它数据项 exchangeId：路印交易所在路印协议体系中的交易所序号。后续路印交易所升级智能合约后，这个exchangeId的值会变化。路印交易所beta1对应的exchangeId是2。 accountId：用户的账号ID。 allOrNone：如果是\"true\"，要求订单要么不成交，要么就要完全成交。目前这个参数还不被撮合引擎支持，因此请先设置为\"false\"。 label: 用于在协议层标记订单。该项的值对于交易清算没有任何影响。用户会对这个值做签名，因此该值对于不同实体间的分润根据可信度。 clientOrderId: 用户客户端在协议层外标记订单，可以是任意长度小于66的字符串。该项的值对于交易清算没有任何影响。用户不会对该项做签名。 channelId：订单渠道号, 用来标示订单从哪个渠道提交。 更多细节请参考提交订单。 "},"basics/key_mgmt.html":{"url":"basics/key_mgmt.html","title":"秘钥管理","keywords":"","body":"秘钥管理 使用路印API之前，您需要了解如何获取和更改您账号的EdDSA公秘钥对和ApiKey。调用API时，ApiKey需要通过HTTP头传递给路印的中继；EdDSA秘钥用来在客户端对链下请求做数字签名。 获取 首先您需要在路印交易所的网页界面（Loopring.io）注册一个账号。注册好账号之后，您可以使用『导出账号』功能将账号相关的信息通过JSON格式导出。这些信息包括EdDSA公秘钥对和ApiKey。 导出的JSON看起来应该类似于： { \"exchangeName\": \"LoopringDEX: Beta 1\", \"exchangeAddress\": \"0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777\", \"exchangeId\": 2, \"accountAddress\": \"0xe9577b420d96adfc97ff1e9e0557f8c73d7247fe\", \"accountId\": 12345, \"apiKey\": \"qXJpfTKrF0O5jIDPYIu7YkVgLFbvm5uIgPKBmHP2kBpcdKZjgfFKhIlE8evo9lKa\", \"publicKeyX\": \"20230748339558541226323870947000799026059173889124399831342481595010628000129\", \"publicKeyY\": \"4980637490279511620100245514492532318691849019959343538108355525575855311214\", \"privateKey\": \"1242957328515765470505817310060337585626176314364086438653683782645761561015\" } 其中的前4项是常量，和路印交易所的版本相关；其它数据项和您的账号相关。其中publicKeyX与publicKeyY合起来是您账号的EdDSA公钥，privateKey是EdDSA秘钥。 请您一定妥善保管EdDSA秘钥和ApiKey。如果这些信息不慎泄漏，会导致您资产的丢失。 在任何情况下，路印交易所和其API均不会向您询问EdDSA私钥。 更改 您可以通过路印交易所的『更改密码』功能更改您账号的EdDSA公秘钥对。由于涉及到以太坊交易确认和零知识证明，新的EdDSA公秘钥对需要等待一段才会生效。您可以通过/api/v2/account接口获取账号信息，如果其中的frozen项为true，表明您的账号由于正在更新EdDSA公秘钥对，通过旧的EdDSA公秘钥对和新的EdDSA公秘钥对均无法下单。 如果您通过Loopring.io页面更改密码，您的ApiKey也会被自动更新。另外ApiKey还可以通过路印的API接口更改。 EdDSA派生算法 路印协议对EdDSA的生成方式不做任何限制。在路印交易所，每个账号的EdDSA公秘钥对是由这个账号的以太坊地址和交易密码派生计算出来的。由于地址是公开信息，因此您的交易密码的强度对于您交易资产的安全至关重要。 如果您使用路印交易所网站来设置交易密码，您的密码应该足够强大，无需担心被暴力破解；否则您需要特别注意不要使用简单密码。和中心化交易所不同，暴力破解您的EdDSA秘钥可以不必经过路印的中继系统 - 您的EdDSA公钥存储在以太坊上，黑客可以将其读取出来做暴力破解的对比参照。 EdDSA的派生算法如下所示： seed = keccakHash('LOOPRING' + address.toLowerCase() + keccakHash(password)) keyPair = myEdDSAGenerator.generate(seed) 其中keccakHash返回kecca256运算后的16进制字符串。 ApiKey生成方式 ApiKey是在注册账号时由路印中继随机生成的一个全局唯一字符串，与您的账号一对一绑定。 "},"basics/signing.html":{"url":"basics/signing.html","title":"请求签名","keywords":"","body":"请求签名 路印API涉及到两种不同类别的签名。一种是通用API请求签名，用来验证API调用被用户授权；另一种是路印协议链下请求签名，用来向路印协议证明链下请求被用户授权。我们分别对这两种类别做个说明。 通用API请求签名 签名生成算法 初始化空字符串signatureBase； 将API请求的HTTP方法字符串追加到signatureBase； 将“＆”字符附加到signatureBase； 将百分号编码后（percent-encoded）后的完整URL路径（不包括“?”和查询参数）追加到signatureBase； 将“＆”字符附加到signatureBase； 初始化空字符串parameterString； 对于GET / DELETE 请求： 将请求里的参数按键的字典顺序升序排序，得到排过序后的键/值对； 将百分号编码后后的键附加到parameterString； 将“=”字符附加到parameterString； 将百分号编码后后的值附加到parameterString； 如果有更多的键/值对，请在parameterString后面附加“＆”字符，并重复上述操作； 对于POST / PUT 请求； 将发送请求的Body JSON字符串附加到parameterString； 将百分号编码后后的parameterString附加到signatureBase； 计算signatureBase的SHA-256哈希值hash； 对hash用账号的私钥privateKey做签名，得到三个值：Rx,Ry, 和S； 将Rx,Ry, 和S通过逗号分隔拼接成最终签名字符串：${Rx},${Ry},${S}。 HTTP Method and URL 请使用大写的HTTP方法： GET POST PUT DELETE URL中请一定包含HTTPS协议头，确保协议头和接入URL全部小写，比如： https://api.loopring.io/api/v2/apiKey 示例 假设上面的URL包含下列Query参数： https://api.loopring.io/api/v2/apiKey?publicKeyX=13375450901292179417154974849571793069 911517354720397125027633242680470075859&publicKeyY=133754509012921794171549748495717930 69911517354720397125027633242680470075859&accountId=1 即： 参数名 参数值 publicKeyX 13375450901292179417154974849571793069911517354720397125027633242680470075859 publicKeyY 13375450901292179417154974849571793069911517354720397125027633242680470075859 accountId 1 那么，parameterString应该为： accountId=1&publicKeyX=1337545090129217941715497484957179306991151735472039712502763324 2680470075859&publicKeyY=13375450901292179417154974849571793069911517354720397125027633 242680470075859 signatureBase应该为： GET&https%3A%2F%2Fapi.loopring.io%2Fapi%2Fv2%2FapiKey&accountId%3D1%26publicKeyX%3D1337 5450901292179417154974849571793069911517354720397125027633242680470075859%26publicKeyY% 3D13375450901292179417154974849571793069911517354720397125027633242680470075859 路印协议链下请求签名 路印协议3.1.1支持“订单”，和“链下提现”两种链下请求。由于这两种链下请求都会造成对交易所默克尔树的修改，通过路印API提交这是两种数据时，必须附带路印协议要求的特殊的签名。 路印协议3.1.1还支持“取消订单”链下请求，但会在后续的3.5版本中将其去掉。因此路印中继不会支持该链下请求。 链下请求签名包括以下步骤： 对请求r（JSON类型）进行规整，生成一个字符串s。 计算s的Poseidon哈希h（见下面章节）。 对h用账号的私钥privateKey做签名，得到三个值：Rx,Ry, 和S（见下面章节）。 将h、Rx、Ry、 和S转换成字符串后合并到r当中（请注意名字的改变）。 { ..., \"hash\": ..., \"signatureRx\": \"16367919966553849834214288740952929086694704883595501207054796240908626703398\", \"signatureRy\": \"5706650945525714138019517276433581394702490352313697178959212750249847059862\", \"signatureS\": \"410675649229327911665390972834008845981102813589085982164606483611508480748\" } 订单签名 订单中一些数据项需要按照特定序列化成一个整数数组，对这个数组计算Poseidon哈希，然后对该哈希做EdDSA签名。 订单的序列化规则，哈希，签名方式必须严格遵循路印协议规范。 下面我们用Python代码做示范： def sign_int_array(privateKey, serialized, t): PoseidonHashParams = poseidon_params( SNARK_SCALAR_FIELD, t, 6, 53, b'poseidon', 5, security_target=128 ) hash = poseidon(serialized, PoseidonHashParams) signedMessage = PoseidonEdDSA.sign(hash, FQ(int(privateKey))) return ({ \"hash\": str(hash), \"signatureRx\": str(signedMessage.sig.R.x), \"signatureRy\": str(signedMessage.sig.R.y), \"signatureS\": str(signedMessage.sig.s), }) def serialize_order(order): return [ int(order[\"exchangeId\"]), int(order[\"orderId\"]), int(order[\"accountId\"]), int(order[\"tokenSId\"]), int(order[\"tokenBId\"]), int(order[\"amountS\"]), int(order[\"amountB\"]), int(order[\"allOrNone\"]==\"true\"), int(order[\"validSince\"]), int(order[\"validUntil\"]), int(order[\"maxFeeBips\"]), int(order[\"buy\"]==\"true\"), int(order[\"label\"]) ] def sign_order(privateKey, order): serialized = serialize_order(order) signed = sign_int_array(serialized, 14 /* 注意这个t值 */) order.update(signed) 如果您不使用ethsnarks代码仓库计算Poseidon哈希，请一定注意Poseidon参数的配置，保证其与路印协议使用的参数完全一致。否则验证签名会失败。 链下提现签名 目前的路印API还不支持客户端提交链下提现请求。不过我们会很快增加这个API。 下面是链下提现的一个例子： { \"exchangeId\": 2, \"accountId\":100, \"tokenId\": 0, \"amount\": 1000000000000000000, \"feeTokenId\": \"2\", \"amountFee\": 20000000000000000000, \"label\": 0, \"nonce\": 10 } 其中的nonce值必须从0开始，不间断增加。 用Python对其签名的代码如下： def serialize_offchain_withdrawal(withdrawal): return [ int(withdrawal['exchangeId']), int(withdrawal['accountId']), int(withdrawal['tokenId']), int(withdrawal['amount']), int(withdrawal['feeTokenId']), int(withdrawal['amountFee']), int(withdrawal['label']), int(withdrawal['nonce']) ] def sign_offchain_withdrawal(privateKey, offchainWithdrawal): serialized = serialize_offchain_withdrawal(offchainWithdrawal) signed = sign_int_array(serialized, 9 /* 注意这个t值 */) offchainWithdrawal.update(signed) 参考资料 您可以通过下列文献和代码仓库了解更多关于Poseidon哈希和EdDSA签名的细节。 ethsnarks：https://github.com/HarryR/ethsnarks.git SHA256 Hash：https://en.wikipedia.org/wiki/SHA-2 EdDSA：https://en.wikipedia.org/wiki/EdDSA Poseidon Hash：https://www.poseidon-hash.info/ 您也可以参考我们的示范代码了解更多应用细节。 "},"basics/examples.html":{"url":"basics/examples.html","title":"示范代码","keywords":"","body":"示范代码 https://github.com/Loopring/hello_loopring代码仓库包含了一些简单示例，帮助您快速上手使用路印API。其中： hash_and_sign/：使用Python和ethsnarks开源仓库，计算任意字符串的Poseidon哈希，并对其做EdDSA的签名和验签。 trading/：提交订单，读取订单，和取消订单。 offchain_withdrawal/：链下提现的签名和提交（未完成）。 我们后续会不断完善，开源更多的代码教程。敬请期待。 "},"basics/contracts.html":{"url":"basics/contracts.html","title":"智能合约","keywords":"","body":"智能合约 下面是路印协议和路印交易所在以太坊主网的合约列表。 LRC LRC代币: 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD（lrctoken.eth） 路印协议（3.1.1） UniversalRegistry: 0x36F568EF555df25be4B6e15D16994F3A8374214E LoopringV3: 0x18dd1dda037B009F7C1024dDdD58e4Fe9F960ac7 ExchangeV3: 0x730Ea81C982939931d7514CC3Fbc22eAf7D372ec ProtocolFeeVaultAddress: 0x4b89f8996892d137c3dE1312d1dD4E4F4fFcA171（feevault.lrctoken.eth） BlockVerifier: 0x40598B41cc17a7E56dd72F415E8223aaCCA94cF7（blockverifier.lrctoken.eth） DowntimeCostCalculator: 0x873685f032c6Aa1572766401f3198a1f09A5C221 UniswapTokenSellerAddress: 0xdd5102f902b0892D1bbf2D2d0fCBE11ccEA1D537 UserStakingPoolAddress: 0xF4662bB1C4831fD411a95b8050B3A5998d8A4A5b（stakingpool.lrctoken.eth） ChainlinkTokenPriceProvider: 0x3B740FeE3ED82FA676286938E124A8Bb74553f93 MovingAveragePriceProvider: 0x388110217e4d194d501BB52c3AB28dC709EB450d 开源 路印协议代码完全开源，包括设计文档，智能合约代码，和电路代码。如果您有任何问题，请发电邮给路印基金会 - foundation@loopirng.org。 路印交易所（beta1） exchangeName: LoopringDEX: Beta 1 exchangeId: 2 exchangeAddress: 0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777 owner: 0x4374D3d032B3c96785094ec9f384f07077792768 operator: 0x4374D3d032B3c96785094ec9f384f07077792768 "},"REST_APIS.html":{"url":"REST_APIS.html","title":"REST API","keywords":"","body":"REST API 本文主要描述路印交易所REST API的共性部分。 接入URL https://api.loopring.io 限流 每个API都有流量限制，超额的调用请求会被拒绝（返回429）。如果您长期超额调用，您的账号就会被列入黑名单，从而无法继续使用路印API。 HTTP头 X-API-KEY 除查询用户ApiKey外的所有API都需要指定X-API-KEYHTTP头，提供用户的ApiKey。 X-API-SIG 以下API需要指定X-API-SIGHTTP头，提供用户的的EdDSA数字签名： 查询用户ApiKey 取消订单 更新ApiKey 设置HTTP头 使用Python设置HTTP头的代码如下： def init_request_session(apiKey, sig): session = requests.session() session.headers.update({ 'Accept': 'application/json', 'X-API-KEY': apiKey, 'X-API-SIG': sig, }) return session API返回值 除了网络错误，所有API都会返回200状态码和代表API结果的JSON数据。JSON返回信息中都包含一个resultInfo字段，用以反馈API调用的通用状态，特别是出错时候的状态码。如果请求正常返回，则还会返回一个data字段，该字段的值也是一个JSON结构，针对不同API代表不同的业务数据，请参考每个API说明。 返回值结构 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 调用结果 - ResultInfo结构 字段 类型 必须 说明 举例 code integer 是 状态码 0 message string 是 返回说明。用来帮助调试，不应在前端显示或用于逻辑判断。 \"SUCCESS\" 状态码 状态码 描述 0 成功 100000 内部未知错误 100001 参数非法 100002 请求超时 100202 更新失败 100203 内部存储错误 100204 重复提交 "},"dex_apis/getTimestamp.html":{"url":"dex_apis/getTimestamp.html","title":"查询服务器当前时间","keywords":"","body":"查询服务器当前时间 流量控制: 5 每 4 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/timestamp 功能 返回服务器当前时间，以毫秒为单位 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/timestamp HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/timestamp 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data integer 否 获取服务器时间返回 1584683483382 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : 1584683483382 } 状态码 状态码 描述 100000 未知错误 "},"dex_apis/getApiKey.html":{"url":"dex_apis/getApiKey.html","title":"查询用户ApiKey","keywords":"","body":"查询用户ApiKey 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/apiKey 功能 用户注册的时候系统已经产生一个ApiKey，用户通过此接口当前的ApiKey API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-SIG string 是 签名信息 \"13834524429315716527072245289201098743367448928828941694333300773464291931668,19252438164424980901323496067579767457298262609633182654968500317796010794338,1296502169918579172046019624886776672473813683541532008712357317204831986826\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 10 publicKeyX string 是 公钥X \"123\" publicKeyY string 是 公钥X \"456\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/apiKey?accountId=10&publicKeyX=123&publicKeyY=456 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-SIG: dkkfinfasdfcurl -H \"X-API-SIG:dkkfinfasdf\" https://api.loopring.io/api/v2/apiKey\\?accountId\\=10\\&publicKeyX\\=123\\&publicKeyY\\=456 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 是 ApiKey \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } 状态码 状态码 描述 100000 未知错误 101002 未找到该用户 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 104004 未提供签名信息 104005 错误的签名信息 "},"dex_apis/applyApiKey.html":{"url":"dex_apis/applyApiKey.html","title":"更新用户ApiKey","keywords":"","body":"更新用户ApiKey 流量控制: 5 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v2/apiKey 功能 如果用户想要更换ApiKey，就调用此接口，header中传入最近使用的API key，返回结果会传回新的ApiKey。之后每次调用getApiKey都返回当前最新的ApiKey API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 publicKeyX string 是 公钥X \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" publicKeyY string 是 公钥Y \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" 请求示例 HTTPCURLPOST https://api.loopring.io/api/v2/apiKey HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"accountId\" : 1, \"publicKeyX\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"publicKeyY\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/apiKey -d \\ '{ \"accountId\" : 1, \"publicKeyX\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"publicKeyY\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" }' 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 是 ApiKey \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } 状态码 状态码 描述 100000 未知错误 101002 未找到该用户 100001 参数非法 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 104004 未提供签名信息 104005 错误的签名信息 "},"dex_apis/getNextOrderId.html":{"url":"dex_apis/getNextOrderId.html","title":"获取下一个有效OrderId","keywords":"","body":"获取下一个有效OrderId 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/orderId 功能 根据账户ID和TokenID获取下一个有效OrderId API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 账户ID 1 tokenSId integer 是 需要卖出的Token ID 0 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/orderId?accountId=1&tokenSId=0 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orderId\\?accountId\\=1\\&tokenSId\\=0 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 订单Id \"108\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"108\" } 状态码 状态码 描述 100000 未知错误 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 "},"dex_apis/getOrderDetail.html":{"url":"dex_apis/getOrderDetail.html","title":"获取订单详情","keywords":"","body":"获取订单详情 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/order 功能 根据指定hash获取订单详情 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 orderHash string 是 订单HASH \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/order?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/order\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data OrderDetail 否 订单详情 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"size\" : \"8210000000000001024\", \"volume\" : \"163182534700000032\", \"price\" : \"0.01987608\", \"filledSize\" : \"0\", \"filledVolume\" : \"0\", \"filledFee\" : \"0\", \"status\" : \"processing\", \"validSince\" : 1583929591, \"validUntil\" : 1586521591, \"createdAt\" : 1583933191494, \"side\" : \"SELL\", \"market\" : \"LRC-ETH\" } } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 107002 订单HASH不能为空 107003 订单不存在 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 OrderDetail 订单详情信息 字段 类型 必须 说明 举例 hash string 是 订单HASH \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" clientOrderId string 是 客户端订单唯一ID \"200310143135081332\" size string 是 下单量 \"8210000000000001024\" volume string 是 下单额 \"163182534700000032\" price string 是 成交价格 \"0.01987608\" filledSize string 是 成交量 \"0\" filledVolume string 是 成交额 \"0\" filledFee string 是 已生成手续费 \"0\" status string 是 订单状态取值范围 : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] \"processing\" validSince integer 是 生效起始时间 1583929591 validUntil integer 是 生效截止时间 1586521591 createdAt integer 是 订单创建时间 1583933191494 side string 是 买卖方向取值范围 : ['SELL', 'BUY'] \"SELL\" market string 是 市场对 \"LRC-ETH\" "},"dex_apis/submitOrder.html":{"url":"dex_apis/submitOrder.html","title":"提交订单","keywords":"","body":"提交订单 流量控制: 5 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v2/order 功能 您需要以下步骤来下单： 通过/api/v2/orderId获取正确的orderId。如果您在客户端维护订单ID，可以跳过该步骤。 选择合理的validSince和validUntil值。我们推荐的参数是validSince设置为当前系统时间，validUntil设置成比当前时间晚至少一个星期。 选择合理的MaxFeeBips。我们建议这个值设置为63。 如果您想更好地追踪订单，请选择使用clientOrderId和（或）channelId。 对订单进行签名。 提交订单, 确认返回的结果包含订单哈希。 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 exchangeId integer 是 交易所ID 1 orderId integer 是 订单ID 1 accountId integer 是 账户ID 1 tokenSId integer 是 需要卖出的Token ID 0 tokenBId integer 是 需要买入的Token ID 2 amountS string 是 需要卖出的Token数量 \"1000000000000000000\" amountB string 是 需要买入的Token数量 \"1000000000000000000\" allOrNone string 否 订单是否只能完全成交或者0成交, 目前只支持false \"false\" buy string 是 买到为止或者卖出为止 \"true\" validSince integer 是 订单生效时间, 精确到秒 1567053142 validUntil integer 是 订单失效时间, 精确到秒 1567053142 maxFeeBips integer 是 用户可以接受的最大订单费用, 取值范围(万分之)1~63 20 label integer 是 订单标签,用来标示订单属性或者来源等, 参与订单签名, 取值范围0~65535 20 signatureRx string 是 订单签名结果Rx部分 \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" signatureRy string 是 订单签名结果Ry部分 \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" signatureS string 是 订单签名结果S部分 \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string 否 客户端标识的订单唯一ID \"1\" channelId string 否 订单渠道号, 用来标示订单从哪个渠道提交 \"hebao::subchannel::0001\" 请求示例 HTTPCURLPOST https://api.loopring.io/api/v2/order HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/order -d \\ '{ \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" }' 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 订单Hash \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" } 状态码 状态码 描述 100000 未知错误 102001 交易所ID不正确 102002 订单中存在不支持的TokenId 102003 无效的账户ID 102004 无效的订单ID 102005 市场对不支持 102006 不合法的费率字段 102007 订单已经存在 102008 订单已经过期 102010 订单缺少签名信息 102011 用户余额不足 102012 下单金额太小 102014 冻结金额失败，请稍后重试 102020 超过下单最大金额 102120 订单未生效 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 104004 未提供签名信息 104005 错误的签名信息 "},"dex_apis/batchSubmitOrder.html":{"url":"dex_apis/batchSubmitOrder.html","title":"批量提交订单","keywords":"","body":"批量提交订单 流量控制: 5 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v2/batchOrders 功能 批量提交订单，最多一次可以提交10个订单 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 orders List[SubmitOrderRequest] 是 要提交的订单 / 请求示例 HTTPCURLPOST https://api.loopring.io/api/v2/batchOrders HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"orders\" : [ { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" } ] }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/batchOrders -d \\ '{ \"orders\" : [ { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" } ] }' 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[SubmitOrderResult] 是 批量提交订单的详细结果 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } 状态码 状态码 描述 100000 未知错误 100001 参数非法 104209 批量操作部分失败 模型 SubmitOrderRequest 提交订单参数 字段 类型 必须 说明 举例 exchangeId integer 是 交易所ID 1 orderId integer 是 订单ID 1 accountId integer 是 账户ID 1 tokenSId integer 是 需要卖出的Token ID 0 tokenBId integer 是 需要买入的Token ID 2 amountS string 是 需要卖出的Token数量 \"1000000000000000000\" amountB string 是 需要买入的Token数量 \"1000000000000000000\" allOrNone string 否 订单是否只能完全成交或者0成交, 目前只支持false \"false\" buy string 是 买到为止或者卖出为止 \"true\" validSince integer 是 订单生效时间, 精确到秒 1567053142 validUntil integer 是 订单失效时间, 精确到秒 1567053142 maxFeeBips integer 是 用户可以接受的最大订单费用, 取值范围(万分之)1~63 20 label integer 是 订单标签,用来标示订单属性或者来源等, 参与订单签名, 取值范围0~65535 20 signatureRx string 是 订单签名结果Rx部分 \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" signatureRy string 是 订单签名结果Ry部分 \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" signatureS string 是 订单签名结果S部分 \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string 否 客户端标识的订单唯一ID \"1\" channelId string 否 订单渠道号, 用来标示订单从哪个渠道提交 \"hebao::subchannel::0001\" SubmitOrderResult 单个订单的提交结果 字段 类型 必须 说明 举例 hash string 是 提交的订单的HASH \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" error ResultInfo 否 提交订单的失败错误信息 / "},"dex_apis/getOrders.html":{"url":"dex_apis/getOrders.html","title":"获取用户订单列表","keywords":"","body":"获取用户订单列表 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/orders 功能 获取指定用户的订单列表，可以根据市场对、起始时间等条件过滤 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 market string 否 市场对 \"LRC-ETH\" start integer 否 起始时间,单位ms 1567053142000 end integer 否 结束时间,单位ms 1567053242000 fromHash string 否 请求此hash之前（更旧的数据）的分页内容 \"2600105125336468966417510367500403435128941502452005674156103328855968837178\" side string 否 买卖方向取值范围 : ['BUY', 'SELL'] \"BUY\" status string 否 订单状态列表取值范围 : ['waiting', 'processing', 'processed', 'failed', 'cancelled', 'expired'] \"processing,processed\" limit integer 否 限定数据条数（默认50条） 50 offset integer 否 偏移量（默认0）默认值 : 0L 0 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/orders?accountId=1&market=LRC-ETH&start=1567053142000&end=1567053242000&fromHash=2600105125336468966417510367500403435128941502452005674156103328855968837178&side=BUY&status=processing,processed&limit=50&offset=0 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders\\?accountId\\=1\\&market\\=LRC-ETH\\&start\\=1567053142000\\&end\\=1567053242000\\&fromHash\\=2600105125336468966417510367500403435128941502452005674156103328855968837178\\&side\\=BUY\\&status\\=processing,processed\\&limit\\=50\\&offset\\=0 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data OrdersDetail 否 订单列表返回结果 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 10, \"orders\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"size\" : \"8210000000000001024\", \"volume\" : \"163182534700000032\", \"price\" : \"0.01987608\", \"filledSize\" : \"0\", \"filledVolume\" : \"0\", \"filledFee\" : \"0\", \"status\" : \"processing\", \"validSince\" : 1583929591, \"validUntil\" : 1586521591, \"createdAt\" : 1583933191494, \"side\" : \"SELL\", \"market\" : \"LRC-ETH\" } ] } } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 OrdersDetail 订单列表返回结果 字段 类型 必须 说明 举例 totalNum integer 是 满足条件的订单总条数，用于分页 10 orders List[OrderDetail] 否 订单列表 / OrderDetail 订单详情信息 字段 类型 必须 说明 举例 hash string 是 订单HASH \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" clientOrderId string 是 客户端订单唯一ID \"200310143135081332\" size string 是 下单量 \"8210000000000001024\" volume string 是 下单额 \"163182534700000032\" price string 是 成交价格 \"0.01987608\" filledSize string 是 成交量 \"0\" filledVolume string 是 成交额 \"0\" filledFee string 是 已生成手续费 \"0\" status string 是 订单状态取值范围 : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] \"processing\" validSince integer 是 生效起始时间 1583929591 validUntil integer 是 生效截止时间 1586521591 createdAt integer 是 订单创建时间 1583933191494 side string 是 买卖方向取值范围 : ['SELL', 'BUY'] \"SELL\" market string 是 市场对 \"LRC-ETH\" "},"dex_apis/cancelOrders.html":{"url":"dex_apis/cancelOrders.html","title":"取消订单","keywords":"","body":"取消订单 流量控制: 5 每 秒 摘要 HTTP 方法 DELETE 访问路径 /api/v2/orders 功能 根据账户ID和订单HASH或者客户端唯一ID取消订单。订单HASH及客户端唯一ID可不传，如果都不传，则取消用户的所有挂单。 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string 是 签名信息 \"13834524429315716527072245289201098743367448928828941694333300773464291931668,19252438164424980901323496067579767457298262609633182654968500317796010794338,1296502169918579172046019624886776672473813683541532008712357317204831986826\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 账户ID 1 orderHash string 否 订单HASH \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string 否 客户端标识的订单唯一ID \"20200318000000001010\" 请求示例 HTTPCURLDELETE https://api.loopring.io/api/v2/orders?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859&clientOrderId=20200318000000001010 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdfcurl -X DELETE -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" https://api.loopring.io/api/v2/orders\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859\\&clientOrderId\\=20200318000000001010 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data boolean 否 取消订单返回 \"true\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : true } 状态码 状态码 描述 100000 未知错误 104001 APIKEY不能为空 102117 没有可以取消的订单 102118 取消订单失败, 请稍后重试 104002 APIKEY验证失败 104003 用户不存在 "},"dex_apis/batchCancelOrdersByOrderHash.html":{"url":"dex_apis/batchCancelOrdersByOrderHash.html","title":"根据订单HASH批量取消订单","keywords":"","body":"根据订单HASH批量取消订单 流量控制: 5 每 秒 摘要 HTTP 方法 DELETE 访问路径 /api/v2/orders/byHash 功能 根据订单HASH,多个订单Hash以逗号分隔开，最多一次10个。 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 账户ID 1 orderHash string 是 要取消的订单HASH,多个HASH以\",\"分隔 \"13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860\" 请求示例 HTTPCURLDELETE https://api.loopring.io/api/v2/orders/byHash?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -X DELETE -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders/byHash\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[CancelOrderResult] 是 批量取消订单的详细结果 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"id\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"result\" : true, \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } 状态码 状态码 描述 100000 未知错误 100001 参数非法 104209 批量操作部分失败 模型 CancelOrderResult 单个订单取消的结果 字段 类型 必须 说明 举例 id string 是 要取消订单的HASH或者ID \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" result boolean 是 订单取消的结果 \"true\" error ResultInfo 否 订单取消失败的错误 / "},"dex_apis/batchCancelOrdersByClientOrderId.html":{"url":"dex_apis/batchCancelOrdersByClientOrderId.html","title":"根据订单的客户端标识的订单ID批量取消订单","keywords":"","body":"根据订单的客户端标识的订单ID批量取消订单 流量控制: 5 每 秒 摘要 HTTP 方法 DELETE 访问路径 /api/v2/orders/byClientOrderId 功能 根据订单的客户端标识的订单ID批量取消订单,多个订单ID以\",\"分隔开，最多一次10个。 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 账户ID 1 clientOrderId string 是 要取消的订单的客户端标识的订单唯一ID，多个ID以\",\"分隔，最多10个 \"20200318000000001010,20200318000000001011\" 请求示例 HTTPCURLDELETE https://api.loopring.io/api/v2/orders/byClientOrderId?accountId=1&clientOrderId=20200318000000001010,20200318000000001011 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -X DELETE -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders/byClientOrderId\\?accountId\\=1\\&clientOrderId\\=20200318000000001010,20200318000000001011 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[CancelOrderResult] 是 批量取消订单的详细结果 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"id\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"result\" : true, \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } 状态码 状态码 描述 100000 未知错误 100001 参数非法 104209 批量操作部分失败 模型 CancelOrderResult 单个订单取消的结果 字段 类型 必须 说明 举例 id string 是 要取消订单的HASH或者ID \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" result boolean 是 订单取消的结果 \"true\" error ResultInfo 否 订单取消失败的错误 / "},"dex_apis/sendTransaction.html":{"url":"dex_apis/sendTransaction.html","title":"发送以太坊交易","keywords":"","body":"发送以太坊交易 流量控制: 5 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v2/sendEthTx 功能 deposit,onchainWithdrawal,createAccount,updatePassword,enableToken 均使用该接口 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 data string 是 序列化的以太坊签名交易，16进制形式字符串 \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" 请求示例 HTTPCURLPOST https://api.loopring.io/api/v2/sendEthTx HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"data\" : \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/sendEthTx -d \\ '{ \"data\" : \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" }' 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 发送的交易的哈希 \"0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886\" } 状态码 状态码 描述 100000 未知错误 104202 当前节点服务不可用 104205 内部请求出错 104208 节点服务返回错误信息 "},"dex_apis/getEthNonce.html":{"url":"dex_apis/getEthNonce.html","title":"查询用户以太坊地址可用的nonce","keywords":"","body":"查询用户以太坊地址可用的nonce 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/ethNonce 功能 查询以太坊地址的nonce API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 \"0x0000000000000000000000000000000000000000\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/ethNonce?owner=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ethNonce\\?owner\\=0x0000000000000000000000000000000000000000 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data integer 否 查询的nonce结果 0 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : 0 } 状态码 状态码 描述 100000 未知错误 104205 内部请求出错 104208 节点服务返回错误信息 "},"dex_apis/getEthBalance.html":{"url":"dex_apis/getEthBalance.html","title":"查询ETH余额","keywords":"","body":"查询ETH余额 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/ethBalances 功能 查询以太坊地址ETH的余额 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 \"0x0000000000000000000000000000000000000000\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/ethBalances?owner=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ethBalances\\?owner\\=0x0000000000000000000000000000000000000000 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 余额 \"1000000000000000000\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"1000000000000000000\" } 状态码 状态码 描述 100000 未知错误 104205 内部请求出错 104208 节点服务返回错误信息 "},"dex_apis/getRecommendedGasPrice.html":{"url":"dex_apis/getRecommendedGasPrice.html","title":"获取推荐gas","keywords":"","body":"获取推荐gas 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/recommendedGasPrice 功能 获取推荐gas API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/recommendedGasPrice HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/recommendedGasPrice 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 推荐gas值 \"10000000000\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"10000000000\" } 状态码 状态码 描述 100000 未知错误 105001 获取推荐gas失败 "},"dex_apis/getMarkets.html":{"url":"dex_apis/getMarkets.html","title":"查询交易所支持的市场配置","keywords":"","body":"查询交易所支持的市场配置 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/exchange/markets 功能 查询所有支持的市场配置 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/exchange/markets HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/markets 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[MarketInfo] 否 市场列表 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"market\" : \"LRC-USDT\", \"baseTokenId\" : 2, \"quoteTokenId\" : 0, \"precisionForPrice\" : 6, \"orderbookAggLevels\" : 4, \"enabled\" : false } ] } 状态码 状态码 描述 100000 未知错误 模型 MarketInfo 字段 类型 必须 说明 举例 market string 是 市场 \"LRC-USDT\" baseTokenId integer 是 基础货币ID 2 quoteTokenId integer 是 定价货币ID 0 precisionForPrice integer 是 服务器端返回深度中支持的最大价格精度 6 orderbookAggLevels integer 是 服务器端返回深度中支持的最大归并等级，支持范围是0到该值 4 enabled boolean 是 是否开放 \"false\" "},"dex_apis/getTokens.html":{"url":"dex_apis/getTokens.html","title":"查询交易所支持的通证信息","keywords":"","body":"查询交易所支持的通证信息 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/exchange/tokens 功能 获取交易所支持的全部的通证信息,包含未上架或者已下架的通证信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/exchange/tokens HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/tokens 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[TokenInfo] 否 通证信息列表 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"type\" : \"ERC20\", \"tokenId\" : 2, \"symbol\" : \"LRC\", \"name\" : \"Loopring\", \"address\" : \"0x97241525fe425C90eBe5A41127816dcFA5954b06\", \"unit\" : \"LRC\", \"decimals\" : 18, \"precision\" : 6, \"minOrderAmount\" : \"10000000000000000\", \"maxOrderAmount\" : \"1000000000000000000\", \"dustOrderAmount\" : \"1000000000000000\", \"enabled\" : true } ] } 状态码 状态码 描述 100000 未知错误 模型 TokenInfo 通证的详细信息 字段 类型 必须 说明 举例 type string 是 通证的种类取值范围 : ['ERC20', 'ETH'] \"ERC20\" tokenId integer 是 通证在路印协议注册的编号 2 symbol string 是 通证的符号 \"LRC\" name string 是 通证的名称 \"Loopring\" address string 是 通证的地址 \"0x97241525fe425C90eBe5A41127816dcFA5954b06\" unit string 是 通证的单位 \"LRC\" decimals integer 是 通证合约中定义的通证小数位 18 precision integer 是 通证数量保留的小数位 6 minOrderAmount string 是 单笔订单允许的最小下单数量 \"10000000000000000\" maxOrderAmount string 是 单笔订单允许的最大下单数量 \"1000000000000000000\" dustOrderAmount string 是 订单被判定为灰尘单的数量，即小于该数量则不会继续撮合 \"1000000000000000\" enabled boolean 是 服务端当前是否支持该通证的充值提现等操作 \"true\" "},"dex_apis/getExchangeInfo.html":{"url":"dex_apis/getExchangeInfo.html","title":"查询交易所的基本必要信息","keywords":"","body":"查询交易所的基本必要信息 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/exchange/info 功能 获取与交易所交互所需的必要信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 无 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/exchange/info HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/info 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data ExchangeInfo 否 交易所的必要基本信息 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"chainId\" : 1, \"exchangeId\" : 1, \"exchangeAddress\" : \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\", \"onchainFees\" : [ { \"type\" : \"withdraw\", \"fee\" : \"2000000000000000\" } ] } } 状态码 状态码 描述 100000 未知错误 模型 ExchangeInfo 交易所基本信息 字段 类型 必须 说明 举例 chainId integer 是 交易所支持的以太坊网络编号 1 exchangeId integer 是 交易所在路印协议合约的编号 1 exchangeAddress string 是 交易所合约地址 \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\" onchainFees List[FeeInfo] 是 交易所收费信息 / FeeInfo 交易所收取的费用信息 字段 类型 必须 说明 举例 type string 是 费用类型 \"withdraw\" fee string 是 费用数量，单位为Wei数量的以太坊 \"2000000000000000\" "},"dex_apis/getDepth.html":{"url":"dex_apis/getDepth.html","title":"获取市场深度信息","keywords":"","body":"获取市场深度信息 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/depth 功能 获取某个市场对的深度信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 market string 是 市场对，不支持多市场 \"LRC-ETH\" level integer 是 深度等级，越大表示合并的深度越多 2 limit integer 否 返回条数限制默认值 : 50 50 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/depth?market=LRC-ETH&level=2&limit=50 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/depth\\?market\\=LRC-ETH\\&level\\=2\\&limit\\=50 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data Depth 否 深度信息 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"version\" : 147, \"timestamp\" : 432312312, \"bids\" : [[\"0.002\",\"21000\",\"33220000\",\"4\"]], \"asks\" : [] } } 状态码 状态码 描述 100000 未知错误 108000 不支持的市场 108001 不支持的深度等级 模型 Depth 深度信息 字段 类型 必须 说明 举例 version integer 是 连续版本号。前端据此判断是否丢失数据。（参考websocket的使用） 147 timestamp integer 是 时间戳 432312312 bids List[List[string]] 是 买单深度,每一条深度包含四个元素，分别是价格，挂单量，挂单总量，和挂单数 \"[[\"0.002\",\"21000\",\"33220000\",\"4\"]]\" asks List[List[string]] 是 卖单深度,每一条深度包含四个元素，分别是价格，挂单量，挂单总量，和挂单数 \"[]\" "},"dex_apis/getTicker.html":{"url":"dex_apis/getTicker.html","title":"查询交易所Ticker","keywords":"","body":"查询交易所Ticker 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/ticker 功能 查询交易所24小时维度Ticker API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 market string 是 市场对，支持多市场 \"LRC-ETH,LRC-USDT\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/ticker?market=LRC-ETH,LRC-USDT HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ticker\\?market\\=LRC-ETH,LRC-USDT 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 返回信息 / data List[List[string]] 否 Ticker信息，每一组数据包括市场对，时间戳，Base Token成交总量，Quote Token成交总额，开盘价，最高价，最低价，收盘价，交易笔数，买单盘口，卖单盘口 \"[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]]\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]] } 状态码 状态码 描述 100000 未知错误 100001 参数非法 "},"dex_apis/getCandlestick.html":{"url":"dex_apis/getCandlestick.html","title":"查询K线数据","keywords":"","body":"查询K线数据 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/candlestick 功能 查询K线数据，目前支持2年内范围的数据，每次请求最多查询120个数据点 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 market string 是 市场对，不支持多市场 \"LRC-ETH\" interval string 是 间隔，可以是: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w \"5min\" start integer 否 开始时间 1584479105000 end integer 否 结束时间 1584565505000 limit integer 否 数据点数量 120 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/candlestick?market=LRC-ETH&interval=5min&start=1584479105000&end=1584565505000&limit=120 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/candlestick\\?market\\=LRC-ETH\\&interval\\=5min\\&start\\=1584479105000\\&end\\=1584565505000\\&limit\\=120 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[List[string]] 否 K线数据，每一组数据包括开始时间，交易笔数，开盘价，收盘价，最高价，最低价，Base Token成交总量，Quote Token成交总额 \"[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]]\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]] } 状态码 状态码 描述 100000 未知错误 100001 参数非法 "},"dex_apis/getPrice.html":{"url":"dex_apis/getPrice.html","title":"查询token法币价","keywords":"","body":"查询token法币价 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/price 功能 查询以传入法币计价的token价格 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 legal string 是 指定的计价法币，支持USD，CNY，JPY，EUR，GBP，HKD \"USD\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/price?legal=USD HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/price\\?legal\\=USD 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[Price] 否 返回查询token的法币价 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"symbol\" : \"LRC\", \"price\" : \"0\", \"timestamp\" : 0 } ] } 状态码 状态码 描述 100000 未知错误 模型 Price Token的法币价 字段 类型 必须 说明 举例 symbol string 是 币种 \"LRC\" price string 是 法币价格 \"0\" timestamp integer 是 价格更新的时间 0 "},"dex_apis/getMarketTrade.html":{"url":"dex_apis/getMarketTrade.html","title":"查询市场交易","keywords":"","body":"查询市场交易 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/trade 功能 查询指定市场交易信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 market string 是 要查询的市场，不支持多市场 \"LRC-USDT\" limit integer 否 查询条数 20 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/trade?market=LRC-USDT&limit=20 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/trade\\?market\\=LRC-USDT\\&limit\\=20 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data MarketTrades 否 市场交易信息 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 0, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } } 状态码 状态码 描述 100000 未知错误 模型 MarketTrades 市场交易信息 字段 类型 必须 说明 举例 totalNum integer 是 总记录数 0 trades List[List[string]] 是 交易记录列表,每条交易记录按照数组顺序分别是交易时间，交易记录id,买卖方向，成交量，成交价格，市场和费用 \"[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]\" "},"dex_apis/getAllowance.html":{"url":"dex_apis/getAllowance.html","title":"查询授权","keywords":"","body":"查询授权 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/allowances 功能 查询以太坊地址在交易所的授权情况 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 \"0x0000000000000000000000000000000000000000\" token string 是 要查询的Token地址 \"0x0000000000000000000000000000000000000000\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/allowances?owner=0x0000000000000000000000000000000000000000&token=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/allowances\\?owner\\=0x0000000000000000000000000000000000000000\\&token\\=0x0000000000000000000000000000000000000000 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 授权的值 \"0\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0\" } 状态码 状态码 描述 100000 未知错误 104205 内部请求出错 104208 节点服务返回错误信息 "},"dex_apis/getTokenBalance.html":{"url":"dex_apis/getTokenBalance.html","title":"查询Token余额","keywords":"","body":"查询Token余额 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/tokenBalances 功能 查询以太坊地址Token的余额 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 \"0x0000000000000000000000000000000000000000\" token string 是 要查询的Token地址 \"0x0000000000000000000000000000000000000000\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/tokenBalances?owner=0x0000000000000000000000000000000000000000&token=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/tokenBalances\\?owner\\=0x0000000000000000000000000000000000000000\\&token\\=0x0000000000000000000000000000000000000000 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data string 否 余额 \"1000000000000000000\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"1000000000000000000\" } 状态码 状态码 描述 100000 未知错误 104205 内部请求出错 104208 节点服务返回错误信息 "},"dex_apis/getAccount.html":{"url":"dex_apis/getAccount.html","title":"查询用户信息","keywords":"","body":"查询用户信息 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/account 功能 查询用户信息 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 owner string 是 要查询的以太坊地址 \"0x123456\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/account?owner=0x123456 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/account\\?owner\\=0x123456 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data DexAccount 是 用户信息 \"0\" 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"accountId\" : 10, \"frozen\" : false, \"publicKeyX\" : \"123\", \"publicKeyY\" : \"456\", \"tags\" : \"vip_1\" } } 状态码 状态码 描述 100000 未知错误 101001 未找到该地址 101002 未找到该用户 模型 DexAccount 用户信息 字段 类型 必须 说明 举例 accountId integer 是 用户ID 10 frozen boolean 是 账户是否冻结状态 \"false\" publicKeyX string 是 公钥X \"123\" publicKeyY string 是 公钥Y \"456\" tags string 否 标记在用户身上的等级和其他特殊标识，以\",\"分隔 \"vip_1\" "},"dex_apis/getUserCreate.html":{"url":"dex_apis/getUserCreate.html","title":"获取用户开户记录","keywords":"","body":"获取用户开户记录 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/user/createInfo 功能 获取用户开户记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer 否 限制条数(默认50) 50 fromHash string 否 请求此hash之前（更旧的数据）的分页内容 \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/createInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/createInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data UserCreateDataList 否 用户操作记录列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000 } ] } } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 UserCreateDataList 开户记录列表对象 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[UserAccountTxData] 是 开户记录当前页列表 / UserAccountTxData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 txHash string 是 交易HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string 是 操作类型 \"1000000000000000\" status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string 是 进度 \"100%\" timestamp integer 是 创建时间 1578572292000 blockNum integer 是 块高度 100 updatedAt integer 是 更新时间 1578572292000 "},"dex_apis/getUserUpdate.html":{"url":"dex_apis/getUserUpdate.html","title":"获取用户更新记录","keywords":"","body":"获取用户更新记录 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/user/updateInfo 功能 获取用户更新记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer 否 限制条数(默认50) 50 fromHash string 否 请求此hash之前（更旧的数据）的分页内容 \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/updateInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/updateInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data UserChangePasswordDataList 否 用户操作记录列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000 } ] } } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 UserChangePasswordDataList 修改密码操作记录列表对象 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[UserAccountTxData] 是 修改密码当前页列表 / UserAccountTxData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 txHash string 是 交易HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string 是 操作类型 \"1000000000000000\" status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string 是 进度 \"100%\" timestamp integer 是 创建时间 1578572292000 blockNum integer 是 块高度 100 updatedAt integer 是 更新时间 1578572292000 "},"dex_apis/getUserBalances.html":{"url":"dex_apis/getUserBalances.html","title":"查询用户交易所余额","keywords":"","body":"查询用户交易所余额 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/user/balances 功能 查询用户交易所余额 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 tokens string 否 资产列表 \"0,1\" 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/balances?accountId=1&tokens=0,1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/balances\\?accountId\\=1\\&tokens\\=0,1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data List[Balance] 是 资产信息 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"accountId\" : 10, \"tokenId\" : 10, \"totalAmount\" : \"100\", \"frozenAmount\" : \"100\" } ] } 状态码 状态码 描述 100000 未知错误 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 Balance 资产信息 字段 类型 必须 说明 举例 accountId integer 是 用户ID 10 tokenId integer 是 资产ID 10 totalAmount string 是 资产数量 \"100\" frozenAmount string 是 资产冻结数量 \"100\" "},"dex_apis/getUserDeposits.html":{"url":"dex_apis/getUserDeposits.html","title":"获取用户充值记录","keywords":"","body":"获取用户充值记录 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/user/deposits 功能 获取用户充值记录列表 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 allType boolean 否 是否获取创建用户伴随的充值记录 \"false\" status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer 否 限制条数(默认50) 50 fromHash string 否 请求此hash之前（更旧的数据）的分页内容 \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" tokenSymbol string 否 币种 \"ETH\" offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/deposits?accountId=1&start=1578558098000&end=1578558098000&allType=false&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=ETH&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/deposits\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&allType\\=false\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=ETH\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data DepositDataList 否 用户操作记录列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100, \"updatedAt\" : 1578572292000 } ] } } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 DepositDataList 充值记录列表对象 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[DepositData] 是 充值记录当前页列表 / DepositData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 symbol string 是 操作币种 \"LRC\" amount string 是 申请数量 \"1000000000000000000\" txHash string 是 交易HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string 是 操作类型 \"1000000000000000\" status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string 是 进度 \"100%\" timestamp integer 是 创建时间 1578572292000 depositType string 是 充值类型取值范围 : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] \"DEPOSIT\" blockNum integer 是 块高度 100 updatedAt integer 是 更新时间 1578572292000 "},"dex_apis/getUserWithdrawals.html":{"url":"dex_apis/getUserWithdrawals.html","title":"获取用户链上提现记录","keywords":"","body":"获取用户链上提现记录 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/user/withdrawals 功能 获取用户链上提现记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer 否 限制条数(默认50) 50 fromHash string 否 请求此hash之前（更旧的数据）的分页内容 \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" tokenSymbol string 否 币种 \"LRC\" offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/withdrawals?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=LRC&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/withdrawals\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=LRC\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data OnchainWithdrawalDataList 否 用户操作记录列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000, \"distributeHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" } ] } } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 OnchainWithdrawalDataList 链上提现记录列表对象 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[OnchainWithdrawalData] 是 链上提现记录当前页列表 / OnchainWithdrawalData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 symbol string 是 操作币种 \"LRC\" amount string 是 申请数量 \"1000000000000000000\" realAmount string 是 实际数量 \"1000000000000000000\" txHash string 是 交易HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string 是 操作类型 \"1000000000000000\" status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string 是 进度 \"100%\" timestamp integer 是 创建时间 1578572292000 blockNum integer 是 块高度 100 updatedAt integer 是 更新时间 1578572292000 distributeHash string 是 提现分发HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" "},"dex_apis/getUserTrades.html":{"url":"dex_apis/getUserTrades.html","title":"获取用户交易记录","keywords":"","body":"获取用户交易记录 流量控制: 5 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v2/user/trades 功能 获取用户交易记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 orderHash string 否 指定订单Hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" offset integer 否 偏移量(默认0) 1 limit integer 否 限制条数(默认50) 50 fromId integer 否 请求此id之前（更旧的数据）的分页内容 1 请求示例 HTTPCURLGET https://api.loopring.io/api/v2/user/trades?accountId=1&orderHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1&limit=50&fromId=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/trades\\?accountId\\=1\\&orderHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1\\&limit\\=50\\&fromId\\=1 响应字段 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 API返回信息 / data TradeList 否 用户交易列表对象 / 响应示例 { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 100, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } } 状态码 状态码 描述 100000 未知错误 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 TradeList 用户交易列表对象 字段 类型 必须 说明 举例 totalNum integer 是 交易记录符合条件的总条数，用于分页 100 trades List[List[string]] 是 交易记录列表,每条交易记录按照数组顺序分别是交易时间，交易记录id,买卖方向，成交量，成交价格，市场和费用 \"[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]\" "},"websocket/overview.html":{"url":"websocket/overview.html","title":"WebSocket API","keywords":"","body":"WebSocket API 接入URL wss://ws.loopring.io/v2/ws 订阅 客户端可以通过发送JSON数据订阅多个主题： { \"op\":\"sub\", \"sequence\": 10000, \"apiKey\": \".....\", \"unsubscribeAll\": true, \"topics\": [ { \"topic\": \"account\" }, { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, { \"topic\": \"order\", \"market\": \"LRC-USDT\" }, { \"topic:\": \"orderbook\", \"market\": \"LRC-ETH\", \"level\": 0 }, { \"topic:\": \"orderbook\", \"market\": \"LRC-USDT\", \"level\": 0, \"count\": 20, \"snapshot\": true } ] }, 在一次订阅中，如果topics中任何一个主题需要ApiKey，那么本次操作就必须包含ApiKey。 在一次订阅中，相同的主题可以出现多次，但同一个主题的相同的配置只可以出现一次。 在一次订阅中，如果有任何参数错误，则全部订阅都会失败。 如果unsubscribeAll是true，订阅前会先订退之前订阅的所有主题。 订阅时客户端可以指定一个sequence代表序列号，后台返回结果也会附带同样的序列号。 订退 客户端可以通过发送JSON数据订退多个主题： { \"op\":\"unSub\", \"sequence\": 10000, \"apiKey\": \".....\", \"unsubscribeAll\": false, \"topics\": [ { \"topic\": \"account\", }, { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, { \"topic\": \"order\", \"market\": \"LRC-USDT\" }, { \"topic:\": \"orderbook\", \"unsubscribeAll\":true } ] }, 在一次订退中，如果topics中任何一个主题需要ApiKey，那么本次操作就必须包含ApiKey。 在一次订退中，相同的主题可以出现多次，但同一个主题的相同的配置只可以出现一次。 在一次订退中，如果有任何参数错误，则全部订阅都会失败。 如果unsubscribeAll是true，所有主题都会被订退；如果在某个主题内将unsubscribeAll设置为true，那么该主题的所有配置都会被订退。 订退时客户端可以指定一个sequence代表序列号，后台返回结果也会附带同样的序列号。 心跳 WebSocket链接建立后，中继会每30秒会发送“ping”消息给客户端做心跳检测。如果客户端在最近2分钟内都没有任何“pong”消息，中继会断开WebSocket链接。如果客户端的“pong”消息数量超过服务端发送的“ping”消息数量，中继也会断开WebSocket链接。 返回值 字段 类型 必现 说明 op string 是 订阅（\"sub\"）或订退（unSub\"） sequence integer 否 操作序列号 topics JSON 是 订阅主题和参数 result Result 是 订阅结果 Result结构 字段 类型 必现 说明 status string 是 订阅是否成功 error Error 否 订阅失败时的错误信息 Error结构 字段 类型 必现 说明 code integer 是 状态码 message string 是 错误信息 状态码 状态码 描述 104100 空的订阅信息 104101 不支持的操作（路印中继服务器仅支持sub 和 unsub操作） 104102 不支持的主题 104103 重复的订阅主题 104104 缺少ApiKey信息 104105 与之前订阅使用的ApiKey不符 104112 不合法的ApiKey 104113 订退未曾订阅过的主题 104114 无法通过APiKey找到对应的用户 104115 无法识别的订阅消息 示例 订阅成功示例： { \"op\": \"sub\", \"sequence\": 10000, \"topics\": [ { \"topic:\": \"orderbook\", \"market\": \"LRC-ETH\", \"count\": 10 } ], \"result\": { \"status\": \"ok\" } } 订阅参数不合法的失败示例： { \"op\": \"sub\", \"sequence\": 10000, \"topics\": [ { \"topic:\": \"candlestick\", \"market\": \"LRC-ETH\", \"count\": 10 } ], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104106, \"message\": \"receive illegal arg for candlestick:lrc-eth\" } } } 订阅参数无法解析的失败示例： { \"op\": \"sub\", \"sequence\": 10000, \"topics\":[], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104115, \"message\": \"unexpected msg:xxx\" } } } "},"websocket/account.html":{"url":"websocket/account.html","title":"账号金额更新","keywords":"","body":"账号金额更新 订阅此主题以接收有关用户余额更新的通知。 订阅规则 主题名称：account 订阅该主题是否需要提供ApiKey：是 参数列表 该主题不支持任何参数。 推送示例 { \"topic\": { \"topic:\": \"account\" }, \"ts\":1584717910000, \"data\": { \"accountId\":1, \"totalAmount\": \"24439253519655\", \"tokenId\": 2, \"amountLocked\": \"0\" } } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data Balance 是 余额信息 Balance数据结构 字段 类型 必现 说明 accountId integer 是 账户ID tokenId integer 是 通证ID totalAmount string 是 用户余额 amountLocked string 是 冻结的余额 "},"websocket/order.html":{"url":"websocket/order.html","title":"用户订单更新","keywords":"","body":"用户订单更新 订阅此主题以接收特定交易对定单更新的通知。 订阅规则 主题名称：order 订阅该主题是否需要提供ApiKey：是 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） 状态码 状态码 描述 104110 主题或参数非法 推送示例 { \"topic\": { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, \"ts\":1565844328, \"data\": { \"hash\": \"11212\", \"clientOrderId\": \"myOrder\", \"size\": \"500000000\", \"volume\": \"210000000\", \"price\": \"0.000004\", \"filledSize\": \"30000000\", \"filledVolume\": \"100000\", \"filledFee\": \"1000000\", \"status\": \"processing\", \"createdAt\": \"1494900087\", \"validSince\": \"1494900087\", \"validUntil\": \"1495900087\", \"side\": \"buy\", \"market\": \"LRC-ETH\" } } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data Order 是 订单数据 Order数据结构 字段 类型 必现 说明 hash string 是 订单哈希 clientOrderId string 是 用户自定义ID size string 是 Base Token 的数量 volume string 是 Quote Token 的数量 price string 是 订单价格 filledSize string 是 已经成交的Base Token的数量 filledVolume string 是 已经成交的Quote Token的数量 filledFee string 是 已支付的手续费 status string 是 订单状态 createdAt integer 是 订单创建时间 updateAt integer 是 订单最后一次的更新时间 side string 是 买或卖 market string 是 交易对 订单状态取值范围 状态 说明 processing 订单有效（订单等待成交或者已经成交一部分） processed 订单完全成交 cancelling 取消中 cancelled 订单取消 expired 订单过期 waiting 订单还未生效 "},"websocket/orderbook.html":{"url":"websocket/orderbook.html","title":"订单簿更新","keywords":"","body":"订单簿更新 订阅此主题以接收特定交易对定单薄更新的通知。 订阅规则 主题名称：orderbook 订阅该主题是否需要提供ApiKey：否 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） level 是 深度聚合级别 count 是 买卖深度条目数量，值不可以超过50。仅在snapshot = true时生效 snapshot 否 默认为false。 如果该值为true，并且当深度条目有任何一条变化，那么指定数量的深度条目会被全量推送给客户端。 状态码 状态码 描述 104107 主题或参数非法 推送示例 { \"topic\": { \"topic:\": \"orderbook\", \"market\": \"LRC-USDT\", \"level\": 0, \"count\": 20, \"snapshot\": true }, \"ts\": 1584717910000, \"startVersion\": 1212121, \"endVersion\": \"1212123\", \"data\": { \"bids\": [ [ \"295.97\", //price \"456781000000000\", //size \"3015000000000\", //volume \"4\" //count ] ], \"asks\": [ [ \"298.97\", \"456781000000000000\", \"301500000000000\", \"2\" ] ] } } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） startVersion integer 是 该次推送的起始版本号 endVersion integer 是 该次推送的终结版本号 data Orderbook 是 订单簿信息 Orderbook数据结构 字段 类型 必现 说明 bids List[List[string]] 是 代表买单深度的PriceSlot数组列表 asks List[List[string]] 是 代表卖单深度的PriceSlott数组列表 PriceSlot数组 序号 类型 必现 说明 1 string 是 价格 2 string 是 数量（基础通证的数量） 3 string 是 成交额（ 计价通证的数量） 4 string 是 聚合的订单数目 需要注意的是，每一个推送中的数量和成交额代表这个价格目前的数量和成交额的绝对值，而不是相对变化。 构建本地订单簿 您可以通过下列步骤构建本地订单簿： 订阅 orderbook主题。 开始缓存收到的更新。同一个价位，后收到的更新覆盖前面的。 访问接口 api/v1/depth 获得一个全量的深度快照。 3中获取的快照如果version大于本地version（endVersion），则直接覆盖，如果小于本地version，则相同的价格不覆盖，不同的价格则覆盖。 将深度快照中的内容更新到本地订单簿副本中，并从WebSocket接收到的第一个startVersion version + 1 且 endVersion >= 本地version 的event开始继续更新本地副本。 每一个新推送的startVersion应该恰好等于上一个event的endVersion + 1，否则可能出现了丢包，请从step3重新进行初始化。 如果某个价格对应的挂单量为0，表示该价位的挂单已经撤单或者被吃，应该移除这个价位。 "},"websocket/trade.html":{"url":"websocket/trade.html","title":"最新成交更新","keywords":"","body":"最新成交更新 订阅此主题以接收特定交易对最新成交的通知。 订阅规则 主题名称：trade 订阅该主题是否需要提供ApiKey：否 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） 状态码 状态码 描述 104109 主题或参数非法 推送示例 { \"topic\": { \"topic\": \"trade\", \"market\": \"LRC-ETH\" }, \"ts\": 1584717910000, \"data\": [ [ \"1584717910000\", //timestamp \"123456789\", //tradeId \"buy\", //side \"500000\", //size \"0.0008\", //price \"100\" //fee ] ] } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data List[List[string]] 是 Trade数组列表 Trade数组 序号 类型 必现 说明 1 integer 是 成交时间 2 integer 是 成交记录的编号 3 string 是 Taker的方向（买或卖） 4 string 是 Base Token的成交数量 5 string 是 成交价格 6 string 是 Base Token的收费 "},"websocket/ticker.html":{"url":"websocket/ticker.html","title":"Ticker更新","keywords":"","body":"Ticker更新 订阅此主题以接收特定交易对ticker更新的通知。 订阅规则 主题名称：ticker 订阅该主题是否需要提供ApiKey：否 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） 状态码 状态码 描述 104111 主题或参数非法 推送示例 { \"topic\": { \"topic\": \"ticker\", \"market\": \"LRC-ETH\" }, \"ts\": 1584717910000, \"data\": [ \"LRC-ETH\", //market \"1584717910000\", //timestamp \"5000000\", //size \"1000\", //volume \"0.0002\", //open \"0.00025\", //high \"0.0002\", //low \"0.00025\", //close \"5000\", //count \"0.00026\", //bid \"0.00027\" //ask ] } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data List[string] 是 Ticker数组 Ticker数组 序号 类型 必现 说明 1 string 是 交易对 2 integer 是 Ticker生成时间 3 string 是 Base Token的成交量 4 string 是 Quote Token 的成交量 5 string 是 开盘价 6 string 是 最高价 7 string 是 最低价 8 string 是 最新成交价 9 integer 是 成交笔数 10 string 是 买单最高价 11 string 是 卖单最低价 "},"websocket/candlestick.html":{"url":"websocket/candlestick.html","title":"Candlestick更新","keywords":"","body":"Candlestick更新 订阅此主题以接收特定交易对Candlestick更新的通知。 订阅规则 主题名称：candlestick 订阅该主题是否需要提供ApiKey：否 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） interval 是 时间间隔 时间间隔 间隔 说明 1min 1分钟 5min 5分钟 15min 15分钟 30min 30分钟 1hr 1小时 2hr 2小时 4hr 4小时 12hr 12小时 1d 1天 1w 1周 状态码 状态码 描述 104106 主题或参数非法 推送示例 { \"topic\": { \"topic\": \"candlestick\", \"interval\": \"2hr\" }, \"ts\":1584717910000, \"data\": [ \"1584717910000\", //start \"5000\", //count \"3997.3\", //open \"3998.7\", //close \"4031.9\", //high \"3982.5\", //low \"500000000000000000\", //size \"2617521141385000000\", //volume ] } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data List[string] （Candlestick列表） 是 cCandlestick数组 Candlestick数组 序号 类型 必现 说明 1 integer 是 指开盘时间 2 integer 是 成交笔数 3 string 是 开盘价格 4 string 是 收盘价格 5 string 是 最高价 6 string 是 最低价 7 string 是 为wei为单位的Base Token的成交数量 8 string 是 为wei为单位 Quote Token的成交数量 "}}