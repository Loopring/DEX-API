{"./":{"url":"./","title":"Loopring","keywords":"","body":"Loopring Protocol & Exchange Loopring is the first scalable DEX protocol built with zkRollup for Etheruem. Using Loopring, people can build a high-performance, orderbook-based, decentralized exchanges that do not take custody of users' crypto-assets. Due to the use of zkRollup, a layer-2 scalability solution, Loopring is capable of settling more than 2,000 trades per second on Ethereum 1.0. If you would like to learn more about Loopring's design and technical details, please check out Loopring's official website: https://loopring.org. Loopring Exchange is the first decentralized trading platform built on top of the Loopring protocol. Loopring Exchange is accessible at Loopring.io. The current version of Loopring Exchange is beta1, which uses Loopring version 3.1.1. Loopring Exchange's contract address on Ethereum mainnet is: 0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777. The address has a permanent ENS as beta1.loopringio.eth. Technical Advantages Loopring makes sure nobody can misappropriate users' crypto-assets deposited to an exchange. Even under extreme circumstances, such as an exchange's UI stopped functioning, or the exchange's operators are out of reach, users can still claim their rightful assets by providing valid Merkle proofs that are derivable from data on Ethereum. Loopring does not guarantee the efficiency and fairness of off-chain order-matching. Order-matching is a job for the relayer system, which is a centralized piece of the overall DEX solution. Different exchanges built on the same Loopring protocol can adopt very different relayer solutions and thus provide various quality of services. The Loopring protocol does guarantee that relayers must follow specific rules for trade settlement. We developed Loopring Exchange's relayer system as a closed source project. As of now, it offers a throughput of 200 trades per second.. Overall Architecture The overall architecture of Loopring Exchange is shown below: Some key points you need to know: Loopring Exchange provides API to handle user offchain requests, namely order submission and cancellation, and withdrawals. Other user requests, including account registration, password reset, and deposits, must be submitted using Ethereum transactions. These requests are called on-chain requests. Loopring offers a high-performance trading experience similar to centralized exchanges, which mainly benefits from the batch processing capability of the underlying Loopring protocol. Loopring uses Ethereum as a data availability layer and a ZKP verification layer; Loopring does not perform trading related computations on Ethereum. "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"Glossary","keywords":"","body":"Glossary DEX Decenralized EXchange. Zero-Knowledge Proofs A method by which one party (the prover) can prove to another party (the verifier) that they know a value x, without conveying any information apart from the fact that they know the value x. source: https://en.wikipedia.org/wiki/Zero-knowledge_proof Relayer Loopring Exchange's backend system that handles order matching and settlement, deposits, withdrawals, and Zero-Knowledge Proof generation, etc. On-chain Requests User requests sent to Loopring Exchange through Ethereum transactions. Off-chain Requests User requests sent to Loopring Exchange using Loopring's API. Base Token The target token to trade. For example, in the LRC-ETH trading pair, LRC is referred to as the base token. Quote Token The token to quote price. For example, in the LRC-ETH trading pair, ETH is referred to as the base token. Size The quantity of the base token in an order or a fill. Volume The quantity of the quote token in an order or a fill. EdDSA The signing algorithm used by Loopring to sign off-chain requests. EdDSA is more circuit friendly compared to Ethereum's ECDSA algorithm. "},"basics/orders.html":{"url":"basics/orders.html","title":"Orders","keywords":"","body":"Orders Uni-Directional Order Model Unlike the order models of most centralized exchanges, Loopring uses the Uni-Directional Order Model (UDOM). UDOM represents buy orders and sell orders uniformly with one single data structure. Let's start with a simplified UDOM model to give you a few examples of Loopring's limit price orders (Loopring doesn't support market price orders). In the LRC-ETH trading pair, a sell order that sells 500 LRC at the price of 0.03ETH/LRC can be expressed as: { // LRC-ETH: sell 500 LRC at 0.03ETH/LRC \"tokenS\": \"LRC\", \"tokenB\": \"ETH\", \"amountS\": 500, \"amountB\": 15 // = 500 * 0.03 } The letter S stands for Sell and letter B stands for Buy. a buy order that buys 500 LRC at the price of 0.03ETH/LRC can be expressed as: { // LRC-ETH: buy 500 LRC at 0.03ETH/LRC \"tokenS\": \"ETH\", \"tokenB\": \"LRC\", \"amountS\": 15, // = 500 * 0.03 \"amountB\": 500 } As you may have noticed, UDOM does not specify trading pairs or prices explicitly. However, there is a problem with this simplified model: the match-engine doesn't know when an order should be considered as fully filled. We need to introduce another parameter called buy for this purpose. If buy == true, the match-engine shall check the total fill amount of tokenB against amountB to determine if an order has been fully filled; otherwise, it shall use the total fill amount of tokenS against amountS. With this new field, the above orders will look like the following: { // LRC-ETH: sell 500 LRC at 0.03ETH/LRC \"tokenS\": \"LRC\", \"tokenB\": \"ETH\", \"amountS\": 500, \"amountB\": 15 // = 500 * 0.03, \"buy\": false // check tokenS's fill amount against amountS } { // LRC-ETH: buy 500 LRC at 0.03ETH/LRC \"tokenS\": \"ETH\", \"tokenB\": \"LRC\", \"amountS\": 15, // = 500 * 0.03 \"amountB\": 500, \"buy\": true // check tokenB's fill amount against amountB } Note: If the above sell order is fully filled, the amount of ETH bought may be larger than 15ETH; and if the buy order is fully filled, the ETH paid may be less than 15ETH, which is the impact of the buy parameter on the match engine's behaviors. What is the effect of reversing the buy value in the two orders above? The sell order for the LRC-ETH trading pair becomes a buy order for the ETH-LRC trading pair, and the buy order for the LRC-ETH trading pair becomes a sell order for the ETH-LRC trading pair. It means one Loopring trading pair, such as LRC-ETH, is equivalent to two trading pairs in many centralized exchanges, i.e., LRC-ETH and ETH-LRC. Besides its elegancy and simplicity, Loopring's UDOM also makes it possible to implement much simpler settlement logic in ZKP circuits. Order object Loopring's actual order format is a bit more complex. You can use the following JSON to express a limit price order. For details of specific parameters, see Submit Order. newOrder = { \"tokenSId\": 2, // LRC \"tokenBId\": 0, // ETH \"amountS\": \"500000000000000000000\", \"amountB\": \"15000000000000000000\", \"buy\": \"false\", \"exchangeId\": 2, \"accountId\": 1234, \"allOrNone\": \"false\", // Must be \"false\" for now \"maxFeeBips\": 50, \"label\": 211, \"validSince\": 1582094327, \"validUntil\": 1587278341, \"orderId\": 5, \"hash\": \"14504358714580556901944011952143357684927684879578923674101657902115012783290\", \"signatureRx\": \"15179969700843231746888635151106024191752286977677731880613780154804077177446\", \"signatureRy\": \"8103765835373541952843207933665617916816772340145691265012430975846006955894\", \"signatureS\" : \"4462707474665244243174020779004308974607763640730341744048308145656189589982\", \"clientOrderId\": \"Test01\", \"channelId\": \"channel1::maker1\" } Next, we will further explain some of these data fields for you. Tokens and Amounts In an actual order, tokens are not expressed by their names or ERC20 addresses, but by their token ID, the index at which the tokens have been registered in the Loopring Exchange's smart contract. Note that the same ERC20 token may have different IDs on different exchanges built on top of the same Loopring protocol. In the above example, we assume that the IDs of LRC and ETH are 2 and 0, respectively. You can query token's information using Token Information Supported by the Exchange. The amounts of tokens are in their smallest unit as strings. Taking LRC as an example, its decimals is 18, so 1.0LRC should be expressed as \" 1000000000000000000 \" (1 followed by 18 0s). Each token's decimals is coded in its smart contract; the decimals of ETH is 18. The types of buy andallOrNone in the order are strings rather than boolean. Trading Fee maxFeeBips = 50 specifies that the maximum trading fee the order is willing to pay to the exchange is 0.5% (the unit of maxFeeBips is 0.01%). Loopring charges trading fees in tokenB as a percentage of the token bought from a trade. Assuming that the order above has bought \"10000000000000000000\" ETH (10ETH), the actual trading fee will not exceed 0.05ETH (\"10000000000000000000\"* 0.5%). Loopring's relayer offers different trading fee discounts based on the user VIP tiers. The bottom line is that the actual trading fees can never exceed the maximum orders are willing to pay, specified by maxFeeBips. When you place an order, you must set maxFeeBips to be no less than the trading fee rate in the specified trading pair for your account (based on your VIP level). This information can be obtained by querying /api/v2/user/feeRates. If you trust Loopring Exchange, you can also set maxFeeBips to 63, the maximum value allowed by the Loopring protocol. Timestamps validSince specifies the order's effective timestamp, andvalidUntil specifies the order expiration timestamp, both in seconds since epoch. When the relayer receives an order, it will verify these two timestamps in the order; Loopring's ZKP circuit code will also check these two timestamps during settlement. Due to the delay of zkRollup batch processing, and the possible deviation of the time on Ethereum blockchain and our servers, we strongly recommend that validSince be set to the current time,and the window between validSince andvalidUntil is no shorter than 1 week; otherwise, your order may be rejected or cancelled by the relayer. You can take advantage of the validUntil timestamp to avoid unnecessary proactive cancellation of orders. Fill Status and Order ID Loopring 3.1.1 reserves 16384 (2142 ^ {14} 2​14​​) slots for each token to track the aggregated fill amount of each order that sells the token. If an order's ID is N, then the slot used is N % 16384. In other words, if the slot number is m, it will be used to track orders with the following IDs: m, m + 16384, m + 16384 * 2, ... and so on. Each slot also remembers the ID of the current order being tracked (the initial order ID is the slot number), and subsequent orders with smaller IDs will be rejected. Suppose that slot 1 is tracking order 32769 (1 + 16384 * 2). When the user places orders with ID of 1 or16385, the server will reject these orders and return errors. If you have more than 16384 active orders for a trading pair, you need to cancel some of them to release slots before you can submit new orders. The maximum value of order ID is 1048576 (2202^{20}2​20​​). After reaching this ID limit, you can no longer place sell orders for the corresponding token. For most users, this is not a big problem; but for trading bots, we recommend registering multiple accounts to sell different tokens. Loopring 3.5 will remove the limit of the maximum order ID, but still retain the slot design and configuration. It is worth noting that all sell orders from the same account in multiple trading pairs with the same base token (such as LRC-ETH and LRC-USDT) share the same 16384 slots. If you do not plan to maintain the allocation of order IDs and slots between trading pairs on the client-side, you can register multiple accounts, as recommended above. We know the inconvenience caused by the slot design. However, this is a design decision made in the Loopring protocol itself. We hope future technological advances can remove this limitation. Other Fields exchangeId: Loopring Exchange's unique numeric ID in the Looping protocol, currently has value 2 and is constant. This ID will change once we upgrade to a new protocol version. accountId: User's account ID. allOrNone: \" true \" if the order must be fully filled or canceled. This parameter is not supported yet by our matching engine, so please set it to \"false\" for now. label: Used to label orders at the protocol layer but has no impact on trading. Because users will sign this field as part of the order, so it's more trustworthy for different parties to use, for example, to calculate profit-sharing. clientOrderId: Used to label orders by the client without user awareness. It also has no impact on trading. channelId: Used to lable order's channel. For more details, please refer to Submit Order. "},"basics/key_mgmt.html":{"url":"basics/key_mgmt.html","title":"Key Management","keywords":"","body":"Key Management Before using Loopring's API, you need to know how to obtain and change your account's EdDSA key pair and ApiKey. When invoking the API, the ApiKey needs to be passed to the relayer as an HTTP header value; the EdDSA secret key is used to sign the request on the client-side digitally. Obtain EdDSA key pair and ApiKey First of all, you need to register an account on Loopring Exchange (Loopring.io). Then you can use the \"Export Account\" function to export account-related information as a JSON object. The JSON object includes your EdDSA key pair and your account's ApiKey. The exported JSON should look like the following: { \"exchangeName\": \"LoopringDEX: Beta 1\", \"exchangeAddress\": \"0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777\", \"exchangeId\": 2, \"accountAddress\": \"0xe9577b420d96adfc97ff1e9e0557f8c73d7247fe\", \"accountId\": 12345, \"apiKey\": \"qXJpfTKrF0O5jIDPYIu7YkVgLFbvm5uIgPKBmHP2kBpcdKZjgfFKhIlE8evo9lKa\", \"publicKeyX\": \"20230748339558541226323870947000799026059173889124399831342481595010628000129\", \"publicKeyY\": \"4980637490279511620100245514492532318691849019959343538108355525575855311214\", \"privateKey\": \"1242957328515765470505817310060337585626176314364086438653683782645761561015\" } The first four fields are constants to the current version of the Loopring Exchange; other fields are about your account. Among them, publicKeyX andpublicKeyY are collectively the EdDSA public key of your account, and privateKey is the EdDSA private key. Please keep your EdDSA key pair and ApiKey strictly confidential. If you leak these information, your assets will be at risk. In any case, Loopring Exchange's UI and its API will never ask you for your EdDSA private key. Change EdDSA key pair and ApiKey You can change your EdDSA key pair through the \"Change Password\" function on Loopring Exchange. Because changing the password involves an Ethereum transaction and zero-knowledge proof generation, it will take a while for your new EdDSA key pair to becomes effective. You can get account information through the /api/v2/account API. If thefrozen field is true, it means that your account is in the processing of applying the new EdDSA key pair, during such a period, neither your previous EdDSA key pair nor your new EdDSA key pair can be used to sign requests. When you change your password on Loopring.io, your ApiKey will also be automatically updated. You can also change your ApiKey using API. EdDSA Generation The Loopring protocol does not specify how to generate or manage EdDSA key pairs. Loopring Exchange uses each account's Ethereum address and trading password to derive the EdDSA key pair. As Ethereum addresses are public information, the strength of your trading password is thus critical to the security of your trading assets. If you use Loopring Exchange's website to set the trading password, your password should be strong enough not to worry about being brute-forced; otherwise, you need to be careful not to use a simple password. Unlike a centralized exchange, brute-forcing your EdDSA key does not have to go through Loopring relayer - your EdDSA public key is stored on Ethereum, and hackers can read it out for brute force comparison. The algorithm for compute the EdDSA key pair is as follows (Python): seed = keccakHash('LOOPRING' + address.toLowerCase() + keccakHash(password)) keyPair = myEdDSAGenerator.generate(seed) where keccakHash returns the hex string of the kecca256 result. ApiKey Generation ApiKey is a globally unique string randomly generated by the Loopring relayer and bound to your account when your account is registered. "},"basics/signing.html":{"url":"basics/signing.html","title":"Request Signing","keywords":"","body":"Request Signing The Loopring API involves two different categories of signatures. One is the common API request signature, which is used to verify that the API invocations have been authenticated; the other is Loopring Protocol's off-chain request signature, which is used by Loopring to verify that off-chain requests have been authenticated. We will explain each of these two categories separately. Common API Request Signatures Algorithm Initialize signatureBase to an empty string. Append the API's HTTP method to signatureBase. Append '＆' to signatureBase. Append percent-encoded full URL path (without ? or any query parameters) to signatureBase. Append '&' to signatureBase. Initialize parameterString to an empty string. For GET / DELETE requests: Sort query parameters in ascending order lexicographically; Append percent-encoded key name to parameterString; Append an '=' to parameterString; Append percent-encoded value to parameterString; Append a '&' if there are more key value pairs. For POST / PUT requests: Append request body as a string to parameterString. Append percent-encoded parameterString to signatureBase Calculate the SHA-256 hash of signatureBase as hash. Signhash with the private EdDSA key and get Rx, Ry, and S. Concatenate Rx,Ry, andS using ',' as: ${Rx},${Ry},${S}. HTTP Method and URL Please make sure you use only the following HTTP methods, in upper case letters. GET POST PUT DELETE Also make sure the HTTPS header is included and is in lower case. For example: https://api.loopring.io/api/v2/apiKey Example For the above url with the following url query parameters: https://api.loopring.io/api/v2/apiKey?publicKeyX=13375450901292179417154974849571793069 911517354720397125027633242680470075859&publicKeyY=133754509012921794171549748495717930 69911517354720397125027633242680470075859&accountId=1 or Query param Value publicKeyX 13375450901292179417154974849571793069911517354720397125027633242680470075859 publicKeyY 13375450901292179417154974849571793069911517354720397125027633242680470075859 accountId 1 parameterString shoule be: accountId=1&publicKeyX=1337545090129217941715497484957179306991151735472039712502763324 2680470075859&publicKeyY=13375450901292179417154974849571793069911517354720397125027633 242680470075859 and signatureBase should be: GET&https%3A%2F%2Fapi.loopring.io%2Fapi%2Fv2%2FapiKey&accountId%3D1%26publicKeyX%3D1337 5450901292179417154974849571793069911517354720397125027633242680470075859%26publicKeyY% 3D13375450901292179417154974849571793069911517354720397125027633242680470075859 Off-chain Request Signatures Loopring 3.1.1 supports two types of off-chain requests: orders and off-chain withdrawals. Since these two off-chain requests will result in modifications to the exchange's state Merkel tree, when you submit these two types of requests using Loopring's API, you must provide special signatures required by the Loopring protocol. Loopring 3.1.1 also supports a third type of off-chain requests: order cancellation, but it will be deprecated in the up-coming 3.5 version. Therefore, Loopring Exchange will not support this type of off-chain requests. The off-chain request signature includes the following steps: Regularize the request r (JSON) to generate a strings. Calculate the Poseidon hash of s as h(see the following section). Sign h with the account's EdDSA private keyprivateKey and get three values: Rx,Ry, and S (see the following section). Convert h,Rx, Ry, andS into strings and merge them into r (please note the name change). { ..., \"hash\": ..., \"signatureRx\": \"16367919966553849834214288740952929086694704883595501207054796240908626703398\", \"signatureRy\": \"5706650945525714138019517276433581394702490352313697178959212750249847059862\", \"signatureS\": \"410675649229327911665390972834008845981102813589085982164606483611508480748\" } Signing Orders You need to seralized specific fields of an order into an integer array, then calculate the Poseidon hash of the array, and then sign the hash with your EdDSA private key. The rules for serialization of orders, hashing, and signature methods must strictly follow Loopring's Specification. Below we use Python code as a demo: def sign_int_array(privateKey, serialized, t): PoseidonHashParams = poseidon_params( SNARK_SCALAR_FIELD, t, 6, 53, b'poseidon', 5, security_target=128 ) hash = poseidon(serialized, PoseidonHashParams) signedMessage = PoseidonEdDSA.sign(hash, FQ(int(privateKey))) return ({ \"hash\": str(hash), \"signatureRx\": str(signedMessage.sig.R.x), \"signatureRy\": str(signedMessage.sig.R.y), \"signatureS\": str(signedMessage.sig.s), }) def serialize_order(order): return [ int(order[\"exchangeId\"]), int(order[\"orderId\"]), int(order[\"accountId\"]), int(order[\"tokenSId\"]), int(order[\"tokenBId\"]), int(order[\"amountS\"]), int(order[\"amountB\"]), int(order[\"allOrNone\"]==\"true\"), int(order[\"validSince\"]), int(order[\"validUntil\"]), int(order[\"maxFeeBips\"]), int(order[\"buy\"]==\"true\"), int(order[\"label\"]) ] def sign_order(privateKey, order): serialized = serialize_order(order) signed = sign_int_array(serialized, 14 /* Pay attention to this t value */) order.update(signed) If you don't use the ethsnarks library to calculate Poseidon hash, please pay attention to the values of the Poseidon parameters to ensure that they are entirely consistent with those used by Loopring. Otherwise, signature verification will fail. Signing Off-chain Withdrawals The current Loopring API does not yet support off-chain withdrawal requests. But we will add it soon. The following is an example of off-chain withdrawals: { \"exchangeId\": 2, \"accountId\":100, \"tokenId\": 0, \"amount\": 1000000000000000000, \"feeTokenId\": \"2\", \"amountFee\": 20000000000000000000, \"label\": 0, \"nonce\": 10 } where nonce must start from 0 and increment by 1. The code for signing it in Python is as follows: def serialize_offchain_withdrawal(withdrawal): return [ int(withdrawal['exchangeId']), int(withdrawal['accountId']), int(withdrawal['tokenId']), int(withdrawal['amount']), int(withdrawal['feeTokenId']), int(withdrawal['amountFee']), int(withdrawal['label']), int(withdrawal['nonce']) ] def sign_offchain_withdrawal(privateKey, offchainWithdrawal): serialized = serialize_offchain_withdrawal(offchainWithdrawal) signed = sign_int_array(serialized, 9 /* Pay attention to this t value */) offchainWithdrawal.update(signed) References You can learn more about the Poseidon hash and EdDSA signature through the following literature and github repositories. ethsnarks: https://github.com/HarryR/ethsnarks.git SHA256 Hash: https://en.wikipedia.org/wiki/SHA-2 EdDSA: https://en.wikipedia.org/wiki/EdDSA Poseidon Hash: https://www.poseidon-hash.info/ You can also refer to our example code for more details. "},"basics/examples.html":{"url":"basics/examples.html","title":"Example Code","keywords":"","body":"Example Code https://github.com/Loopring/hello_loopring contains some simple examples to help you quickly get started using the Loopring API. Among them: hash_and_sign/: Use Python and the ethsnarks to calculate the Poseidon hash of any strings; sign and verify EdDSA signatures. trading/: Submit, read, and cancel orders. offchain_withdrawal/: Signing and submit off-chain withdrawal requests (coming soon). We will continue to improve and open source more example code in the future. Stay tuned. "},"basics/contracts.html":{"url":"basics/contracts.html","title":"Smart Contracts","keywords":"","body":"Smart Contracts The following is a list of smart contract addresses for the Loopring Protocol and Loopring Exchange on Ethereum mainnet. LRC LRC Address: 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD (lrctoken.eth) Loopring Protocol (3.1.1) UniversalRegistry: 0x36F568EF555df25be4B6e15D16994F3A8374214E LoopringV3: 0x18dd1dda037B009F7C1024dDdD58e4Fe9F960ac7 ExchangeV3: 0x730Ea81C982939931d7514CC3Fbc22eAf7D372ec ProtocolFeeVaultAddress: 0x4b89f8996892d137c3dE1312d1dD4E4F4fFcA171 (feevault.lrctoken.eth) BlockVerifier: 0x40598B41cc17a7E56dd72F415E8223aaCCA94cF7 (blockverifier.lrctoken.eth) DowntimeCostCalculator: 0x873685f032c6Aa1572766401f3198a1f09A5C221 UniswapTokenSellerAddress: 0xdd5102f902b0892D1bbf2D2d0fCBE11ccEA1D537 UserStakingPoolAddress: 0xF4662bB1C4831fD411a95b8050B3A5998d8A4A5b (stakingpool.lrctoken.eth) ChainlinkTokenPriceProvider: 0x3B740FeE3ED82FA676286938E124A8Bb74553f93 MovingAveragePriceProvider: 0x388110217e4d194d501BB52c3AB28dC709EB450d Open Sourced The code of the Loopring Protocol is entirely open-sourced, including its design document, smart contracts, and ZKP circuits. If you have any questions, please email the Loopring Foundation at foundation@loopirng.org. Loopring Exchange (beta1) exchangeName: LoopringDEX: Beta 1 exchangeId: 2 exchangeAddress: 0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777 owner: 0x4374D3d032B3c96785094ec9f384f07077792768 operator: 0x4374D3d032B3c96785094ec9f384f07077792768 "},"REST_APIS.html":{"url":"REST_APIS.html","title":"REST API","keywords":"","body":"REST API This article describes some common parts for Loopring's REST API. Base URL https://api.loopring.io Rate Limit Each API has its rate limit settings. The relayer will reject all API invocations beyond this limit, with status code 429. Stop excessive API invocations to avoid your account from being suspended. HTTP Headers X-API-KEY All API except querying user ApiKey need to specify the X-API-KEY HTTP header with the user's ApiKey as the value. X-API-SIG The following API needs to specify the X-API-SIG HTTP header to provide an EdDSA signature: Query ApiKey Cancel order Change ApiKey Setting HTTP Headers To set the HTTP headers using Python, use the code below: def init_request_session(apiKey, sig): session = requests.session() session.headers.update({ 'Accept': 'application/json', 'X-API-KEY': apiKey, 'X-API-SIG': sig, }) return session Response Except for network errors, all API will return the 200 HTTP status code and a JSON object representing the actual API result. The JSON contains a resultInfo structure that has a code field for application-specific status code, and a data JSON object that represents API-specific response. Response Field Type Required Description Example resultInfo ResultInfo Y Result of API invocation - ResultInfo Struct Field Type Required Description Example code integer Y Status code 0 message string Y Return message. This is used for debug only. Do not show to users \"SUCCESS\" Status code Status code Description 0 Success 100000 Unknown internal error 100001 Invalid parameter 100002 Request timeout 100202 Update fail 100203 Internal persistence error 100204 Duplicate request "},"dex_apis/getTimestamp.html":{"url":"dex_apis/getTimestamp.html","title":"Get relayer's current time","keywords":"","body":"Get relayer's current time Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/timestamp Summary Returns the relayer's current time in millisecond API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/timestamp HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/timestamp Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data integer N The returned server's current time 1584683483382 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : 1584683483382 } Status code Value Description 100000 Unknown error "},"dex_apis/getApiKey.html":{"url":"dex_apis/getApiKey.html","title":"Get user ApiKey","keywords":"","body":"Get user ApiKey Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/apiKey Summary Get the ApiKey associated with the user's account. API description HTTP Header Field Type Required Description Example X-API-SIG string Y Signature \"13834524429315716527072245289201098743367448928828941694333300773464291931668,19252438164424980901323496067579767457298262609633182654968500317796010794338,1296502169918579172046019624886776672473813683541532008712357317204831986826\" Request parameters Field Type Required Description Example accountId integer Y AccountID 10 publicKeyX string Y Public key X \"123\" publicKeyY string Y Public key X \"456\" Request example HTTPCURLGET https://api.loopring.io/api/v2/apiKey?accountId=10&publicKeyX=123&publicKeyY=456 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-SIG: dkkfinfasdfcurl -H \"X-API-SIG:dkkfinfasdf\" https://api.loopring.io/api/v2/apiKey\\?accountId\\=10\\&publicKeyX\\=123\\&publicKeyY\\=456 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string Y ApiKey \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } Status code Value Description 100000 Unknown error 101002 The user was not found 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID 104004 No signature information provided 104005 Wrong signature information "},"dex_apis/applyApiKey.html":{"url":"dex_apis/applyApiKey.html","title":"Update user's ApiKey","keywords":"","body":"Update user's ApiKey Rate limit: 5 every second API Overview HTTP method POST Path /api/v2/apiKey Summary Change the ApiKey associated with the user's account. The current ApiKey must be provided as the value of the X-API-KEY HTTP header. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y AccountID 1 publicKeyX string Y public key X \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" publicKeyY string Y public key Y \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" Request example HTTPCURLPOST https://api.loopring.io/api/v2/apiKey HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"accountId\" : 1, \"publicKeyX\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"publicKeyY\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/apiKey -d \\ '{ \"accountId\" : 1, \"publicKeyX\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"publicKeyY\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" }' Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string Y ApiKey \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } Status code Value Description 100000 Unknown error 101002 The user was not found 100001 Invalid argument 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID 104004 No signature information provided 104005 Wrong signature information "},"dex_apis/getNextOrderId.html":{"url":"dex_apis/getNextOrderId.html","title":"Get next order ID","keywords":"","body":"Get next order ID Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/orderId Summary Get next order ID for the token to sell (tokenS) API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 tokenSId integer Y The ID of the token to be sold 0 Request example HTTPCURLGET https://api.loopring.io/api/v2/orderId?accountId=1&tokenSId=0 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orderId\\?accountId\\=1\\&tokenSId\\=0 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Order ID \"108\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"108\" } Status code Value Description 100000 Unknown error 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID "},"dex_apis/getOrderDetail.html":{"url":"dex_apis/getOrderDetail.html","title":"Get order details","keywords":"","body":"Get order details Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/order Summary Get the details of an order based on order hash. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 orderHash string Y Order hash \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" Request example HTTPCURLGET https://api.loopring.io/api/v2/order?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/order\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data OrderDetail N Response details of order / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"size\" : \"8210000000000001024\", \"volume\" : \"163182534700000032\", \"price\" : \"0.01987608\", \"filledSize\" : \"0\", \"filledVolume\" : \"0\", \"filledFee\" : \"0\", \"status\" : \"processing\", \"validSince\" : 1583929591, \"validUntil\" : 1586521591, \"createdAt\" : 1583933191494, \"side\" : \"SELL\", \"market\" : \"LRC-ETH\" } } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 107002 Order Hash cannot be empty 107003 Order does not exist 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model OrderDetail Response details of order Field Type Required Description Example hash string Y Order hash \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" clientOrderId string Y Order's client-side id \"200310143135081332\" size string Y Order size, as wei in base token \"8210000000000001024\" volume string Y Order volume, as wei in quote token \"163182534700000032\" price string Y Order price \"0.01987608\" filledSize string Y Filled size, as wei in base token \"0\" filledVolume string Y Filled volume, as wei in quote token \"0\" filledFee string Y Fees charged \"0\" status string Y Order statusAllowable : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] \"processing\" validSince integer Y Timestamp for order to become valid 1583929591 validUntil integer Y Timestamp for order to become invalid 1586521591 createdAt integer Y Order creation timestamp 1583933191494 side string Y Order's sideAllowable : ['SELL', 'BUY'] \"SELL\" market string Y Trading pair \"LRC-ETH\" "},"dex_apis/submitOrder.html":{"url":"dex_apis/submitOrder.html","title":"Submit an order","keywords":"","body":"Submit an order Rate limit: 5 every second API Overview HTTP method POST Path /api/v2/order Summary Please follow the following steps to submit an order: Get the next orderId through /api/v2/orderId. If you maintain order IDs on the client side, you can skip this step. Choose reasonable values for validSince andvalidUntil. We recommend that validSince is set to the current system time, and validUntil is set to be at least one week later than the current time. Choose a reasonable MaxFeeBips. We recommend setting this value to 63. UseclientOrderId and/or channelId for better client-side tracking. Sign the order. Submit the order and receive the order's hash. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example exchangeId integer Y Exchange ID 1 orderId integer Y Order ID 1 accountId integer Y Account ID 1 tokenSId integer Y The ID of the token to be sold 0 tokenBId integer Y The ID of the token to be bought 2 amountS string Y Number of tokens to be sold \"1000000000000000000\" amountB string Y Number of tokens to be bought \"1000000000000000000\" allOrNone string N Whether the order can only be filled completely or 0 deals, currently only supports false \"false\" buy string Y Buy until buy or sell until buy \"true\" validSince integer Y Order effective time, accuracy is in seconds 1567053142 validUntil integer Y Order expiration time, accuracy is in seconds 1567053142 maxFeeBips integer Y Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63 20 label integer Y Order label, used to indicate the order attribute or source, etc., to participate in order signature, value range 0 ~ 65535 20 signatureRx string Y Rx part of order signed result \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" signatureRy string Y Ry part of order signed result \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" signatureS string Y S part of order signed result \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string N The unique order ID of the client \"1\" channelId string N Order channel ID, used to indicate from which channel the order was submitted \"hebao::subchannel::0001\" Request example HTTPCURLPOST https://api.loopring.io/api/v2/order HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/order -d \\ '{ \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" }' Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Hash of the newly submitted order \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" } Status code Value Description 100000 Unknown error 102001 Exchange ID is incorrect 102002 Unsupported TokenId in the order 102003 Invalid account ID 102004 Invalid order ID 102005 Market does not support 102006 Illegal rate field 102007 Order already exists 102008 Order has expired 102010 Order is missing signature information 102011 Insufficient user balance 102012 The order amount is too small 102014 Failed to freeze the amount, please try again later 102020 Exceeded the maximum order amount 102120 Order is not valid 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID 104004 No signature information provided 104005 Wrong signature information "},"dex_apis/batchSubmitOrder.html":{"url":"dex_apis/batchSubmitOrder.html","title":"Submit multiple orders","keywords":"","body":"Submit multiple orders Rate limit: 5 every second API Overview HTTP method POST Path /api/v2/batchOrders Summary Submit up to 10 orders as a batch. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example orders List[SubmitOrderRequest] Y Orders to submit. / Request example HTTPCURLPOST https://api.loopring.io/api/v2/batchOrders HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"orders\" : [ { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" } ] }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/batchOrders -d \\ '{ \"orders\" : [ { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" } ] }' Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[SubmitOrderResult] Y Result of batch submit orders. / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } Status code Value Description 100000 Unknown error 100001 Invalid argument 104209 Partial batch operation failed Model SubmitOrderRequest Submit order request description Field Type Required Description Example exchangeId integer Y Exchange ID 1 orderId integer Y Order ID 1 accountId integer Y Account ID 1 tokenSId integer Y The ID of the token to be sold 0 tokenBId integer Y The ID of the token to be bought 2 amountS string Y Number of tokens to be sold \"1000000000000000000\" amountB string Y Number of tokens to be bought \"1000000000000000000\" allOrNone string N Whether the order can only be filled completely or 0 deals, currently only supports false \"false\" buy string Y Buy until buy or sell until buy \"true\" validSince integer Y Order effective time, accuracy is in seconds 1567053142 validUntil integer Y Order expiration time, accuracy is in seconds 1567053142 maxFeeBips integer Y Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63 20 label integer Y Order label, used to indicate the order attribute or source, etc., to participate in order signature, value range 0 ~ 65535 20 signatureRx string Y Rx part of order signed result \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" signatureRy string Y Ry part of order signed result \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" signatureS string Y S part of order signed result \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string N The unique order ID of the client \"1\" channelId string N Order channel ID, used to indicate from which channel the order was submitted \"hebao::subchannel::0001\" SubmitOrderResult Single order submission results. Field Type Required Description Example hash string Y Hash of order submitted \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" error ResultInfo N Error for order submission failure. / "},"dex_apis/getOrders.html":{"url":"dex_apis/getOrders.html","title":"Get multiple orders","keywords":"","body":"Get multiple orders Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/orders Summary Get a list of orders satisfying certain criteria. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 market string N Trading pair \"LRC-ETH\" start integer N Lower bound of order's creation timestamp in millisecond 1567053142000 end integer N Upper bound of order's creation timestamp in millisecond 1567053242000 fromHash string N Pagination of data to return records earlier than the requested hash \"2600105125336468966417510367500403435128941502452005674156103328855968837178\" side string N \"BUY\" or \"SELL\"Allowable : ['BUY', 'SELL'] \"BUY\" status string N Order status. You can specify one of the following values:Allowable : ['waiting', 'processing', 'processed', 'failed', 'cancelled', 'expired'] \"processing,processed\" limit integer N Limit of orders (default 50) 50 offset integer N Offset of orders (default 0)Default : 0L 0 Request example HTTPCURLGET https://api.loopring.io/api/v2/orders?accountId=1&market=LRC-ETH&start=1567053142000&end=1567053242000&fromHash=2600105125336468966417510367500403435128941502452005674156103328855968837178&side=BUY&status=processing,processed&limit=50&offset=0 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders\\?accountId\\=1\\&market\\=LRC-ETH\\&start\\=1567053142000\\&end\\=1567053242000\\&fromHash\\=2600105125336468966417510367500403435128941502452005674156103328855968837178\\&side\\=BUY\\&status\\=processing,processed\\&limit\\=50\\&offset\\=0 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data OrdersDetail N Response orders / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 10, \"orders\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"size\" : \"8210000000000001024\", \"volume\" : \"163182534700000032\", \"price\" : \"0.01987608\", \"filledSize\" : \"0\", \"filledVolume\" : \"0\", \"filledFee\" : \"0\", \"status\" : \"processing\", \"validSince\" : 1583929591, \"validUntil\" : 1586521591, \"createdAt\" : 1583933191494, \"side\" : \"SELL\", \"market\" : \"LRC-ETH\" } ] } } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model OrdersDetail Response orders Field Type Required Description Example totalNum integer Y Total number of orders 10 orders List[OrderDetail] N List of order / OrderDetail Response details of order Field Type Required Description Example hash string Y Order hash \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" clientOrderId string Y Order's client-side id \"200310143135081332\" size string Y Order size, as wei in base token \"8210000000000001024\" volume string Y Order volume, as wei in quote token \"163182534700000032\" price string Y Order price \"0.01987608\" filledSize string Y Filled size, as wei in base token \"0\" filledVolume string Y Filled volume, as wei in quote token \"0\" filledFee string Y Fees charged \"0\" status string Y Order statusAllowable : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] \"processing\" validSince integer Y Timestamp for order to become valid 1583929591 validUntil integer Y Timestamp for order to become invalid 1586521591 createdAt integer Y Order creation timestamp 1583933191494 side string Y Order's sideAllowable : ['SELL', 'BUY'] \"SELL\" market string Y Trading pair \"LRC-ETH\" "},"dex_apis/cancelOrders.html":{"url":"dex_apis/cancelOrders.html","title":"Cancel orders","keywords":"","body":"Cancel orders Rate limit: 5 every second API Overview HTTP method DELETE Path /api/v2/orders Summary Cancel orders using order hash or client-side ID. If no parameters are provided, all pending all orders will be cancelled. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string Y Signature \"13834524429315716527072245289201098743367448928828941694333300773464291931668,19252438164424980901323496067579767457298262609633182654968500317796010794338,1296502169918579172046019624886776672473813683541532008712357317204831986826\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 orderHash string N Order HASH \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string N The unique order ID of the client \"20200318000000001010\" Request example HTTPCURLDELETE https://api.loopring.io/api/v2/orders?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859&clientOrderId=20200318000000001010 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdfcurl -X DELETE -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" https://api.loopring.io/api/v2/orders\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859\\&clientOrderId\\=20200318000000001010 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data boolean N Cancel orders response \"true\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : true } Status code Value Description 100000 Unknown error 104001 Empty ApiKey 102117 No orders to cancel 102118 Failed to cancel orders, please try again later 104002 Invalid ApiKey 104003 Invalid Account ID "},"dex_apis/batchCancelOrdersByOrderHash.html":{"url":"dex_apis/batchCancelOrdersByOrderHash.html","title":"Cancel multiple order by hash","keywords":"","body":"Cancel multiple order by hash Rate limit: 5 every second API Overview HTTP method DELETE Path /api/v2/orders/byHash Summary Cancel up to 10 orders by order hash. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 orderHash string Y Hash of order to be canceled,separate multiple hashes with commas. \"13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860\" Request example HTTPCURLDELETE https://api.loopring.io/api/v2/orders/byHash?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -X DELETE -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders/byHash\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[CancelOrderResult] Y Results of batch order cancellation. / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"id\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"result\" : true, \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } Status code Value Description 100000 Unknown error 100001 Invalid argument 104209 Partial batch operation failed Model CancelOrderResult result for order cancellation. Field Type Required Description Example id string Y Hash or clientOrderId of order cancelled. \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" result boolean Y Order cancellation result. \"true\" error ResultInfo N Error for cancel order failure. / "},"dex_apis/batchCancelOrdersByClientOrderId.html":{"url":"dex_apis/batchCancelOrdersByClientOrderId.html","title":"Cancel multiple orders by clientOrderId","keywords":"","body":"Cancel multiple orders by clientOrderId Rate limit: 5 every second API Overview HTTP method DELETE Path /api/v2/orders/byClientOrderId Summary Cancel up to 10 orders by clientOrderId. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 clientOrderId string Y ClientOrderIds of orders to be cancelled. \"20200318000000001010,20200318000000001011\" Request example HTTPCURLDELETE https://api.loopring.io/api/v2/orders/byClientOrderId?accountId=1&clientOrderId=20200318000000001010,20200318000000001011 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -X DELETE -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders/byClientOrderId\\?accountId\\=1\\&clientOrderId\\=20200318000000001010,20200318000000001011 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[CancelOrderResult] Y Results of batch order cancellation. / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"id\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"result\" : true, \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } Status code Value Description 100000 Unknown error 100001 Invalid argument 104209 Partial batch operation failed Model CancelOrderResult result for order cancellation. Field Type Required Description Example id string Y Hash or clientOrderId of order cancelled. \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" result boolean Y Order cancellation result. \"true\" error ResultInfo N Error for cancel order failure. / "},"dex_apis/sendTransaction.html":{"url":"dex_apis/sendTransaction.html","title":"Send a raw Ethereum transaction","keywords":"","body":"Send a raw Ethereum transaction Rate limit: 5 every second API Overview HTTP method POST Path /api/v2/sendEthTx Summary Relay a raw Ethereum transaction to the Ethereum mainnet. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example data string Y Serialized Ethereum signature transaction as hexadecimal string \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" Request example HTTPCURLPOST https://api.loopring.io/api/v2/sendEthTx HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"data\" : \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/sendEthTx -d \\ '{ \"data\" : \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" }' Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Transaction hash \"0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886\" } Status code Value Description 100000 Unknown error 104202 The current node service is not available 104205 Error in internal request 104208 Unknown error in Ethereum node "},"dex_apis/getEthNonce.html":{"url":"dex_apis/getEthNonce.html","title":"Get user's next Ethereum nonce","keywords":"","body":"Get user's next Ethereum nonce Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/ethNonce Summary Returns the next nonce of the Ethereum address associated with the user's account API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address \"0x0000000000000000000000000000000000000000\" Request example HTTPCURLGET https://api.loopring.io/api/v2/ethNonce?owner=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ethNonce\\?owner\\=0x0000000000000000000000000000000000000000 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data integer N The result of nonce 0 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : 0 } Status code Value Description 100000 Unknown error 104205 Error in internal request 104208 Unknown error in Ethereum node "},"dex_apis/getEthBalance.html":{"url":"dex_apis/getEthBalance.html","title":"Get user's Ether balance on Ethereum mainnet","keywords":"","body":"Get user's Ether balance on Ethereum mainnet Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/ethBalances Summary Returns user's Ether balance on Ethereum mainnet (not the Ether balance on Loopring.io) API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address \"0x0000000000000000000000000000000000000000\" Request example HTTPCURLGET https://api.loopring.io/api/v2/ethBalances?owner=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ethBalances\\?owner\\=0x0000000000000000000000000000000000000000 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Balance in wei \"1000000000000000000\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"1000000000000000000\" } Status code Value Description 100000 Unknown error 104205 Error in internal request 104208 Unknown error in Ethereum node "},"dex_apis/getRecommendedGasPrice.html":{"url":"dex_apis/getRecommendedGasPrice.html","title":"Get recommended gas price","keywords":"","body":"Get recommended gas price Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/recommendedGasPrice Summary Get recommended gas price in Gwei. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/recommendedGasPrice HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/recommendedGasPrice Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Response value of current recommended gas price in Gwei \"10000000000\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"10000000000\" } Status code Value Description 100000 Unknown error 105001 Failed to get recommended gas "},"dex_apis/getMarkets.html":{"url":"dex_apis/getMarkets.html","title":"Get market configurations","keywords":"","body":"Get market configurations Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/exchange/markets Summary Returns the configurations of all supported markets (trading pairs) API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/exchange/markets HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/markets Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[MarketInfo] N Markets list / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"market\" : \"LRC-USDT\", \"baseTokenId\" : 2, \"quoteTokenId\" : 0, \"precisionForPrice\" : 6, \"orderbookAggLevels\" : 4, \"enabled\" : false } ] } Status code Value Description 100000 Unknown error Model MarketInfo Field Type Required Description Example market string Y Trading pair ID \"LRC-USDT\" baseTokenId integer Y The base token ID 2 quoteTokenId integer Y The quote token ID 0 precisionForPrice integer Y The precision of price 6 orderbookAggLevels integer Y The max level of orderbook price aggregation 4 enabled boolean Y True if trading is enabled for this trading pair \"false\" "},"dex_apis/getTokens.html":{"url":"dex_apis/getTokens.html","title":"Get token configurations","keywords":"","body":"Get token configurations Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/exchange/tokens Summary Returns the configurations of all supported tokens, including Ether. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/exchange/tokens HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/tokens Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[TokenInfo] N Token list / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"type\" : \"ERC20\", \"tokenId\" : 2, \"symbol\" : \"LRC\", \"name\" : \"Loopring\", \"address\" : \"0x97241525fe425C90eBe5A41127816dcFA5954b06\", \"unit\" : \"LRC\", \"decimals\" : 18, \"precision\" : 6, \"minOrderAmount\" : \"10000000000000000\", \"maxOrderAmount\" : \"1000000000000000000\", \"dustOrderAmount\" : \"1000000000000000\", \"enabled\" : true } ] } Status code Value Description 100000 Unknown error Model TokenInfo Token Detail Field Type Required Description Example type string Y Token TypeAllowable : ['ERC20', 'ETH'] \"ERC20\" tokenId integer Y Token's numeric id 2 symbol string Y Token symbol \"LRC\" name string Y Token name \"Loopring\" address string Y Token ERC20 contract address \"0x97241525fe425C90eBe5A41127816dcFA5954b06\" unit string Y Token unit \"LRC\" decimals integer Y Token decimals 18 precision integer Y Max decimals that relayer uses for the token, smaller amount will be treated as zero. 6 minOrderAmount string Y The minimum amount required for submitting orders. \"10000000000000000\" maxOrderAmount string Y The maximum amount required for submitting orders. \"1000000000000000000\" dustOrderAmount string Y The dust order threshold amount. \"1000000000000000\" enabled boolean Y Whether the token is currently enabled for deposits and withdrawals. \"true\" "},"dex_apis/getExchangeInfo.html":{"url":"dex_apis/getExchangeInfo.html","title":"Get exchange configurations","keywords":"","body":"Get exchange configurations Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/exchange/info Summary Return various configurations of Loopring.io API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/exchange/info HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/info Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data ExchangeInfo N Necessary exchange to interact with the exchange / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"chainId\" : 1, \"exchangeId\" : 1, \"exchangeAddress\" : \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\", \"onchainFees\" : [ { \"type\" : \"withdraw\", \"fee\" : \"2000000000000000\" } ] } } Status code Value Description 100000 Unknown error Model ExchangeInfo Exchange basic info. Field Type Required Description Example chainId integer Y Loopring's smart contract network id. 1 exchangeId integer Y The ID of Loopring.io's smart contract in Loopring protocol's registry. 1 exchangeAddress string Y Contract address of exchange. \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\" onchainFees List[FeeInfo] Y Fees settings. / FeeInfo Information about fees charged by the exchange. Field Type Required Description Example type string Y Fee category. \"withdraw\" fee string Y Fee amount in Ether as wei. \"2000000000000000\" "},"dex_apis/getDepth.html":{"url":"dex_apis/getDepth.html","title":"Get market orderbook","keywords":"","body":"Get market orderbook Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/depth Summary Returns the order book of a given trading pair. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y The id of a trading pair. \"LRC-ETH\" level integer Y Order book aggregation level, larger value means further price aggregation. 2 limit integer N Maximum numbers of bids/asks.Default : 50 50 Request example HTTPCURLGET https://api.loopring.io/api/v2/depth?market=LRC-ETH&level=2&limit=50 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/depth\\?market\\=LRC-ETH\\&level\\=2\\&limit\\=50 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data Depth N Order book detail. / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"version\" : 147, \"timestamp\" : 432312312, \"bids\" : [[\"0.002\",\"21000\",\"33220000\",\"4\"]], \"asks\" : [] } } Status code Value Description 100000 Unknown error 108000 Unsupported market 108001 Unsupported depth level Model Depth Order book info Field Type Required Description Example version integer Y An ever-increasing numeric version number that reflects its change history. 147 timestamp integer Y Update timestamp 432312312 bids List[List[string]] Y Array of bids, each item is an array that contains the price, size, volume and the number of orders aggregated at this price. \"[[\"0.002\",\"21000\",\"33220000\",\"4\"]]\" asks List[List[string]] Y Array of asks, each item is an array that contains the price, size, volume and the number of orders aggregated at this price. \"[]\" "},"dex_apis/getTicker.html":{"url":"dex_apis/getTicker.html","title":"Get market ticker","keywords":"","body":"Get market ticker Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/ticker Summary Returns the ticker of a given trading pair. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Market pair, support multiple markets \"LRC-ETH,LRC-USDT\" Request example HTTPCURLGET https://api.loopring.io/api/v2/ticker?market=LRC-ETH,LRC-USDT HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ticker\\?market\\=LRC-ETH,LRC-USDT Response fields Field Type Required Description Example resultInfo ResultInfo Y The returned message / data List[List[string]] N Each item in the list is an array that contains the following: trading pair ID, update timestamp, base token volume, quote token volume, open-price, highest price, lowest price, closing price, number of trades, highest bid price, lowest ask price. All values are returned as strings. \"[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]]\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]] } Status code Value Description 100000 Unknown error 100001 Invalid argument "},"dex_apis/getCandlestick.html":{"url":"dex_apis/getCandlestick.html","title":"Get market candlestick","keywords":"","body":"Get market candlestick Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/candlestick Summary Return the candlestick data of a given trading pair. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Trading pair ID, multi-market is not supported \"LRC-ETH\" interval string Y Candlestick interval, Supported values are: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w \"5min\" start integer N Start time 1584479105000 end integer N End time 1584565505000 limit integer N Number of data points. If more data points are available, the API will only return the first 'limit' data points. 120 Request example HTTPCURLGET https://api.loopring.io/api/v2/candlestick?market=LRC-ETH&interval=5min&start=1584479105000&end=1584565505000&limit=120 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/candlestick\\?market\\=LRC-ETH\\&interval\\=5min\\&start\\=1584479105000\\&end\\=1584565505000\\&limit\\=120 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[List[string]] N Candlestick data, each set of data includes start time, number of transactions, opening price, closing price, highest price, lowest price, total transaction volume of Base Token, total transaction volume of Quote Token \"[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]]\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]] } Status code Value Description 100000 Unknown error 100001 Invalid argument "},"dex_apis/getPrice.html":{"url":"dex_apis/getPrice.html","title":"Get token fiat prices","keywords":"","body":"Get token fiat prices Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/price Summary Returns the fiat prices of the given tokens API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example legal string Y The fiat currency to uses. Currently the following values are supported: USD,CNY,JPY,EUR,GBP,HKD \"USD\" Request example HTTPCURLGET https://api.loopring.io/api/v2/price?legal=USD HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/price\\?legal\\=USD Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[Price] N The list of Price data / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"symbol\" : \"LRC\", \"price\" : \"0\", \"timestamp\" : 0 } ] } Status code Value Description 100000 Unknown error Model Price Token fiat price Field Type Required Description Example symbol string Y Token symbol \"LRC\" price string Y Fiat price \"0\" timestamp integer Y Last update timestamp 0 "},"dex_apis/getMarketTrade.html":{"url":"dex_apis/getMarketTrade.html","title":"Get market recent trades","keywords":"","body":"Get market recent trades Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/trade Summary Query trades with specified market API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Single market to query \"LRC-USDT\" limit integer N Number of queries 20 Request example HTTPCURLGET https://api.loopring.io/api/v2/trade?market=LRC-USDT&limit=20 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/trade\\?market\\=LRC-USDT\\&limit\\=20 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data MarketTrades N Market trades list / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 0, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } } Status code Value Description 100000 Unknown error Model MarketTrades Market trades list Field Type Required Description Example totalNum integer Y The total number of trades in query result 0 trades List[List[string]] Y List of trades records, each trade record in the order of the array is the trade time, record id, buying and selling direction, volume, price, market and fees \"[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]\" "},"dex_apis/getAllowance.html":{"url":"dex_apis/getAllowance.html","title":"Get user token allowance","keywords":"","body":"Get user token allowance Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/allowances Summary Returns the allowance of a given token that the user has authorized for Loopring.io API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address \"0x0000000000000000000000000000000000000000\" token string Y The token address to query \"0x0000000000000000000000000000000000000000\" Request example HTTPCURLGET https://api.loopring.io/api/v2/allowances?owner=0x0000000000000000000000000000000000000000&token=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/allowances\\?owner\\=0x0000000000000000000000000000000000000000\\&token\\=0x0000000000000000000000000000000000000000 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Allowance amount in wei \"0\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0\" } Status code Value Description 100000 Unknown error 104205 Error in internal request 104208 Unknown error in Ethereum node "},"dex_apis/getTokenBalance.html":{"url":"dex_apis/getTokenBalance.html","title":"Get user token balance","keywords":"","body":"Get user token balance Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/tokenBalances Summary Returns user's token balance on Ethereum mainnet (not token's balance on Loopring.io) API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address \"0x0000000000000000000000000000000000000000\" token string Y Token's ERC20 address \"0x0000000000000000000000000000000000000000\" Request example HTTPCURLGET https://api.loopring.io/api/v2/tokenBalances?owner=0x0000000000000000000000000000000000000000&token=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/tokenBalances\\?owner\\=0x0000000000000000000000000000000000000000\\&token\\=0x0000000000000000000000000000000000000000 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Balance in wei \"1000000000000000000\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"1000000000000000000\" } Status code Value Description 100000 Unknown error 104205 Error in internal request 104208 Unknown error in Ethereum node "},"dex_apis/getAccount.html":{"url":"dex_apis/getAccount.html","title":"Query user information","keywords":"","body":"Query user information Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/account Summary Returns data associated with the user's exchange account. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address \"0x123456\" Request example HTTPCURLGET https://api.loopring.io/api/v2/account?owner=0x123456 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/account\\?owner\\=0x123456 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data DexAccount Y DexAccount data \"0\" Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"accountId\" : 10, \"frozen\" : false, \"publicKeyX\" : \"123\", \"publicKeyY\" : \"456\", \"tags\" : \"vip_1\" } } Status code Value Description 100000 Unknown error 101001 The address was not found 101002 The user was not found Model DexAccount DexAccount data Field Type Required Description Example accountId integer Y Account ID 10 frozen boolean Y The frozen state of the account, true stands for frozen, if the account is frozen, the user cant submit order. \"false\" publicKeyX string Y The first part of user's public key \"123\" publicKeyY string Y The second part of user's public key \"456\" tags string N Comma separated list of tags such as VIP levels, etc \"vip_1\" "},"dex_apis/getUserCreate.html":{"url":"dex_apis/getUserCreate.html","title":"Get user registration transactions","keywords":"","body":"Get user registration transactions Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/user/createInfo Summary Returns a list Ethereum transactions from users for exchange account registration. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 start integer N Start time in millisecondsDefault : 0L 1578558098000 end integer N End time in millisecondsDefault : 0L 1578558098000 status string N Comma separated status valuesAllowable : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer N Number of records to return 50 fromHash string N Pagination of data to return records earlier than the requested hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" offset integer N Number of records to skipDefault : 0L 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/createInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/createInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data UserCreateDataList N TxDataList / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000 } ] } } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model UserCreateDataList UserCreateDataList Field Type Required Description Example totalNum integer Y Total number of records found 1 transactions List[UserAccountTxData] Y List of UserRegistrationRecord / UserAccountTxData Response data Field Type Required Description Example id integer Y Unique id 1 txHash string Y Transaction hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string Y User transaction type \"1000000000000000\" status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string Y Progress \"100%\" timestamp integer Y Create time 1578572292000 blockNum integer Y Block height 100 updatedAt integer Y Update time 1578572292000 "},"dex_apis/getUserUpdate.html":{"url":"dex_apis/getUserUpdate.html","title":"Get password reset transactions","keywords":"","body":"Get password reset transactions Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/user/updateInfo Summary Returns a list Ethereum transactions from users for resetting exchange passwords. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 start integer N Start time in millisecondsDefault : 0L 1578558098000 end integer N End time in millisecondsDefault : 0L 1578558098000 status string N Comma separated status valuesAllowable : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer N Number of records to return 50 fromHash string N Pagination of data to return records earlier than the requested hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" offset integer N Number of records to skipDefault : 0L 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/updateInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/updateInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data UserChangePasswordDataList N TxDataList / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000 } ] } } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model UserChangePasswordDataList UserChangePasswordDataList Field Type Required Description Example totalNum integer Y Total number of records found 1 transactions List[UserAccountTxData] Y List of UserPasswordChangeRecord / UserAccountTxData Response data Field Type Required Description Example id integer Y Unique id 1 txHash string Y Transaction hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string Y User transaction type \"1000000000000000\" status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string Y Progress \"100%\" timestamp integer Y Create time 1578572292000 blockNum integer Y Block height 100 updatedAt integer Y Update time 1578572292000 "},"dex_apis/getUserBalances.html":{"url":"dex_apis/getUserBalances.html","title":"Get user exchange balances","keywords":"","body":"Get user exchange balances Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/user/balances Summary Returns user's Ether and token balances on exchange. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y AccountID 1 tokens string N Balances \"0,1\" Request example HTTPCURLGET https://api.loopring.io/api/v2/user/balances?accountId=1&tokens=0,1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/balances\\?accountId\\=1\\&tokens\\=0,1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[Balance] Y Asset information / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"accountId\" : 10, \"tokenId\" : 10, \"totalAmount\" : \"100\", \"frozenAmount\" : \"100\" } ] } Status code Value Description 100000 Unknown error 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model Balance Asset information Field Type Required Description Example accountId integer Y Account ID 10 tokenId integer Y Token ID 10 totalAmount string Y Amount of the asset \"100\" frozenAmount string Y Balance that has been locked by orders or pending withdrawals on exchange \"100\" "},"dex_apis/getUserDeposits.html":{"url":"dex_apis/getUserDeposits.html","title":"Get user deposit history","keywords":"","body":"Get user deposit history Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/user/deposits Summary Returns a list of deposit records for the given user. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 start integer N Start time in millisecondsDefault : 0L 1578558098000 end integer N End time in millisecondsDefault : 0L 1578558098000 allType boolean N True to include user account registration and password reset records \"false\" status string N Comma separated status valuesAllowable : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer N Number of records to return 50 fromHash string N Pagination of data to return records earlier than the requested hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" tokenSymbol string N Token to filter. If you want to return deposit records for all tokens, omit this parameter \"ETH\" offset integer N Number of records to skipDefault : 0L 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/deposits?accountId=1&start=1578558098000&end=1578558098000&allType=false&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=ETH&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/deposits\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&allType\\=false\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=ETH\\&offset\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data DepositDataList N TxDataList / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100, \"updatedAt\" : 1578572292000 } ] } } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model DepositDataList DepositDataList Field Type Required Description Example totalNum integer Y Total number of records found 1 transactions List[DepositData] Y List of DepositRecord / DepositData Response data Field Type Required Description Example id integer Y Unique id 1 symbol string Y Token symbol \"LRC\" amount string Y Amount requested by the user \"1000000000000000000\" txHash string Y Transaction hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string Y User transaction type \"1000000000000000\" status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string Y Progress \"100%\" timestamp integer Y Create time 1578572292000 depositType string Y Deposit typeAllowable : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] \"DEPOSIT\" blockNum integer Y Block height 100 updatedAt integer Y Update time 1578572292000 "},"dex_apis/getUserWithdrawals.html":{"url":"dex_apis/getUserWithdrawals.html","title":"Get user onchain withdrawal history","keywords":"","body":"Get user onchain withdrawal history Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/user/withdrawals Summary Get user onchain withdrawal history. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 start integer N Start time in millisecondsDefault : 0L 1578558098000 end integer N End time in millisecondsDefault : 0L 1578558098000 status string N Comma separated status valuesAllowable : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer N Number of records to return 50 fromHash string N Pagination of data to return records earlier than the requested hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" tokenSymbol string N Token to filter. If you want to return deposit records for all tokens, omit this parameter \"LRC\" offset integer N Number of records to skipDefault : 0L 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/withdrawals?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=LRC&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/withdrawals\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=LRC\\&offset\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data OnchainWithdrawalDataList N TxDataList / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000, \"distributeHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" } ] } } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model OnchainWithdrawalDataList OnchainWithdrawalDataList Field Type Required Description Example totalNum integer Y Total number of records found 1 transactions List[OnchainWithdrawalData] Y List of OnchainWithdrawalRecord / OnchainWithdrawalData Response data Field Type Required Description Example id integer Y Unique id 1 symbol string Y Token symbol \"LRC\" amount string Y Amount requested by the user \"1000000000000000000\" realAmount string Y Actual amount processed \"1000000000000000000\" txHash string Y Transaction hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string Y User transaction type \"1000000000000000\" status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string Y Progress \"100%\" timestamp integer Y Create time 1578572292000 blockNum integer Y Block height 100 updatedAt integer Y Update time 1578572292000 distributeHash string Y Distribute Hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" "},"dex_apis/getUserTrades.html":{"url":"dex_apis/getUserTrades.html","title":"Get user trade history","keywords":"","body":"Get user trade history Rate limit: 5 every second API Overview HTTP method GET Path /api/v2/user/trades Summary Get user trade history. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 orderHash string N If a value is provided, only returns the trades associated with the given order \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" offset integer N Number of records to skip 1 limit integer N Number of records to return 50 fromId integer N Pagination of data to return records earlier than the requested id 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/trades?accountId=1&orderHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1&limit=50&fromId=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/trades\\?accountId\\=1\\&orderHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1\\&limit\\=50\\&fromId\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data TradeList N A list of trades / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 100, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } } Status code Value Description 100000 Unknown error 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model TradeList A list of trades Field Type Required Description Example totalNum integer Y Total number of tradings 100 trades List[List[string]] Y List of trades records, each trade record in the order of the array is the trade time, record id, buying and selling direction, volume, price, market and fees \"[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]\" "},"websocket/overview.html":{"url":"websocket/overview.html","title":"WebSocket API","keywords":"","body":"WebSocket API Base URL wss://ws.loopring.io/v2/ws Subscription Clients can send JSON to subscribe to multiple topics: { \"op\":\"sub\", \"sequence\": 10000, \"apiKey\": \".....\", \"unsubscribeAll\": true, \"topics\": [ { \"topic\": \"account\" }, { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, { \"topic\": \"order\", \"market\": \"LRC-USDT\" }, { \"topic:\": \"orderbook\", \"market\": \"LRC-ETH\" }, { \"topic:\": \"orderbook\", \"market\": \"LRC-USDT\", \"count\": 20, \"snapshot\": true } ] }, In one subscription request, if at least one topic requires the ApiKey, then the apiKey filed is required; In one subscription request, the same topic configuration can only occur once; In one subscription request, if there are any configuration errors, the entire subscription request fails; If unsubscribeAll is true, all previous subscriptions will be canceled; If sequence is provided, the relayer will use the same sequence number in its response. Unsubscription Clients can send JSON to unsubscribe from multiple topics: { \"op\":\"unSub\", \"sequence\": 10000, \"apiKey\": \".....\", \"unsubscribeAll\": false, \"topics\": [ { \"topic\": \"account\", }, { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, { \"topic\": \"order\", \"market\": \"LRC-USDT\" }, { \"topic:\": \"orderbook\", \"unsubscribeAll\":true } ] }, In one unsubscription request, if at least one topic requires the ApiKey, then the apiKey filed is required; In one unsubscription request, the same topic configuration can only occur once; In one unsubscription request, if there are any configuration errors, the entire unsubscription request fails; If the top-level unsubscribeAll is true, all previous subscriptions will be canceled; if the per-topic unsubscribeAll is true, then all subscriptions to that topic will be canceled; If sequence is provided, the relayer will use the same sequence number in its response. Heartbeat After a WebSocket connection is established, the relay will send a \"ping\" message to the client for heartbeat detection every 30 seconds. If the client does not reply with a \"pong\" message within 2 minutes, the relay will disconnect. If the number of \"pong\" messages exceeds the number of \"ping\" messages, the relay will also disconnect. Response Field Type Required Note op string Y \"sub\" or \"unSub\" sequence integer N A client-side sequence number topics JSON Y Topics and their configurations result Result Y Subscription result Result Field Type Required Note status string Y Status code error Error N Error Error Field Type Required Note code integer Y Value message string Y Error message Status code Value Note 104100 Topic missing 104101 Invalid op code 104102 Invalid topic 104103 Duplicate topic configs 104104 Missing ApiKey 104105 ApiKey mismatched 104112 Invalid ApiKey 104113 Subscription not found 104114 Invalid ApiKey (user not found) 104115 Invalid topic config Examples A successful subscription： { \"op\": \"sub\", \"sequence\": 10000, \"topics\": [ { \"topic:\": \"orderbook\", \"market\": \"LRC-ETH\" } ], \"result\": { \"status\": \"ok\" } } A failed subscription： { \"op\": \"sub\", \"sequence\": 10000, \"topics\": [ { \"topic:\": \"candlestick\", \"market\": \"LRC-ETH\", \"count\": 10 } ], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104106, \"message\": \"receive illegal arg for candlestick:lrc-eth\" } } } Another failed subscription： { \"op\": \"sub\", \"sequence\": 10000, \"topics\": [], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104115, \"message\": \"unexpected msg:xxx\" } } } "},"websocket/account.html":{"url":"websocket/account.html","title":"Account Notification","keywords":"","body":"Account Notification Subscribe to this topic to receive notifications about user balance update. Rules Topic name: account ApiKey requred: Yes Parameters This topic doesn't support any parameter. Notification example { \"topic\": { \"topic:\": \"account\" }, \"ts\":1584717910000, \"data\": { \"accountId\":1, \"totalAmount\": \"24439253519655\", \"tokenId\": 2, \"amountLocked\": \"0\" } } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data Balance Y User's new balances Balance Field Type Required Note accountId integer Y Account ID tokenId integer Y Token ID totalAmount string Y Total token balance amountLocked string Y Token balance locked by orders "},"websocket/order.html":{"url":"websocket/order.html","title":"Order Notification","keywords":"","body":"Order Notification Subscribe to this topic to receive notifications about order updates for specific trading pairs. Rules Topic name: order ApiKey requred: Yes Parameters Parameter Required Note market Y Trading pair Status code Value Note 104110 Invalid topic or parameters Notification example { \"topic\": { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, \"ts\":1565844328, \"data\": { \"hash\": \"11212\", \"clientOrderId\": \"myOrder\", \"size\": \"500000000\", \"volume\": \"210000000\", \"price\": \"0.000004\", \"filledSize\": \"30000000\", \"filledVolume\": \"100000\", \"filledFee\": \"1000000\", \"status\": \"processing\", \"createdAt\": \"1494900087\", \"validSince\": \"1494900087\", \"validUntil\": \"1495900087\", \"side\": \"buy\", \"market\": \"LRC-ETH\" } } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data Order Y The order Order Field Type Required Note hash string Y Order hash clientOrderId string Y Client defined order ID size string Y Amount (quantity of base token) volume string Y Total (quantity of quote token) price string Y Order price filledSize string Y Filled amount of base token filledVolume string Y Filled amount of quote token filledFee string Y Fees paid status string Y Order status createdAt integer Y Order creation timestamp updateAt integer Y Order last update timestamp side string Y Buy or sell market string Y Trading pair Order status Value Note processing Active (aka Open, may be partially filled) processed Fully filled cancelling Being canceled cancelled Canceled expired Expired waiting Pending active "},"websocket/orderbook.html":{"url":"websocket/orderbook.html","title":"Orderbook Notification","keywords":"","body":"Orderbook Notification Subscribe to this topic to receive notifications about orderbook updates for specific trading pairs. Rules Topic name: orderbook ApiKey requred: No Parameters Parameter Required Note market Y Trading pair level Y Price aggregation level count Y Number of bids/ask price slots, count can not be larger than 50, and only take effect when snapshot is true. snapshot N Default to false. If true, the client will receive full notification with up to count bid/ask price slots when at least one slot has update. Status code Value Note 104107 Invalid topic or parameters Notification example { \"topic\": { \"topic:\": \"orderbook\", \"market\": \"LRC-USDT\", \"count\": 20, \"snapshot\": true }, \"ts\": 1584717910000, \"startVersion\": 1212121, \"endVersion\": \"1212123\", \"data\": { \"bids\": [ [ \"295.97\", //price \"456781000000000\", //size \"3015000000000\", //volume \"4\" //count ] ], \"asks\": [ [ \"298.97\", \"456781000000000000\", \"301500000000000\", \"2\" ] ] } } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) startVersion integer Y Previous version number endVersion integer Y Updated versionnumber data OrderBook Y The orderbook OrderBook Field Type Required Note bids List[List[string]] Y PriceSlot array for bids asks List[List[string]] Y PriceSlot array for asks PriceSlot Index Type Required Note 1 string Y Price 2 string Y Amount (quantity of base token) 3 string Y Total (quantity of quote token) 4 string Y Number of orders at this price Note that amount and total are the curent values, not the delta between the current and the previous values. "},"websocket/trade.html":{"url":"websocket/trade.html","title":"Trade Notification","keywords":"","body":"Trade Notification Subscribe to this topic to receive notifications about bew trades for specific trading pairs. Rules Topic name: trade ApiKey requred: No Parameters Parameter Required Note market Y Trading pair Status code Value Note 104109 Invalid topic or parameters Notification example { \"topic\": { \"topic\": \"trade\", \"market\": \"LRC-ETH\" }, \"ts\": 1584717910000, \"data\": [ [ \"1584717910000\", //timestamp \"123456789\", //tradeId \"buy\", //side \"500000\", //size \"0.0008\", //price \"100\" //fee ] ] } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data List[List[string]] Y Trade array list Trade Index Type Required Note 1 integer Y Trade timestamp 2 integer Y Fill sequence number 3 string Y Taker's side (buy or sell) 4 string Y Filled amount of base token 5 string Y Fill price 6 string Y Fee paid in base token "},"websocket/ticker.html":{"url":"websocket/ticker.html","title":"Ticker Notification","keywords":"","body":"Ticker Notification Subscribe to this topic to receive notifications about ticker updates for specific trading pairs. Rules Topic name: ticker ApiKey requred: No Parameters Parameter Required Note market Y Trading pair Status code Value Note 104111 Invalid topic or parameters Notification example { \"topic\": { \"topic\": \"ticker\", \"market\": \"LRC-ETH\" }, \"ts\": 1584717910000, \"data\": [ \"LRC-ETH\", //market \"1584717910000\", //timestamp \"5000000\", //size \"1000\", //volume \"0.0002\", //open \"0.00025\", //high \"0.0002\", //low \"0.00025\", //close \"5000\", //count \"0.00026\", //bid \"0.00027\" //ask ] } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data List[string] Y Ticker array Ticker Index Type Required Note 1 string Y Trading pair 2 integer Y Ticker update timestamp 3 string Y Amount (quantity of base token) 4 string Y Total (quantity of quote token) 5 string Y Open price 6 string Y Highest price 7 string Y Lowest price 8 string Y Latest price 9 integer Y Number of trades 10 string Y Highest bid price 11 string Y Lowest ask price "},"websocket/candlestick.html":{"url":"websocket/candlestick.html","title":"Candlestick Notification","keywords":"","body":"Candlestick Notification Subscribe to this topic to receive notifications about candlestick updates for specific trading pairs. Rules Topic name: candlestick ApiKey requred: No Parameters Parameter Required Note market Y Trading pair interval Y Time interval Time intervals Value Note 1min 1 minute 5min 5 minutes 15min 15 minutes 30min 30 minutes 1hr 1 hour 2hr 2 hours 4hr 4 hours 12hr 12 hours 1d 1 day 1w 1 week Status code Value Note 104106 Invalid topic or parameters Notification example { \"topic\": { \"topic\": \"candlestick\", \"interval\": \"2hr\" }, \"ts\":1584717910000, \"data\": [ \"1584717910000\", //open timestamp (ms) \"5000\", //count \"3997.3\", //open \"3998.7\", //close \"4031.9\", //high \"3982.5\", //low \"500000000000000000\", //size \"2617521141385000000\", //volume ] } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data List[string] Y Candlestick array Candlestick Index Type Required Note 1 integer Y Open timestamp 2 integer Y Nubmer of trades 3 string Y Open price 4 string Y Close price 5 string Y Highest price 6 string Y Lowest price 7 string Y Traded amount of Base Tokens (in Wei) 8 string Y Traded amount of quote Tokens (in Wei) "}}