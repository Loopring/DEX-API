{"./":{"url":"./","title":"Loopring","keywords":"","body":"Loopring Loopring Protocol & Loopring Exchange Loopring is the first scalable DEX protocol built with zkRollup for Etheruem. Using Loopring, people can build a high-performance, orderbook-based, decentralized exchanges that do not take custody of users' crypto-assets. Due to the use of zkRollup, a layer-2 scalability solution, Loopring is capable of settling more than 2,000 trades per second on Ethereum 1.0. If you would like to learn more about Loopring's design and technical details, please check out Loopring's official website: https://loopring.org. Loopring Exchange is the first decentralized trading platform built on top of the Loopring protocol. Loopring Exchange is accessible at Loopring.io. The current version of Loopring Exchange is beta1, which uses Loopring version 3.1.1. Loopring Exchange's contract address on Ethereum mainnet is: 0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777. The address has a permanent ENS as beta1.loopringio.eth. Technical Advantages Loopring makes sure nobody can misappropriate users' crypto-assets deposited to an exchange. Even under extreme circumstances, such as an exchange's UI stopped functioning, or the exchange's operators are out of reach, users can still claim their rightful assets by providing valid Merkle proofs that are derivable from data on Ethereum. Loopring does not guarantee the efficiency and fairness of off-chain order-matching. Order-matching is a job for the relayer system, which is a centralized piece of the overall DEX solution. Different exchanges built on the same Loopring protocol can adopt very different relayer solutions and thus provide various quality of services. The Loopring protocol does guarantee that relayers must follow specific rules for trade settlement. We developed Loopring Exchange's relayer system as a closed source project. As of now, it offers a throughput of 200 trades per second.. Overall Architecture The overall architecture of Loopring Exchange is shown below: Some key points you need to know: Loopring Exchange provides APIs to handle user offchain requests, namely order submission and cancellation, and withdrawals. Other user requests, including account registration, password reset, and deposits, must be submitted using Ethereum transactions. These requests are called on-chain requests. Loopring offers a high-performance trading experience similar to centralized exchanges, which mainly benefits from the batch processing capability of the underlying Loopring protocol. Loopring uses Ethereum as a data availability layer and a ZKP verification layer; Loopring does not perform trading related computations on Ethereum. "},"glossary.html":{"url":"glossary.html","title":"Glossary","keywords":"","body":"Glossary DEX Decenralized EXchange. Zero-Knowledge Proofs A method by which one party (the prover) can prove to another party (the verifier) that they know a value x, without conveying any information apart from the fact that they know the value x. source: https://en.wikipedia.org/wiki/Zero-knowledge_proof Relayer Loopring Exchange's backend system that handles order matching and settlement, deposits, withdrawals, and Zero-Knowledge Proof generation, etc. On-chain Requests User requests sent to Loopring Exchange through Ethereum transactions. Off-chain Requests User requests sent to Loopring Exchange using Loopring's APIs. Base Token The target token to trade. For example, in the LRC-ETH trading pair, LRC is referred to as the base token. Quote Token The token to quote price. For example, in the LRC-ETH trading pair, ETH is referred to as the base token. Size The quantity of the base token in an order or a fill. Volume The quantity of the quote token in an order or a fill. EdDSA The signing algorithm used by Loopring to sign off-chain requests. EdDSA is more circuit friendly compared to Ethereum's ECDSA algorithm. "},"basics/orders.html":{"url":"basics/orders.html","title":"Orders","keywords":"","body":"Orders Uni-Directional Order Model Unlike the order models of most centralized exchanges, Loopring uses the Uni-Directional Order Model (UDOM). UDOM represents buy orders and sell orders uniformly with one single data structure. Let's start with a simplified UDOM model to give you a few examples of Loopring's limit price orders (Loopring doesn't support market price orders). In the LRC-ETH trading pair, a sell order that sells 500 LRC at the price of 0.03ETH/LRC can be expressed as: { // LRC-ETH: sell 500 LRC at 0.03ETH/LRC \"tokenS\": \"LRC\", \"tokenB\": \"ETH\", \"amountS\": 500, \"amountB\": 15 // = 500 * 0.03 } The letter S stands for Sell and letter B stands for Buy. a buy order that buys 500 LRC at the price of 0.03ETH/LRC can be expressed as: { // LRC-ETH: buy 500 LRC at 0.03ETH/LRC \"tokenS\": \"ETH\", \"tokenB\": \"LRC\", \"amountS\": 15, // = 500 * 0.03 \"amountB\": 500 } As you may have noticed, UDOM does not specify trading pairs or prices explicitly. However, there is a problem with this simplified model: the match-engine doesn't know when an order should be considered as fully filled. We need to introduce another parameter called buy for this purpose. If buy == true, the match-engine shall check the total fill amount of tokenB against amountB to determine if an order has been fully filled; otherwise, it shall use the total fill amount of tokenS against amountS. With this new field, the above orders will look like the following: { // LRC-ETH: sell 500 LRC at 0.03ETH/LRC \"tokenS\": \"LRC\", \"tokenB\": \"ETH\", \"amountS\": 500, \"amountB\": 15 // = 500 * 0.03, \"buy\": false // check tokenS's fill amount against amountS } { // LRC-ETH: buy 500 LRC at 0.03ETH/LRC \"tokenS\": \"ETH\", \"tokenB\": \"LRC\", \"amountS\": 15, // = 500 * 0.03 \"amountB\": 500, \"buy\": true // check tokenB's fill amount against amountB } Note: If the above sell order is fully filled, the amount of ETH bought may be larger than 15ETH; and if the buy order is fully filled, the ETH paid may be less than 15ETH, which is the impact of the buy parameter on the match engine's behaviors. What is the effect of reversing the buy value in the two orders above? The sell order for the LRC-ETH trading pair becomes a buy order for the ETH-LRC trading pair, and the buy order for the LRC-ETH trading pair becomes a sell order for the ETH-LRC trading pair. It means one Loopring trading pair, such as LRC-ETH, is equivalent to two trading pairs in many centralized exchanges, i.e., LRC-ETH and ETH-LRC. Besides its elegancy and simplicity, Loopring's UDOM also makes it possible to implement much simpler settlement logic in ZKP circuits. Order Structure Loopring's actual order format is a bit more complex. You can use the following JSON to express a limit price order. For details of specific parameters, see Submit Order. newOrder = { \"tokenSId\": 2, // LRC \"tokenBId\": 0, // ETH \"amountS\": \"500000000000000000000\", \"amountB\": \"15000000000000000000\", \"buy\": \"false\", \"exchangeId\": 2, \"accountId\": 1234, \"allOrNone\": \"false\", // Must be \"false\" for now \"maxFeeBips\": 50, \"label\": 211, \"validSince\": 1582094327, \"validUntil\": 1587278341, \"orderId\": 5, \"hash\": \"14504358714580556901944011952143357684927684879578923674101657902115012783290\", \"signatureRx\": \"15179969700843231746888635151106024191752286977677731880613780154804077177446\", \"signatureRy\": \"8103765835373541952843207933665617916816772340145691265012430975846006955894\", \"signatureS\" : \"4462707474665244243174020779004308974607763640730341744048308145656189589982\", \"clientOrderId\": \"Test01\", \"channelId\": \"channel1::maker1\" } Next, we will further explain some of these data fields for you. Tokens and Amounts In an actual order, tokens are not expressed by their names or ERC20 addresses, but by their token ID, the index at which the tokens have been registered in the Loopring Exchange's smart contract. Note that the same ERC20 token may have different IDs on different exchanges built on top of the same Loopring protocol. In the above example, we assume that the IDs of LRC and ETH are 2 and 0, respectively. You can query token's information using Token Information Supported by the Exchange. The amounts of tokens are in their smallest unit as strings. Taking LRC as an example, its decimals is 18, so 1.0LRC should be expressed as \" 1000000000000000000 \" (1 followed by 18 0s). Each token's decimals is coded in its smart contract; the decimals of ETH is 18. The types of buy andallOrNone in the order are strings rather than boolean. Trading Fee maxFeeBips = 50 specifies that the maximum trading fee the order is willing to pay to the exchange is 0.5% (the unit of maxFeeBips is 0.01%). Loopring charges trading fees in tokenB as a percentage of the token bought from a trade. Assuming that the order above has bought \"10000000000000000000\" ETH (10ETH), the actual trading fee will not exceed 0.05ETH (\"10000000000000000000\"* 0.5%). Loopring's relayer offers different trading fee discounts based on the user VIP tiers. The bottom line is that the actual trading fees can never exceed the maximum orders are willing to pay, specified by maxFeeBips. When you place an order, you must set maxFeeBips to be no less than the trading fee rate in the specified trading pair for your account (based on your VIP level). This information can be obtained by querying /api/v2/user/feeRates. If you trust Loopring Exchange, you can also set maxFeeBips to 63, the maximum value allowed by the Loopring protocol. Timestamps validSince specifies the order's effective timestamp, andvalidUntil specifies the order expiration timestamp, both in seconds since epoch. When the relayer receives an order, it will verify these two timestamps in the order; Loopring's ZKP circuit code will also check these two timestamps during settlement. Due to the delay of zkRollup batch processing, and the possible deviation of the time on Ethereum blockchain and our servers, we strongly recommend that validSince be set to the current time,and the window between validSince andvalidUntil is no shorter than 1 week; otherwise, your order may be rejected or cancelled by the relayer. You can take advantage of the validUntil timestamp to avoid unnecessary proactive cancellation of orders. Fill Status and Order ID Loopring 3.1.1 reserves 16384 (2142 ^ {14} 2​14​​) slots for each token to track the aggregated fill amount of each order that sells the token. If an order's ID is N, then the slot used is N % 16384. In other words, if the slot number is m, it will be used to track orders with the following IDs: m, m + 16384, m + 16384 * 2, ... and so on. Each slot also remembers the ID of the current order being tracked (the initial order ID is the slot number), and subsequent orders with smaller IDs will be rejected. Suppose that slot 1 is tracking order 32769 (1 + 16384 * 2). When the user places orders with ID of 1 or16385, the server will reject these orders and return errors. If you have more than 16384 active orders for a trading pair, you need to cancel some of them to release slots before you can submit new orders. The maximum value of order ID is 1048576 (2202^{20}2​20​​). After reaching this ID limit, you can no longer place sell orders for the corresponding token. For most users, this is not a big problem; but for trading bots, we recommend registering multiple accounts to sell different tokens. Loopring 3.5 will remove the limit of the maximum order ID, but still retain the slot design and configuration. It is worth noting that all sell orders from the same account in multiple trading pairs with the same base token (such as LRC-ETH and LRC-USDT) share the same 16384 slots. If you do not plan to maintain the allocation of order IDs and slots between trading pairs on the client-side, you can register multiple accounts, as recommended above. We know the inconvenience caused by the slot design. However, this is a design decision made in the Loopring protocol itself. We hope future technological advances can remove this limitation. Other Fields exchangeId: Loopring Exchange's unique numeric ID in the Looping protocol, currently has value 2 and is constant. This ID will change once we upgrade to a new protocol version. accountId: User's account ID. allOrNone: \" true \" if the order must be fully filled or canceled. This parameter is not supported yet by our matching engine, so please set it to \"false\" for now. label: Used to label orders at the protocol layer but has no impact on trading. Because users will sign this field as part of the order, so it's more trustworthy for different parties to use, for example, to calculate profit-sharing. clientOrderId: Used to label orders by the client without user awareness. It also has no impact on trading. channelId: Used to lable order's channel. For more details, please refer to Submit Order. "},"basics/key_mgmt.html":{"url":"basics/key_mgmt.html","title":"Key Management","keywords":"","body":"Key Management Before using Loopring's API, you need to know how to obtain and change your account's EdDSA key pair and ApiKey. When invoking the API, the ApiKey needs to be passed to the relayer as an HTTP header value; the EdDSA secret key is used to sign the request on the client-side digitally. Obtain EdDSA key pair and ApiKey First of all, you need to register an account on Loopring Exchange (Loopring.io). Then you can use the \"Export Account\" function to export account-related information as a JSON object. The JSON object includes your EdDSA key pair and your account's ApiKey. The exported JSON should look like the following: { \"exchangeName\": \"LoopringDEX: Beta 1\", \"exchangeAddress\": \"0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777\", \"exchangeId\": 2, \"accountAddress\": \"0xe9577b420d96adfc97ff1e9e0557f8c73d7247fe\", \"accountId\": 12345, \"apiKey\": \"qXJpfTKrF0O5jIDPYIu7YkVgLFbvm5uIgPKBmHP2kBpcdKZjgfFKhIlE8evo9lKa\", \"publicKeyX\": \"20230748339558541226323870947000799026059173889124399831342481595010628000129\", \"publicKeyY\": \"4980637490279511620100245514492532318691849019959343538108355525575855311214\", \"privateKey\": \"1242957328515765470505817310060337585626176314364086438653683782645761561015\" } The first four fields are constants to the current version of the Loopring Exchange; other fields are about your account. Among them, publicKeyX andpublicKeyY are collectively the EdDSA public key of your account, and privateKey is the EdDSA private key. Please keep your EdDSA key pair and ApiKey strictly confidential. If you leak these information, your assets will be at risk. In any case, Loopring Exchange's UI and its API will never ask you for your EdDSA private key. Change EdDSA key pair and ApiKey You can change your EdDSA key pair through the \"Change Password\" function on Loopring Exchange. Because changing the password involves an Ethereum transaction and zero-knowledge proof generation, it will take a while for your new EdDSA key pair to becomes effective. You can get account information through the /api/v2/account API. If thefrozen field is true, it means that your account is in the processing of applying the new EdDSA key pair, during such a period, neither your previous EdDSA key pair nor your new EdDSA key pair can be used to sign requests. When you change your password on Loopring.io, your ApiKey will also be automatically updated. You can also change your ApiKey using API. EdDSA Generation The Loopring protocol does not specify how to generate or manage EdDSA key pairs. Loopring Exchange uses each account's Ethereum address and trading password to derive the EdDSA key pair. As Ethereum addresses are public information, the strength of your trading password is thus critical to the security of your trading assets. If you use Loopring Exchange's website to set the trading password, your password should be strong enough not to worry about being brute-forced; otherwise, you need to be careful not to use a simple password. Unlike a centralized exchange, brute-forcing your EdDSA key does not have to go through Loopring relayer - your EdDSA public key is stored on Ethereum, and hackers can read it out for brute force comparison. The algorithm for compute the EdDSA key pair is as follows (Python): seed = keccakHash('LOOPRING' + address.toLowerCase() + keccakHash(password)) keyPair = myEdDSAGenerator.generate(seed) where keccakHash returns the hex string of the kecca256 result. ApiKey Generation ApiKey is a globally unique string randomly generated by the Loopring relayer and bound to your account when your account is registered. "},"basics/signing.html":{"url":"basics/signing.html","title":"Request Signing","keywords":"","body":"Request Signing The Loopring API involves two different categories of signatures. One is the common API request signature, which is used to verify that the API invocations have been authenticated; the other is Loopring Protocol's off-chain request signature, which is used by Loopring to verify that off-chain requests have been authenticated. We will explain each of these two categories separately. Common API Request Signatures 签名生成算法（伪代码） 初始化空字符串signatureBase 将请求方法字符串追加到signatureBase 将“＆”字符附加到signatureBase 将percent-encoded的请求路径（不是查询字符串）追加到signatureBase 将“＆”字符附加到signatureBase 初始化空字符串parameterString 对于GET / DELETE 数据 将请求里的参数按键的字典顺序排序，得到排过序后的键/值对 将percent-encoded的键附加到parameterString 将“=”字符附加到parameterString 将percent-encoded的值附加到parameterString 如果有更多的键/值对，请在parameterString后面附加“＆”字符 对于POST / PUT 数据 将发送请求的body json字符串附加到parameterString 将percent-encoded的parameterString附加到signatureBase 计算signatureBase的SHA-256哈希值hash 对hash用账号的私钥privateKey做签名，得到三个值：Rx,Ry, 和S 将Rx,Ry, 和S通过逗号分隔拼接成最终签名字符串：${Rx},${Ry},${S} 获取请求方法和URL 要生成签名，请先确定HTTP method和请求的base URL。loopring.io REST API使用四种请求方法： GET POST PUT DELETE Http method GET base URL是请求指向的URL，减去任何查询字符串或哈希参数。 请始终对loopring.io API使用\"https://\"协议。 Base URL: https://api.loopring.io/api/v2/apiKey 获取请求参数 接下来，从query string中获取请求参数(用于GET和POST请求)和body(POST、PUT)。 在HTTP请求中，参数是url编码的，但是您应该收集原始值。在上面的原始HTTP请求中，参数如下: 参数名 参数值 publicKeyX 13375450901292179417154974849571793069911517354720397125027633242680470075859 publicKeyY 13375450901292179417154974849571793069911517354720397125027633242680470075859 accountId 1 这些值需要进行编码和拼接: 按键按字典顺序对参数列表进行排序 对于每个键/值对: percent-encoded参数名并将其附加到输出字符串中 将' = '字符附加到输出字符串 percent-encoded参数值并将其附加到输出字符串中 如果还剩下更多的键/值对，则将'&'字符附加到输出字符串中 Parameter string: accountId=1&publicKeyX=13375450901292179417154974849571793069911517354720397125027633242680470075859&publicKeyY=13375450901292179417154974849571793069911517354720397125027633242680470075859 生成 signature base string signature base string是我们按照以下顺序将之前生成的三个字符串连接起来的结果:HTTP method、percent-encoded的base URL和percent-encoded的parameter string，在相邻组件之间用'&'字符连接。 Signature base string: GET&https%3A%2F%2Fapi.loopring.io%2Fapi%2Fv2%2FapiKey&accountId%3D1%26publicKeyX%3D13375450901292179417154974849571793069911517354720397125027633242680470075859%26publicKeyY%3D13375450901292179417154974849571793069911517354720397125027633242680470075859 请注意，每一部分都应该是经过percent-encoded的，因此在生成的签名基字符串中应该正好有两个'&'字符。 Off-chain Request Signatures Loopring 3.1.1 supports two types of off-chain requests: orders and off-chain withdrawals. Since these two off-chain requests will result in modifications to the exchange's state Merkel tree, when you submit these two types of requests using Loopring's API, you must provide special signatures required by the Loopring protocol. Loopring 3.1.1 also supports a third type of off-chain requests: order cancellation, but it will be deprecated in the up-coming 3.5 version. Therefore, Loopring Exchange will not support this type of off-chain requests. The off-chain request signature includes the following steps: Regularize the request r (JSON) to generate a strings. Calculate the Poseidon hash of s as h(see the following section). Sign h with the account's EdDSA private keyprivateKey and get three values: Rx,Ry, and S (see the following section). Convert h,Rx, Ry, andS into strings and merge them into r (please note the name change). { ..., \"hash\": ..., \"signatureRx\": \"16367919966553849834214288740952929086694704883595501207054796240908626703398\", \"signatureRy\": \"5706650945525714138019517276433581394702490352313697178959212750249847059862\", \"signatureS\": \"410675649229327911665390972834008845981102813589085982164606483611508480748\" } Signing Orders You need to seralized specific fields of an order into an integer array, then calculate the Poseidon hash of the array, and then sign the hash with your EdDSA private key. The rules for serialization of orders, hashing, and signature methods must strictly follow Loopring's Specification. Below we use Python code as a demo: def sign_int_array(privateKey, serialized, t): PoseidonHashParams = poseidon_params( SNARK_SCALAR_FIELD, t, 6, 53, b'poseidon', 5, security_target=128 ) hash = poseidon(serialized, PoseidonHashParams) signedMessage = PoseidonEdDSA.sign(hash, FQ(int(privateKey))) return ({ \"hash\": str(hash), \"signatureRx\": str(signedMessage.sig.R.x), \"signatureRy\": str(signedMessage.sig.R.y), \"signatureS\": str(signedMessage.sig.s), }) def serialize_order(order): return [ int(order[\"exchangeId\"]), int(order[\"orderId\"]), int(order[\"accountId\"]), int(order[\"tokenSId\"]), int(order[\"tokenBId\"]), int(order[\"amountS\"]), int(order[\"amountB\"]), int(order[\"allOrNone\"]==\"true\"), int(order[\"validSince\"]), int(order[\"validUntil\"]), int(order[\"maxFeeBips\"]), int(order[\"buy\"]==\"true\"), int(order[\"label\"]) ] def sign_order(privateKey, order): serialized = serialize_order(order) signed = sign_int_array(serialized, 14 /* Pay attention to this t value */) order.update(signed) If you don't use the ethsnarks library to calculate Poseidon hash, please pay attention to the values of the Poseidon parameters to ensure that they are entirely consistent with those used by Loopring. Otherwise, signature verification will fail. Signing Off-chain Withdrawals The current Loopring API does not yet support off-chain withdrawal requests. But we will add it soon. The following is an example of off-chain withdrawals: { \"exchangeId\": 2, \"accountId\":100, \"tokenId\": 0, \"amount\": 1000000000000000000, \"feeTokenId\": \"2\", \"amountFee\": 20000000000000000000, \"label\": 0, \"nonce\": 10 } where nonce must start from 0 and increment by 1. The code for signing it in Python is as follows: def serialize_offchain_withdrawal(withdrawal): return [ int(withdrawal['exchangeId']), int(withdrawal['accountId']), int(withdrawal['tokenId']), int(withdrawal['amount']), int(withdrawal['feeTokenId']), int(withdrawal['amountFee']), int(withdrawal['label']), int(withdrawal['nonce']) ] def sign_offchain_withdrawal(privateKey, offchainWithdrawal): serialized = serialize_offchain_withdrawal(offchainWithdrawal) signed = sign_int_array(serialized, 9 /* Pay attention to this t value */) offchainWithdrawal.update(signed) References You can learn more about the Poseidon hash and EdDSA signature through the following literature and github repositories. ethsnarks: https://github.com/HarryR/ethsnarks.git SHA256 Hash: https://en.wikipedia.org/wiki/SHA-2 EdDSA: https://en.wikipedia.org/wiki/EdDSA Poseidon Hash: https://www.poseidon-hash.info/ You can also refer to our example code for more details. "},"basics/examples.html":{"url":"basics/examples.html","title":"Example Code","keywords":"","body":"Example Code https://github.com/Loopring/hello_loopring contains some simple examples to help you quickly get started using the Loopring APIs. Among them: hash_and_sign/: Use Python and the ethsnarks to calculate the Poseidon hash of any strings; sign and verify EdDSA signatures. trading/: Submit, read, and cancel orders. offchain_withdrawal/: Signing and submit off-chain withdrawal requests (coming soon). We will continue to improve and open source more example code in the future. Stay tuned. "},"basics/contracts.html":{"url":"basics/contracts.html","title":"Smart Contracts","keywords":"","body":"Smart Contracts The following is a list of smart contract addresses for the Loopring Protocol and Loopring Exchange on Ethereum mainnet. LRC LRC Address: 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD (lrctoken.eth) Loopring Protocol (3.1.1) UniversalRegistry: 0x36F568EF555df25be4B6e15D16994F3A8374214E LoopringV3: 0x18dd1dda037B009F7C1024dDdD58e4Fe9F960ac7 ExchangeV3: 0x730Ea81C982939931d7514CC3Fbc22eAf7D372ec ProtocolFeeVaultAddress: 0x4b89f8996892d137c3dE1312d1dD4E4F4fFcA171 (feevault.lrctoken.eth) BlockVerifier: 0x40598B41cc17a7E56dd72F415E8223aaCCA94cF7 (blockverifier.lrctoken.eth) DowntimeCostCalculator: 0x873685f032c6Aa1572766401f3198a1f09A5C221 UniswapTokenSellerAddress: 0xdd5102f902b0892D1bbf2D2d0fCBE11ccEA1D537 UserStakingPoolAddress: 0xF4662bB1C4831fD411a95b8050B3A5998d8A4A5b (stakingpool.lrctoken.eth) ChainlinkTokenPriceProvider: 0x3B740FeE3ED82FA676286938E124A8Bb74553f93 MovingAveragePriceProvider: 0x388110217e4d194d501BB52c3AB28dC709EB450d Open Sourced The code of the Loopring Protocol is entirely open-sourced, including its design document, smart contracts, and ZKP circuits. If you have any questions, please email the Loopring Foundation at foundation@loopirng.org. Loopring Exchange (beta1) exchangeName: LoopringDEX: Beta 1 exchangeId: 2 exchangeAddress: 0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777 owner: 0x4374D3d032B3c96785094ec9f384f07077792768 operator: 0x4374D3d032B3c96785094ec9f384f07077792768 "},"rest_apis.html":{"url":"rest_apis.html","title":"REST APIs","keywords":"","body":"REST APIs This article describes some common parts for Loopring's REST APIs. Base URL https://api.loopring.io Rate Limit Each API has its rate limit settings. The relayer will reject all API invocations beyond this limit, with status code 429. Stop excessive API invocations to avoid your account from being suspended. HTTP Headers X-API-KEY All APIs except querying user ApiKey need to specify the X-API-KEY HTTP header with the user's ApiKey as the value. X-API-SIG The following API needs to specify the X-API-SIG HTTP header to provide an EdDSA signature: Query ApiKey Cancel order Change ApiKey Setting HTTP Headers To set the HTTP headers using Python, use the code below: def init_request_session(apiKey, sig): session = requests.session() session.headers.update({ 'Accept': 'application/json', 'X-API-KEY': apiKey, 'X-API-SIG': sig, }) return session Response Except for network errors, all APIs will return the 200 HTTP status code and a JSON object representing the actual API result. The JSON contains a resultInfo structure that has a code field for application-specific status code, and a data JSON object that represents API-specific response. Response Field Type Required Description Example resultInfo ResultInfo Y Result of API invocation - ResultInfo Struct Field Type Required Description Example code integer Y Status code 0 message string Y Return message. This is used for debug only. Do not show to users \"SUCCESS\" Status code Status code Description 0 Success 100000 Unknown internal error 100001 Invalid parameter 100002 Request timeout 100202 Update fail 100203 Internal persistence error 100204 Duplicate request "},"dex_apis/getTimestamp.html":{"url":"dex_apis/getTimestamp.html","title":"Query the servers current time","keywords":"","body":"Query the servers current time Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/timestamp Function Returns the current server time, in milliseconds API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/timestamp HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/timestamp Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data integer N The returned servers current time 1584683483382 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : 1584683483382 } Status code Status code Description 100000 Unknown error Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getApiKey.html":{"url":"dex_apis/getApiKey.html","title":"Query users ApiKey","keywords":"","body":"Query users ApiKey Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/apiKey Function The system has generated an ApiKey when the user registered, user can query the current ApiKey by this method API description Header Field Type Required Description Example X-API-SIG string Y Signature \"13834524429315716527072245289201098743367448928828941694333300773464291931668,19252438164424980901323496067579767457298262609633182654968500317796010794338,1296502169918579172046019624886776672473813683541532008712357317204831986826\" Request parameters Field Type Required Description Example accountId integer Y AccountID 10 pubKeyX string Y public key X 123 pubKeyY string Y public key X 456 Request example HTTPCURLGET https://api.loopring.io/api/v2/apiKey?accountId=10&pubKeyX=123&pubKeyY=456 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-SIG: dkkfinfasdfcurl -H \"X-API-SIG:dkkfinfasdf\" https://api.loopring.io/api/v2/apiKey\\?accountId\\=10\\&pubKeyX\\=123\\&pubKeyY\\=456 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string Y ApiKey 6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } Status code Status code Description 100000 Unknown error 101002 The user was not found 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found 104004 No signature information provided 104005 Wrong signature information Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/applyApiKey.html":{"url":"dex_apis/applyApiKey.html","title":"Update users ApiKey","keywords":"","body":"Update users ApiKey Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method POST Visit path /api/v2/apiKey Function If the user wants to change the ApiKey, call this interface, put the last used ApiKey in the header, and the new ApiKey will be returned. After each call to getApiKey, the current ApiKey is returned. API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y AccountID 1 publicKeyX string Y public key X 13375450901292179417154974849571793069911517354720397125027633242680470075859 publicKeyY string Y public key Y 13375450901292179417154974849571793069911517354720397125027633242680470075859 Request example HTTPCURLPOST https://api.loopring.io/api/v2/apiKey HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"accountId\" : 1, \"publicKeyX\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"publicKeyY\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/apiKey -d \\ '{ \"accountId\" : 1, \"publicKeyX\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"publicKeyY\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" }' Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string Y ApiKey 6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } Status code Status code Description 100000 Unknown error 101002 The user was not found 100001 Invalid argument 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found 104004 No signature information provided 104005 Wrong signature information Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getNextOrderId.html":{"url":"dex_apis/getNextOrderId.html","title":"Get the next valid OrderId","keywords":"","body":"Get the next valid OrderId Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/orderId Function Get the next valid OrderId API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 tokenSId integer Y The ID of The Token to be sold 0 Request example HTTPCURLGET https://api.loopring.io/api/v2/orderId?accountId=1&tokenSId=0 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orderId\\?accountId\\=1\\&tokenSId\\=0 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Order ID 108 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"108\" } Status code Status code Description 100000 Unknown error 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getOrderDetail.html":{"url":"dex_apis/getOrderDetail.html","title":"Get order details","keywords":"","body":"Get order details Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/order Function Get order details according to specified hash API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account id 1 orderHash string Y Order hash 13375450901292179417154974849571793069911517354720397125027633242680470075859 Request example HTTPCURLGET https://api.loopring.io/api/v2/order?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/order\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data OrderDetail N Response details of order / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"size\" : \"8210000000000001024\", \"volume\" : \"163182534700000032\", \"price\" : \"0.01987608\", \"filledSize\" : \"0\", \"filledVolume\" : \"0\", \"filledFee\" : \"0\", \"status\" : \"processing\", \"validSince\" : 1583929591, \"validUntil\" : 1586521591, \"createdAt\" : 1583933191494, \"side\" : \"SELL\", \"market\" : \"LRC-ETH\" } } Status code Status code Description 100000 Unknown error 107001 User ID cannot be empty 107002 Order Hash cannot be empty 107003 Order does not exist 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS OrderDetail Response details of order Field Type Required Description Example hash string Y Order hash 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf clientOrderId string Y Client order unique id 200310143135081332 size string Y Order quantity 8210000000000001024 volume string Y Order amount 163182534700000032 price string Y Deal price 0.01987608 filledSize string Y Volume 0 filledVolume string Y Turnover 0 filledFee string Y Fee 0 status string Y Order statusAllowable : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] processing validSince integer Y Order effective time from 1583929591 validUntil integer Y Order effective time to 1586521591 createdAt integer Y Order creation time 1583933191494 side string Y Sell or buyAllowable : ['SELL', 'BUY'] SELL market string Y Market LRC-ETH "},"dex_apis/submitOrder.html":{"url":"dex_apis/submitOrder.html","title":"Submit order","keywords":"","body":"Submit order Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method POST Visit path /api/v2/order Function Please follow the following steps to place an order: Get the next orderId through /api/v2/orderId. If you maintain order IDs on the client side, you can skip this step. Choose reasonable values for validSince andvalidUntil. We recommend that validSince is set to the current system time, and validUntil is set to be at least one week later than the current time. Choose a reasonable MaxFeeBips. We recommend setting this value to 63. UseclientOrderId and/or channelId for better client-side tracking. Sign the order. Submit the order and receive the order's hash. API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example exchangeId integer Y Exchange ID 1 orderId integer Y Order ID 1 accountId integer Y Account ID 1 tokenSId integer Y The ID of The Token to be sold 0 tokenBId integer Y The ID of The Token to be bought 2 amountS string Y Number of tokens to be sold 1000000000000000000 amountB string Y Number of tokens to be bought 1000000000000000000 allOrNone string N Whether the order can only be filled completely or 0 deals, currently only supports false false buy string Y Buy until buy or sell until buy true validSince integer Y Order effective time, accuracy is in seconds 1567053142 validUntil integer Y Order expiration time, accuracy is in seconds 1567053142 maxFeeBips integer Y Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63 20 label integer Y Order label, used to indicate the order attribute or source, etc., to participate in order signature, value range 0 ~ 65535 20 signatureRx string Y Rx part of order signed result 13375450901292179417154974849571793069911517354720397125027633242680470075859 signatureRy string Y Ry part of order signed result 13375450901292179417154974849571793069911517354720397125027633242680470075859 signatureS string Y S part of order signed result 13375450901292179417154974849571793069911517354720397125027633242680470075859 clientOrderId string N The unique order ID of the client 1 channelId string N Order channel ID, used to indicate from which channel the order was submitted hebao::subchannel::0001 Request example HTTPCURLPOST https://api.loopring.io/api/v2/order HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/order -d \\ '{ \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" }' Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Hash of the order submitted 13375450901292179417154974849571793069911517354720397125027633242680470075859 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" } Status code Status code Description 100000 Unknown error 102001 Exchange ID is incorrect 102002 Unsupported TokenId in the order 102003 Invalid account ID 102004 Invalid order ID 102005 Market does not support 102006 Illegal rate field 102007 Order already exists 102008 Order has expired 102010 Order is missing signature information 102011 Insufficient user balance 102012 The order amount is too small 102014 Failed to freeze the amount, please try again later 102020 Exceeded the maximum order amount 102120 Order is not valid 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found 104004 No signature information provided 104005 Wrong signature information Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/batchSubmitOrder.html":{"url":"dex_apis/batchSubmitOrder.html","title":"Batch submit order","keywords":"","body":"Batch submit order Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method POST Visit path /api/v2/batchOrders Function Batch submit order, 10 order at most nonce. API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example orders List[SubmitOrderRequest] Y Orders to submit. / Request example HTTPCURLPOST https://api.loopring.io/api/v2/batchOrders HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"orders\" : [ { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" } ] }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/batchOrders -d \\ '{ \"orders\" : [ { \"exchangeId\" : 1, \"orderId\" : 1, \"accountId\" : 1, \"tokenSId\" : 0, \"tokenBId\" : 2, \"amountS\" : \"1000000000000000000\", \"amountB\" : \"1000000000000000000\", \"allOrNone\" : \"false\", \"buy\" : \"true\", \"validSince\" : 1567053142, \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"label\" : 20, \"signatureRx\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureRy\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"signatureS\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"channelId\" : \"hebao::subchannel::0001\" } ] }' Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[SubmitOrderResult] Y Result of batch submit orders. / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } Status code Status code Description 100000 Unknown error 100001 Invalid argument 104209 Partial batch operation failed Model SubmitOrderRequest Submit order request description Field Type Required Description Example exchangeId integer Y Exchange ID 1 orderId integer Y Order ID 1 accountId integer Y Account ID 1 tokenSId integer Y The ID of The Token to be sold 0 tokenBId integer Y The ID of The Token to be bought 2 amountS string Y Number of tokens to be sold 1000000000000000000 amountB string Y Number of tokens to be bought 1000000000000000000 allOrNone string N Whether the order can only be filled completely or 0 deals, currently only supports false false buy string Y Buy until buy or sell until buy true validSince integer Y Order effective time, accuracy is in seconds 1567053142 validUntil integer Y Order expiration time, accuracy is in seconds 1567053142 maxFeeBips integer Y Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63 20 label integer Y Order label, used to indicate the order attribute or source, etc., to participate in order signature, value range 0 ~ 65535 20 signatureRx string Y Rx part of order signed result 13375450901292179417154974849571793069911517354720397125027633242680470075859 signatureRy string Y Ry part of order signed result 13375450901292179417154974849571793069911517354720397125027633242680470075859 signatureS string Y S part of order signed result 13375450901292179417154974849571793069911517354720397125027633242680470075859 clientOrderId string N The unique order ID of the client 1 channelId string N Order channel ID, used to indicate from which channel the order was submitted hebao::subchannel::0001 ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS SubmitOrderResult Single order submission results. Field Type Required Description Example hash string Y Hash of order submitted 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf error ResultInfo N Error for order submission failure. / ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getOrders.html":{"url":"dex_apis/getOrders.html","title":"Get order list","keywords":"","body":"Get order list Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/orders Function Get order list according to conditions API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account id 1 market string N Market LRC-ETH start integer N Start time in millisecond (orders create time larger than this param will be matched) 1567053142000 end integer N End time in millisecond (orders create time less than this param will be matched) 1567053242000 fromHash string N Orders create time less than specific hash will be matched 2600105125336468966417510367500403435128941502452005674156103328855968837178 side string N Buy or SellAllowable : ['BUY', 'SELL'] BUY status string N Order statusAllowable : ['waiting', 'processing', 'processed', 'failed', 'cancelled', 'expired'] processing,processed limit integer N Limit of orders (default 50) 50 offset integer N Offset of orders (default 0)Default : 0L 0 Request example HTTPCURLGET https://api.loopring.io/api/v2/orders?accountId=1&market=LRC-ETH&start=1567053142000&end=1567053242000&fromHash=2600105125336468966417510367500403435128941502452005674156103328855968837178&side=BUY&status=processing,processed&limit=50&offset=0 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders\\?accountId\\=1\\&market\\=LRC-ETH\\&start\\=1567053142000\\&end\\=1567053242000\\&fromHash\\=2600105125336468966417510367500403435128941502452005674156103328855968837178\\&side\\=BUY\\&status\\=processing,processed\\&limit\\=50\\&offset\\=0 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data OrdersDetail N Response orders / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 10, \"orders\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"size\" : \"8210000000000001024\", \"volume\" : \"163182534700000032\", \"price\" : \"0.01987608\", \"filledSize\" : \"0\", \"filledVolume\" : \"0\", \"filledFee\" : \"0\", \"status\" : \"processing\", \"validSince\" : 1583929591, \"validUntil\" : 1586521591, \"createdAt\" : 1583933191494, \"side\" : \"SELL\", \"market\" : \"LRC-ETH\" } ] } } Status code Status code Description 100000 Unknown error 107001 User ID cannot be empty 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS OrdersDetail Response orders Field Type Required Description Example totalNum integer Y Total number of orders 10 orders List[OrderDetail] N List of order / OrderDetail Response details of order Field Type Required Description Example hash string Y Order hash 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf clientOrderId string Y Client order unique id 200310143135081332 size string Y Order quantity 8210000000000001024 volume string Y Order amount 163182534700000032 price string Y Deal price 0.01987608 filledSize string Y Volume 0 filledVolume string Y Turnover 0 filledFee string Y Fee 0 status string Y Order statusAllowable : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] processing validSince integer Y Order effective time from 1583929591 validUntil integer Y Order effective time to 1586521591 createdAt integer Y Order creation time 1583933191494 side string Y Sell or buyAllowable : ['SELL', 'BUY'] SELL market string Y Market LRC-ETH "},"dex_apis/cancelOrders.html":{"url":"dex_apis/cancelOrders.html","title":"Cancel order","keywords":"","body":"Cancel order Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method DELETE Visit path /api/v2/orders Function Cancel orders based on account ID and order hash or unique client ID. The order HASH and the clients unique ID may not be transmitted. If neither is transmitted, all pending orders of the user will be cancelled. API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string Y Signature \"13834524429315716527072245289201098743367448928828941694333300773464291931668,19252438164424980901323496067579767457298262609633182654968500317796010794338,1296502169918579172046019624886776672473813683541532008712357317204831986826\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 orderHash string N Order HASH 13375450901292179417154974849571793069911517354720397125027633242680470075859 clientOrderId string N The unique order ID of the client 20200318000000001010 Request example HTTPCURLDELETE https://api.loopring.io/api/v2/orders?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859&clientOrderId=20200318000000001010 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdfcurl -X DELETE -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" https://api.loopring.io/api/v2/orders\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859\\&clientOrderId\\=20200318000000001010 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data boolean N Cancel order response true Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : true } Status code Status code Description 100000 Unknown error 104001 APIKEY cannot be empty 102117 No order can be cancelled 102118 Failed to cancel the order, please try again later 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/batchCancelOrdersByOrderHash.html":{"url":"dex_apis/batchCancelOrdersByOrderHash.html","title":"Cancel multiple order by hashes.","keywords":"","body":"Cancel multiple order by hashes. Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method DELETE Visit path /api/v2/orders/byHash Function Separate multiple hashes with commas,10 at most nonce. API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 orderHash string Y Hash of order to be canceled,separate multiple hashes with commas. 13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 Request example HTTPCURLDELETE https://api.loopring.io/api/v2/orders/byHash?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -X DELETE -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders/byHash\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[CancelOrderResult] Y Results of batch order cancellation. / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"id\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"result\" : true, \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } Status code Status code Description 100000 Unknown error 100001 Invalid argument 104209 Partial batch operation failed Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS CancelOrderResult result for order cancellation. Field Type Required Description Example id string Y Hash or clientOrderId of order cancelled. 13375450901292179417154974849571793069911517354720397125027633242680470075859 result boolean Y Order cancellation result. true error ResultInfo N Error for cancel order failure. / ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/batchCancelOrdersByClientOrderId.html":{"url":"dex_apis/batchCancelOrdersByClientOrderId.html","title":"Cancel multiple orders by clientOrderIds.","keywords":"","body":"Cancel multiple orders by clientOrderIds. Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method DELETE Visit path /api/v2/orders/byClientOrderId Function Multiple order IDs separated by commas, 10 at most. API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 clientOrderId string Y ClientOrderIds of orders to be cancelled. 20200318000000001010,20200318000000001011 Request example HTTPCURLDELETE https://api.loopring.io/api/v2/orders/byClientOrderId?accountId=1&clientOrderId=20200318000000001010,20200318000000001011 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -X DELETE -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/orders/byClientOrderId\\?accountId\\=1\\&clientOrderId\\=20200318000000001010,20200318000000001011 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[CancelOrderResult] Y Results of batch order cancellation. / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"id\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"result\" : true, \"error\" : { \"code\" : 0, \"message\" : \"SUCCESS\" } } ] } Status code Status code Description 100000 Unknown error 100001 Invalid argument 104209 Partial batch operation failed Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS CancelOrderResult result for order cancellation. Field Type Required Description Example id string Y Hash or clientOrderId of order cancelled. 13375450901292179417154974849571793069911517354720397125027633242680470075859 result boolean Y Order cancellation result. true error ResultInfo N Error for cancel order failure. / ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/sendTransaction.html":{"url":"dex_apis/sendTransaction.html","title":"Send raw transaction","keywords":"","body":"Send raw transaction Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method POST Visit path /api/v2/sendEthTx Function Deposit,onchainWithdrawal,createAccount,updatePassword,enableToken use this interface. API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example data string Y Serialized Ethereum signature transaction as hexadecimal string 0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2 Request example HTTPCURLPOST https://api.loopring.io/api/v2/sendEthTx HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"data\" : \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api.loopring.io/api/v2/sendEthTx -d \\ '{ \"data\" : \"0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2\" }' Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Transaction hash 0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886\" } Status code Status code Description 100000 Unknown error 104202 The current node service is not available 104205 Error in internal request 104208 Node service returns an error message Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getEthNonce.html":{"url":"dex_apis/getEthNonce.html","title":"Query the available nonce of the users Ethereum address","keywords":"","body":"Query the available nonce of the users Ethereum address Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/ethNonce Function Query the nonce of the Ethereum address API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address to be queried 0x0000000000000000000000000000000000000000 Request example HTTPCURLGET https://api.loopring.io/api/v2/ethNonce?owner=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ethNonce\\?owner\\=0x0000000000000000000000000000000000000000 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data integer N The result of nonce 0 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : 0 } Status code Status code Description 100000 Unknown error 104205 Error in internal request 104208 Node service returns an error message Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getEthBalance.html":{"url":"dex_apis/getEthBalance.html","title":"Query ETH balance","keywords":"","body":"Query ETH balance Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/ethBalances Function Query the ETH balance of Ethereum address API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address to be queried 0x0000000000000000000000000000000000000000 Request example HTTPCURLGET https://api.loopring.io/api/v2/ethBalances?owner=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ethBalances\\?owner\\=0x0000000000000000000000000000000000000000 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Balance 0 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0\" } Status code Status code Description 100000 Unknown error 104205 Error in internal request 104208 Node service returns an error message Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getRecommendedGasPrice.html":{"url":"dex_apis/getRecommendedGasPrice.html","title":"Get current recommended gas price","keywords":"","body":"Get current recommended gas price Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/recommendedGasPrice Function Get current recommended gas price in Gwei API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/recommendedGasPrice HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/recommendedGasPrice Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Response value of current recommended gas price in Gwei 10000000000 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"10000000000\" } Status code Status code Description 100000 Unknown error 105001 Failed to get recommended gas Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getMarkets.html":{"url":"dex_apis/getMarkets.html","title":"Query the market configuration supported by the exchange","keywords":"","body":"Query the market configuration supported by the exchange Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/exchange/markets Function Query all supported market configurations API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/exchange/markets HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/markets Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[MarketInfo] N Markets list / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"market\" : \"LRC-USDT\", \"baseTokenId\" : 2, \"quoteTokenId\" : 0, \"precisionForPrice\" : 6, \"orderbookAggLevels\" : 4, \"enabled\" : false } ] } Status code Status code Description 100000 Unknown error Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS MarketInfo Field Type Required Description Example market string Y Market LRC-USDT baseTokenId integer Y The base token ID 2 quoteTokenId integer Y The quote token ID 0 precisionForPrice integer Y The server returns the maximum price accuracy supported in depth 6 orderbookAggLevels integer Y The server returns the maximum merge level supported in depth, the support range is 0 to this value 4 enabled boolean Y Is open trade or not false "},"dex_apis/getTokens.html":{"url":"dex_apis/getTokens.html","title":"Query the token information supported by the exchange","keywords":"","body":"Query the token information supported by the exchange Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/exchange/tokens Function Get all the token information supported by the exchange API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/exchange/tokens HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/tokens Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[TokenInfo] N Token list / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"type\" : \"ERC20\", \"tokenId\" : 2, \"symbol\" : \"LRC\", \"name\" : \"Loopring\", \"address\" : \"0x97241525fe425C90eBe5A41127816dcFA5954b06\", \"unit\" : \"LRC\", \"decimals\" : 18, \"precision\" : 6, \"minOrderAmount\" : \"10000000000000000\", \"maxOrderAmount\" : \"1000000000000000000\", \"dustOrderAmount\" : \"1000000000000000\", \"enabled\" : true } ] } Status code Status code Description 100000 Unknown error Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS TokenInfo Token Detail Field Type Required Description Example type string Y Token TypeAllowable : ['ERC20', 'ETH'] ERC20 tokenId integer Y Token Id in Loopring exchange contract 2 symbol string Y Token symbol LRC name string Y Token name Loopring address string Y Token contract address 0x97241525fe425C90eBe5A41127816dcFA5954b06 unit string Y Token unit LRC decimals integer Y Token decimals 18 precision integer Y Max decimals that relayer use for token 6 minOrderAmount string Y The minimum order quantity allowed for a single order 10000000000000000 maxOrderAmount string Y The maximum order quantity allowed for a single order 1000000000000000000 dustOrderAmount string Y amount that judged a dust order. 1000000000000000 enabled boolean Y Whether the server currently supports true "},"dex_apis/getExchangeInfo.html":{"url":"dex_apis/getExchangeInfo.html","title":"Query exchange basic info.","keywords":"","body":"Query exchange basic info. Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/exchange/info Function Query the necessary information to interact with the exchange API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET https://api.loopring.io/api/v2/exchange/info HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/exchange/info Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data ExchangeInfo N Necessary exchange to interact with the exchange / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"chainId\" : 1, \"exchangeId\" : 1, \"exchangeAddress\" : \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\", \"onchainFees\" : [ { \"type\" : \"withdraw\", \"fee\" : \"2000000000000000\" } ] } } Status code Status code Description 100000 Unknown error Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS ExchangeInfo Exchange basic info. Field Type Required Description Example chainId integer Y Ethereum network number supported by the exchange 1 exchangeId integer Y Exchange Id of loopring protocol 1 exchangeAddress string Y Contract address of exchange. 0xbA1D5779131aa529F51B4B00186E9e97f3BeB854 onchainFees List[FeeInfo] Y Fees charged by the exchange. / FeeInfo Information about fees charged by the exchange. Field Type Required Description Example type string Y Type of fee. withdraw fee string Y Fee amount of Ethereum in wei. 2000000000000000 "},"dex_apis/getDepth.html":{"url":"dex_apis/getDepth.html","title":"Get order book info","keywords":"","body":"Get order book info Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/depth Function Get order book info about a specified market API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Market，not support multiple markets LRC-ETH level integer Y Order book aggregation level, bigger level means more aggregation. 2 limit integer N Limit on the number of bids and asks returnedDefault : 50 50 Request example HTTPCURLGET https://api.loopring.io/api/v2/depth?market=LRC-ETH&level=2&limit=50 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/depth\\?market\\=LRC-ETH\\&level\\=2\\&limit\\=50 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data Depth N Order book detail. / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"version\" : 147, \"timestamp\" : 432312312, \"bids\" : [[\"0.002\",\"21000\",\"33220000\",\"4\"]], \"asks\" : [] } } Status code Status code Description 100000 Unknown error 108000 Unsupported market 108001 Unsupported depth level Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS Depth Order book info Field Type Required Description Example version integer Y Order book update version number,the client judges whether the data is lost according to this (refer to the websocket for details) 147 timestamp integer Y Push timestamp 432312312 bids List[List[string]] Y Bids,each contains price, size, volume and order count. [[\"0.002\",\"21000\",\"33220000\",\"4\"]] asks List[List[string]] Y Asks,each contains price, size, volume and order count. [] "},"dex_apis/getTicker.html":{"url":"dex_apis/getTicker.html","title":"The response of querying the exchange ticker","keywords":"","body":"The response of querying the exchange ticker Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/ticker Function Query exchange 24-hour dimension Ticker API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Market pair, support multiple markets LRC-ETH,LRC-USDT Request example HTTPCURLGET https://api.loopring.io/api/v2/ticker?market=LRC-ETH,LRC-USDT HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/ticker\\?market\\=LRC-ETH,LRC-USDT Response fields Field Type Required Description Example resultInfo ResultInfo Y The returned message / data List[List[string]] N Ticker information，each set of data includes market-pair, timestamp, Base Token total transaction volume, Quote Token total transaction volume, opening price, highest price, lowest price, closing price, number of transactions, buy order, sell order [[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]] Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]] } Status code Status code Description 100000 Unknown error 100001 Invalid argument Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getCandlestick.html":{"url":"dex_apis/getCandlestick.html","title":"Query candlestick data","keywords":"","body":"Query candlestick data Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/candlestick Function Query K-line data, currently supports data within a range of 2 years, each query can query up to 120 data points API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Market pair, multi-market is not supported LRC-ETH interval string Y Interval, can be: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w 5min start integer N start time 1584479105000 end integer N end time 1584565505000 limit integer N number of data points 120 Request example HTTPCURLGET https://api.loopring.io/api/v2/candlestick?market=LRC-ETH&interval=5min&start=1584479105000&end=1584565505000&limit=120 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/candlestick\\?market\\=LRC-ETH\\&interval\\=5min\\&start\\=1584479105000\\&end\\=1584565505000\\&limit\\=120 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[List[string]] N K-line data, each set of data includes start time, number of transactions, opening price, closing price, highest price, lowest price, total transaction volume of Base Token, total transaction volume of Quote Token [[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]] Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]] } Status code Status code Description 100000 Unknown error 100001 Invalid argument Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getPrice.html":{"url":"dex_apis/getPrice.html","title":"Query token fiat price","keywords":"","body":"Query token fiat price Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/price Function Query the token price with specified fiat currency API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example legal string Y The specified denomination currency, Supports incoming values USD,CNY,JPY,EUR,GBP,HKD USD Request example HTTPCURLGET https://api.loopring.io/api/v2/price?legal=USD HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/price\\?legal\\=USD Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[Price] N Return the fiat currency price / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"symbol\" : \"LRC\", \"price\" : \"0\", \"timestamp\" : 0 } ] } Status code Status code Description 100000 Unknown error Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS Price Token fiat price Field Type Required Description Example symbol string Y Token symbol LRC price string Y Fiat price 0 timestamp integer Y The synchronize time of query price 0 "},"dex_apis/getMarketTrade.html":{"url":"dex_apis/getMarketTrade.html","title":"Query market trades","keywords":"","body":"Query market trades Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/trade Function Query trades with specified market API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Single market to query LRC-USDT limit integer N Number of queries 20 Request example HTTPCURLGET https://api.loopring.io/api/v2/trade?market=LRC-USDT&limit=20 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/trade\\?market\\=LRC-USDT\\&limit\\=20 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data MarketTrades N Market trades list / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 0, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } } Status code Status code Description 100000 Unknown error Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS MarketTrades Market trades list Field Type Required Description Example totalNum integer Y The total number of trades in query result 0 trades List[List[string]] Y List of trades records, each trade record in the order of the array is the trade time, record id, buying and selling direction, volume, price, market and fees [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] "},"dex_apis/getAllowance.html":{"url":"dex_apis/getAllowance.html","title":"Query allowance","keywords":"","body":"Query allowance Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/allowances Function Query the allowance value of the Ethereum address on the exchange API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address to be queried 0x0000000000000000000000000000000000000000 token string Y The token address to query 0x0000000000000000000000000000000000000000 Request example HTTPCURLGET https://api.loopring.io/api/v2/allowances?owner=0x0000000000000000000000000000000000000000&token=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/allowances\\?owner\\=0x0000000000000000000000000000000000000000\\&token\\=0x0000000000000000000000000000000000000000 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N The value of allowance 0 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0\" } Status code Status code Description 100000 Unknown error 104205 Error in internal request 104208 Node service returns an error message Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getTokenBalance.html":{"url":"dex_apis/getTokenBalance.html","title":"Query token balance","keywords":"","body":"Query token balance Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/tokenBalances Function Query the token balances of Ethereum address API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address to be queried 0x0000000000000000000000000000000000000000 token string Y Token address to query 0x0000000000000000000000000000000000000000 Request example HTTPCURLGET https://api.loopring.io/api/v2/tokenBalances?owner=0x0000000000000000000000000000000000000000&token=0x0000000000000000000000000000000000000000 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/tokenBalances\\?owner\\=0x0000000000000000000000000000000000000000\\&token\\=0x0000000000000000000000000000000000000000 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data string N Balances 0 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : \"0\" } Status code Status code Description 100000 Unknown error 104205 Error in internal request 104208 Node service returns an error message Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS "},"dex_apis/getAccount.html":{"url":"dex_apis/getAccount.html","title":"Query user information","keywords":"","body":"Query user information Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/account Function Query user information API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address to be queried 0x123456 Request example HTTPCURLGET https://api.loopring.io/api/v2/account?owner=0x123456 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/account\\?owner\\=0x123456 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data DexAccount Y user information 0 Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"accountId\" : 10, \"frozen\" : false, \"publicKeyX\" : \"123\", \"publicKeyY\" : \"456\", \"tags\" : \"vip_1\" } } Status code Status code Description 100000 Unknown error 101001 The address was not found 101002 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS DexAccount user information Field Type Required Description Example accountId integer Y account ID 10 frozen boolean Y The frozen state of the account, true stands for frozen false publicKeyX string Y public key X 123 publicKeyY string Y public key Y 456 tags string N The level and other special identifiers of the user, separated by\",\" vip_1 "},"dex_apis/getUserCreate.html":{"url":"dex_apis/getUserCreate.html","title":"Get user creation list","keywords":"","body":"Get user creation list Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/user/createInfo Function Get user creation list API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account id 1 start integer N Start time in millisecond (create time larger than this param will be matched)Default : 0L 1578558098000 end integer N End time in millisecond (create time less than this param will be matched)Default : 0L 1578558098000 status string N Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer N Limit of list (default 50) 50 fromHash string N Create time less than specific hash will be matched 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 offset integer N Offset of list (default 0)Default : 0L 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/createInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/createInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data TxDataList N User transactions response / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } Status code Status code Description 100000 Unknown error 107001 User ID cannot be empty 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS TxDataList User transactions response Field Type Required Description Example totalNum integer Y Total number of user transactions 1 transactions List[TxData] Y list of user transaction / TxData Response data Field Type Required Description Example id integer Y Unique id 1 txType string Y User transaction typeAllowable : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string Y Token symbol LRC amount string Y Request amount 1000000000000000000 realAmount string Y Effective amount 1000000000000000000 receiver integer N Receiver id 1 txHash string Y Transaction hash 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string Y User transaction type 1000000000000000 status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing progress string Y Progress 100% timestamp integer Y Update time 1578572292000 depositType string N Deposit typeAllowable : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer N Block height 100 "},"dex_apis/getUserUpdate.html":{"url":"dex_apis/getUserUpdate.html","title":"Get user update list","keywords":"","body":"Get user update list Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/user/updateInfo Function Get user update list API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account id 1 start integer N Start time in millisecond (create time larger than this param will be matched)Default : 0L 1578558098000 end integer N End time in millisecond (create time less than this param will be matched)Default : 0L 1578558098000 status string N Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer N Limit of list (default 50) 50 fromHash string N Create time less than specific hash will be matched 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 offset integer N Offset of list (default 0)Default : 0L 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/updateInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/updateInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data TxDataList N User transactions response / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } Status code Status code Description 100000 Unknown error 107001 User ID cannot be empty 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS TxDataList User transactions response Field Type Required Description Example totalNum integer Y Total number of user transactions 1 transactions List[TxData] Y list of user transaction / TxData Response data Field Type Required Description Example id integer Y Unique id 1 txType string Y User transaction typeAllowable : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string Y Token symbol LRC amount string Y Request amount 1000000000000000000 realAmount string Y Effective amount 1000000000000000000 receiver integer N Receiver id 1 txHash string Y Transaction hash 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string Y User transaction type 1000000000000000 status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing progress string Y Progress 100% timestamp integer Y Update time 1578572292000 depositType string N Deposit typeAllowable : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer N Block height 100 "},"dex_apis/getUserBalances.html":{"url":"dex_apis/getUserBalances.html","title":"Query the users balance in exchange","keywords":"","body":"Query the users balance in exchange Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/user/balances Function Query the users balance in exchange API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y AccountID 1 tokens string N Asset list 0,1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/balances?accountId=1&tokens=0,1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/balances\\?accountId\\=1\\&tokens\\=0,1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data List[Balance] Y Asset information / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : [ { \"accountId\" : 10, \"tokenId\" : 10, \"totalAmount\" : \"100\", \"frozenAmount\" : \"100\" } ] } Status code Status code Description 100000 Unknown error 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS Balance Asset information Field Type Required Description Example accountId integer Y Account ID 10 tokenId integer Y Token ID 10 totalAmount string Y Amount of the asset 100 frozenAmount string Y Amount of the frozen Asset frozen 100 "},"dex_apis/getUserDeposits.html":{"url":"dex_apis/getUserDeposits.html","title":"Get user deposit list","keywords":"","body":"Get user deposit list Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/user/deposits Function Get user deposit list API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account id 1 start integer N Start time in millisecond (create time larger than this param will be matched)Default : 0L 1578558098000 end integer N End time in millisecond (create time less than this param will be matched)Default : 0L 1578558098000 allType boolean N Whether to obtain the deposit record accompanying the user creation false status string N Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer N Limit of list (default 50) 50 fromHash string N Create time less than specific hash will be matched 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 tokenSymbol string N Token symbol ETH offset integer N Offset of list (default 0)Default : 0L 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/deposits?accountId=1&start=1578558098000&end=1578558098000&allType=false&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=ETH&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/deposits\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&allType\\=false\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=ETH\\&offset\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data TxDataList N User transactions response / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } Status code Status code Description 100000 Unknown error 107001 User ID cannot be empty 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS TxDataList User transactions response Field Type Required Description Example totalNum integer Y Total number of user transactions 1 transactions List[TxData] Y list of user transaction / TxData Response data Field Type Required Description Example id integer Y Unique id 1 txType string Y User transaction typeAllowable : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string Y Token symbol LRC amount string Y Request amount 1000000000000000000 realAmount string Y Effective amount 1000000000000000000 receiver integer N Receiver id 1 txHash string Y Transaction hash 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string Y User transaction type 1000000000000000 status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing progress string Y Progress 100% timestamp integer Y Update time 1578572292000 depositType string N Deposit typeAllowable : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer N Block height 100 "},"dex_apis/getUserWithdrawals.html":{"url":"dex_apis/getUserWithdrawals.html","title":"Get user withdrawal list","keywords":"","body":"Get user withdrawal list Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/user/withdrawals Function Get user withdrawal list API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account id 1 start integer N Start time in millisecond (create time larger than this param will be matched)Default : 0L 1578558098000 end integer N End time in millisecond (create time less than this param will be matched)Default : 0L 1578558098000 status string N Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer N Limit of list (default 50) 50 fromHash string N Create time less than specific hash will be matched 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 tokenSymbol string N Token symbol LRC offset integer N Offset of list (default 0)Default : 0L 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/withdrawals?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=LRC&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/withdrawals\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=LRC\\&offset\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data TxDataList N User transactions response / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } Status code Status code Description 100000 Unknown error 107001 User ID cannot be empty 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS TxDataList User transactions response Field Type Required Description Example totalNum integer Y Total number of user transactions 1 transactions List[TxData] Y list of user transaction / TxData Response data Field Type Required Description Example id integer Y Unique id 1 txType string Y User transaction typeAllowable : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string Y Token symbol LRC amount string Y Request amount 1000000000000000000 realAmount string Y Effective amount 1000000000000000000 receiver integer N Receiver id 1 txHash string Y Transaction hash 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string Y User transaction type 1000000000000000 status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing progress string Y Progress 100% timestamp integer Y Update time 1578572292000 depositType string N Deposit typeAllowable : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer N Block height 100 "},"dex_apis/getUserTransfers.html":{"url":"dex_apis/getUserTransfers.html","title":"Get user transfer list","keywords":"","body":"Get user transfer list Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/user/transfers Function Get user transfer list API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account id 1 start integer N Start time in millisecond (create time larger than this param will be matched)Default : 0L 1578558098000 end integer N End time in millisecond (create time less than this param will be matched)Default : 0L 1578558098000 status string N Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing,processed limit integer N Limit of list (default 50) 50 fromHash string N Create time less than specific hash will be matched 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 tokenSymbol string N Token symbol LRC offset integer N Offset of list (default 0)Default : 0L 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/transfers?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&fromHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&tokenSymbol=LRC&offset=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/transfers\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&fromHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&tokenSymbol\\=LRC\\&offset\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data TxDataList N User transactions response / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"deposit\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"realAmount\" : \"1000000000000000000\", \"receiver\" : 1, \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"depositType\" : \"DEPOSIT\", \"blockNum\" : 100 } ] } } Status code Status code Description 100000 Unknown error 107001 User ID cannot be empty 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS TxDataList User transactions response Field Type Required Description Example totalNum integer Y Total number of user transactions 1 transactions List[TxData] Y list of user transaction / TxData Response data Field Type Required Description Example id integer Y Unique id 1 txType string Y User transaction typeAllowable : ['deposit', 'onchainWithdrawal', 'transfer', 'createAccount', 'changePassword'] deposit symbol string Y Token symbol LRC amount string Y Request amount 1000000000000000000 realAmount string Y Effective amount 1000000000000000000 receiver integer N Receiver id 1 txHash string Y Transaction hash 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 feeAmount string Y User transaction type 1000000000000000 status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] processing progress string Y Progress 100% timestamp integer Y Update time 1578572292000 depositType string N Deposit typeAllowable : ['DEPOSIT', 'CREATE_ACCOUNT', 'UPDATE_ACCOUNT'] DEPOSIT blockNum integer N Block height 100 "},"dex_apis/getUserTrades.html":{"url":"dex_apis/getUserTrades.html","title":"Get user trading list","keywords":"","body":"Get user trading list Traffic limit (#Request/seconds): 5 / 1 API Overview HTTP method GET Visit path /api/v2/user/trades Function Get user trading list API description Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account id 1 orderHash string N Order hash 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632 offset integer N Offset of list (default 0) 1 limit integer N Limit of list (default 50) 50 fromId integer N Create time less than specific id will be matched 1 Request example HTTPCURLGET https://api.loopring.io/api/v2/user/trades?accountId=1&orderHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1&limit=50&fromId=1 HTTP/1.1 Host: api.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api.loopring.io/api/v2/user/trades\\?accountId\\=1\\&orderHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1\\&limit\\=50\\&fromId\\=1 Response fields Field Type Required Description Example resultInfo ResultInfo Y Information returned by the API / data TradeList N Response trading list / Response example { \"resultInfo\" : { \"code\" : 0, \"message\" : \"SUCCESS\" }, \"data\" : { \"totalNum\" : 100, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } } Status code Status code Description 100000 Unknown error 104001 APIKEY cannot be empty 104002 APIKEY verification failed 104003 The user was not found Model ResultInfo Information returned by the API Field Type Required Description Example code integer Y The returned code 0 message string Y The returned message SUCCESS TradeList Response trading list Field Type Required Description Example totalNum integer Y Total number of tradings 100 trades List[List[string]] Y List of trades records, each trade record in the order of the array is the trade time, record id, buying and selling direction, volume, price, market and fees [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] "},"websocket/overview.html":{"url":"websocket/overview.html","title":"WebSocket APIs","keywords":"","body":"WebSocket APIs 接入URL wss://api.loopring.io/v2/ws 心跳 当用户连接到路印中继的WebSocket之后，中继会进行心跳检测，每30秒会发送“ping”信息，期待接收客户端的“pong”信息。2分钟未收到回复会自动断开连接。 订阅规则 用户在与路印中继建立WebSocket连接之后，可以订阅消息。需满足以下规则： 用户可以一次订阅或者取消订阅多个主题，如果订阅的多个主题中有需要ApiKey的，则必须包含ApiKey。 用户可以重复订阅相同的主题，最新的订阅条件会覆盖之前的订阅条件。 用户在一次订阅中，不允许订阅相同的主题 用户在取消订阅需要ApiKey的主题时，必须包含订阅该主题时所使用的ApiKey。 请求 字段 类型 必须 说明 举例 op string 是 订阅或者取消订阅（\"sub\"或者\"unSub\"） \"sub\" apiKey string 否 订阅要求传ApiKey的主题才是必须的 “16M2hKHw9b5VuP21YBAJQmCd3VhuNtdDqG” args list 是 订阅的主题及条件 [ \"depth&LRC-ETH&0\",\"trade&LRC-ETH\"] 示例 订阅请求示例 { \"op\": \"sub\", \"args\": [ \"candlestick&LRC-BTC&1Hour\", \"depth&LRC-BTC&1\", \"depth10&LRC-BTC&1\", \"trade&LRC-BTC\", \"ticker&LRC-BTC\" ] } 取消订阅请求示例 { \"op\": \"unSub\", \"args\": [ \"candlestick\", \"depth\", \"depth10\", \"trade\", \"ticker\" ] } 返回值 字段 类型 必现 说明 举例 op string 是 用户传送来的操作 \"sub\" apiKey string 否 订阅要求传ApiKey的主题才是必须的 “16M2hKHw9b5VuP21YBAJQmCd3VhuNtdDqG” args list 是 订阅的主题及条件 [ \"depth&LRC-ETH&0\",\"trade&LRC-ETH\"] result Result 是 订阅结果 / Result结构 字段 类型 必现 说明 举例 status string 是 订阅是否成功 \"OK\" error Error 否 订阅失败时的错误信息 / Error结构 字段 类型 必现 说明 举例 code integer 是 状态码 107500 message string 是 错误信息 空的订阅信息 状态码 状态码 描述 104100 空的订阅信息 104101 不支持的操作（路印中继服务器仅支持sub 和 unsub操作） 104102 不支持的主题 104103 重复的订阅主题 104104 缺少ApiKey信息 104105 与之前订阅使用的ApiKey不符 104112 不合法的ApiKey 104113 取消订阅未曾订阅过的主题 104114 无法通过APiKey找到对应的用户 104115 无法识别的订阅消息 示例 订阅成功示例 { \"op\": \"sub\", \"apiKey\": \"\", \"args\": [ \"candlestick&LRC-ETH&1hr\", \"depth&LRC-ETH&1\", \"trade&LRC-ETH\", \"ticker&LRC-ETH\" ], \"result\": { \"status\": \"ok\" } } 订阅条件不合法的失败示例 { \"op\": \"sub\", \"apiKey\": \"\", \"args\": [ \"candlestick&LRC-ETH\" ], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104106, \"message\": \"receive illegal arg for candlestick:lrc-eth\" } } } 订阅条件无法解析的失败示例 { \"op\": \"\", \"apiKey\": \"\", \"args\": [], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104115, \"message\": \"unexpected msg:xxx\" } } } "},"websocket/depth.html":{"url":"websocket/depth.html","title":"订阅订单簿更新","keywords":"","body":"订阅订单簿更新 通过订阅该主题，您可以获得指定交易对订单簿更新的数据推送。 订阅规则 topic需要指定交易对和深度聚合等级。如果交易对是LRC-ETH，深度聚合等级是1，那么topic应该拼写为：depth&LRC-ETH&1。 订阅该主题不需要提供ApiKey。 交易对和深度聚合等级可以通过api/v2/exchange/markets接口获取。 状态码 状态码 描述 104107 topic的值或其参数非法 推送示例 { \"topic\": \"depth&LRC-ETH&1\", \"ts\": 1584717910000, \"startVersion\": 1212121, \"endVersion\": \"1212123\", \"data\": { \"bids\": [ [ \"295.97\", //price \"456781000000000\", //size \"3015000000000\", //volume \"4\" //count ] ], \"asks\": [ [ \"298.97\", \"456781000000000000\", \"301500000000000\", \"2\" ] ] } } 模型 推送数据结构 字段 类型 必现 说明 举例 topic string 是 订阅的主题和条件 \"depth&LRC-ETH&1\" ts integer 是 推送时间 1584717910000 startVersion integer 是 该次推送的起始版本号 1212121 endVersion integer 是 该次推送的终结版本号 1212123 data Depth 是 深度信息 / Depth数据结构 字段 类型 必现 说明 举例 bids List[List[string]] （深度条目列表） 是 买单深度 / asks List[List[string]] （深度条目列表） 是 卖单深度 / 深度条目 asks和bids数组中的每个子数组都是定长数组，我们称之为深度条目，其规范如下： 序号 类型 必现 说明 举例 1 string 是 价格 \"0.002\" 2 string 是 挂单量 \"21000\" 3 string 是 挂单总量。每一个推送中的挂单量代表这个价格目前的挂单量绝对值，而不是相对变化。 \"33220000\" 4 string 是 聚合的订单数目 \"4\" 构建本地订单簿 您可以通过下列步骤构建本地订单簿： 订阅 depth主题。 开始缓存收到的更新。同一个价位，后收到的更新覆盖前面的。 访问接口 api/v1/depth 获得一个全量的深度快照。 3中获取的快照如果version大于本地version（endVersion），则直接覆盖，如果小于本地version，则相同的价格不覆盖，不同的价格则覆盖。 将深度快照中的内容更新到本地订单簿副本中，并从WebSocket接收到的第一个startVersion version + 1 且 endVersion >= 本地version 的event开始继续更新本地副本。 每一个新推送的startVersion应该恰好等于上一个event的endVersion + 1，否则可能出现了丢包，请从step3重新进行初始化。 如果某个价格对应的挂单量为0，表示该价位的挂单已经撤单或者被吃，应该移除这个价位。 "},"websocket/depth10.html":{"url":"websocket/depth10.html","title":"订阅订单簿买卖前10的全量推送","keywords":"","body":"订阅买卖前10全量推送 通过订阅该主题，您可以每1秒获得指定交易对前10条卖单和买单的全量数据推送 - 即使数据没有任何变化。 订阅规则 topic需要指定交易对和深度聚合等级。如果交易对是LRC-ETH，深度聚合等级是1，那么topic应该拼写为：depth10&LRC-ETH&1。 订阅该主题不需要提供ApiKey。 交易对和深度聚合等级可以通过api/v2/exchange/markets接口获取。 状态码 状态码 描述 104108 topic的值或其参数非法 推送示例 { \"topic\": \"depth10&LRC-BTC&1\", \"ts\": 1565844208, \"data\": { \"bids\": [ [ \"295.97\", //price \"4567810000000000\", //size \"30150000000000\", //volume \"2\" //count ] ], \"asks\": [ [ \"298.97\", \"456781000000000000\", \"301500000000000\", \"2\" ] ] } } 模型 推送数据结构 字段 类型 必现 说明 举例 topic string 是 订阅的主题和条件 \"depth10&LRC-ETH&1\" ts integer 是 推送时间 1584717910000 data Depth 是 深度信息 / Depth数据结构 字段 类型 必现 说明 举例 bids List[List[string]] （深度条目列表） 是 买单深度 / asks List[List[string]] （深度条目列表） 是 卖单深度 / 深度条目 asks和bids数组中的每个子数组都是定长数组，我们称之为深度条目，其规范如下： 序号 类型 必现 说明 举例 1 string 是 价格 \"0.002\" 2 string 是 挂单量 \"21000\" 3 string 是 挂单总量 \"33220000\" 4 string 是 聚合的订单数目 \"4\" "},"websocket/trade.html":{"url":"websocket/trade.html","title":"订阅市场交易的更新","keywords":"","body":"订阅最新成交 通过订阅该主题，您可以获得特定交易对全部用户新成交记录的数据推送。 订阅规则 topic需要指定交易对。如果交易对是LRC-ETH，那么topic应该拼写为：trade&LRC-ETH。 订阅该主题不需要提供ApiKey。 支持的交易对可以通过api接口api/v2/exchange/markets获取。 状态码 状态码 描述 104109 topic的值或其参数非法 推送示例 { \"topic\": \"trade&LRC-ETH\", \"ts\": 1584717910000, \"data\": [ [ \"1584717910000\", //timestamp \"123456789\", //tradeId \"buy\", //side \"500000\", //size \"0.0008\", //price \"100\" //fee ] ] } 模型 推送数据结构 字段 类型 必现 说明 举例 topic string 是 订阅的主题和条件 \"trade&LRC-ETH\" integer integer 是 推送时间 1584717910000 data List[List[string]] （Trade列表） 是 深度信息 / Trade 数据结构 序号 类型 必现 说明 举例 1 integer 是 成交时间 1584717910000 2 integer 是 交易编号 123456789 3 string 是 买或者卖，指taker \"buy\" 4 string 是 base token的成交数量 \"500000\" 5 string 是 成交价格 \"0.0008\" 6 string 是 base token的收费 \"100\" "},"websocket/ticker.html":{"url":"websocket/ticker.html","title":"订阅市场Ticker的更新","keywords":"","body":"订阅Ticker更新 通过订阅该主题，您可以获得特定交易对ticker更新的数据推送。 订阅规则 topic需要指定交易对。如果交易对是LRC-ETH，那么topic应该拼写为：ticker&LRC-ETH。 订阅该主题不需要提供ApiKey。 支持的交易对可以通过api接口api/v2/exchange/markets获取。 状态码 状态码 描述 104111 topic的值或其参数非法 推送示例 { \"topic\": \"ticker&LRC-ETH\", \"ts\": 1584717910000, \"data\": [ \"LRC-ETH\", //market \"1584717910000\", //timestamp \"5000000\", //size \"1000\", //volume \"0.0002\", //open \"0.00025\", //high \"0.0002\", //low \"0.00025\", //close \"5000\", //count \"0.00026\", //bid \"0.00027\" //ask ] } 模型 推送数据结构 字段 类型 必现 说明 举例 topic string 是 订阅的主题和条件 \"ticker&LRC-ETH\" integer integer 是 推送时间 1584717910000 data List[string] （Ticker） 是 深度信息 / Ticker数据结构 序号 类型 必现 说明 举例 1 string 是 交易对 \"LRC-ETH\" 2 integer 是 ticker生成时间 1584717910000 3 string 是 base token的成交量 \"5000000\" 4 string 是 quote token 的成交量 \"1000\" 5 string 是 开盘价 \"0.0002\" 6 string 是 最高价 0.00025\" 7 string 是 最低价 \"0.0002\" 8 string 是 最新成交价 \"0.00025\" 9 integer 是 成交笔数 5000 10 string 是 买单最高价 \"0.00026\" 11 string 是 卖单最低价 \"0.00027\" "},"websocket/candleStick.html":{"url":"websocket/candleStick.html","title":"订阅市场CandleStick更新","keywords":"","body":"订阅CandleStick更新 通过订阅该主题，您可以获得特定交易对CandleStick更新的数据推送。 订阅规则 topic需要指定交易对和时间间隔。如果交易对是LRC-ETH，时间间隔是1小时，那么topic应该拼写为：candlestick&LRC-ETH&1hr。 订阅该主题不需要提供ApiKey。 支持的交易对可以通过api接口api/v2/exchange/markets获取。 支持的间隔（interval）为1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w 间隔 说明 1min 1分钟 5min 5分钟 15min 15分钟 30min 30分钟 1hr 1小时 2hr 2小时 4hr 4小时 12hr 12小时 1d 1天 1w 1周 状态码 状态码 描述 104106 topic的值或其参数非法 推送示例 { \"topic\": \"candlestick&lrc-btc&1hr\", \"ts\":1584717910000, \"data\": [ \"1584717910000\", //start \"5000\", //count \"3997.3\", //open \"3998.7\", //close \"4031.9\", //high \"3982.5\", //low \"500000000000000000\", //size \"2617521141385000000\", //volume ] } 模型 推送数据结构 字段 类型 必现 说明 举例 topic string 是 订阅的主题和条件 \"candlestick&LRC-ETH&1hr\" ts integer 时 推送时间（毫秒） 1584717910000 data List[string] （CandleStick列表） 是 candlestick数据 / CandleStick结构 序号 类型 必现 说明 举例 1 integer 是 指开盘时间 1584717910000 2 integer 是 成交笔数 5000 3 string 是 开盘价格 \"3997.3\" 4 string 是 收盘价格 \"3998.7\" 5 string 是 最高价 \"4031.9\" 6 string 是 最低价 \"3982.5\" 7 string 是 为wei为单位的base token的成交数量 “500000000000000000” 8 string 是 为wei为单位 quote token的成交数量 \"2617521141385000000\" "},"websocket/account.html":{"url":"websocket/account.html","title":"订阅用户余额更新","keywords":"","body":"订阅用户账号金额更新 通过订阅该主题，您可以获得用户余额和冻结金额更新的数据推送。 订阅规则 topic需要设为account。 订阅该主题需要提供ApiKey。 推送示例 { \"topic\": \"account\", \"ts\":1584717910000, \"data\": { \"accountId\":1, \"totalAmount\": \"24439253519655\", \"tokenId\": 2, \"frezeeAmount\": \"0\" } } 模型 推送数据结构 字段 类型 必现 说明 举例 topic string 是 订阅的主题和条件 \"account\" ts integer 是 推送时间 1584717910000 data Balance 是 余额信息 / Balance数据结构 字段 类型 必现 说明 举例 accountId integer 是 用户Id 1 tokenId integer 是 通证Id 2 totalAmount string 是 用户余额 \"24439253519655\" frezeeAmount string 是 冻结的余额 \"0\" "},"websocket/order.html":{"url":"websocket/order.html","title":"订阅用户订单更新","keywords":"","body":"订阅用户订单更新 通过订阅该主题，您可以获得用户在指定交易对的订单状态提送。 订阅规则 topic需要指定交易对。如果交易对是LRC-ETH，那么topic应该拼写为：order&LRC-ETH。 订阅该主题需要提供ApiKey。 支持的交易对可以通过api接口api/v2/exchange/markets获取。 状态码 状态码 描述 104110 topic的值或其参数非法 推送示例 { \"topic\": \"order&LRC-BTC\", \"ts\":1565844328, \"data\": { \"hash\": \"11212\", \"clientOrderId\": \"myOrder\", \"size\": \"500000000\", \"volume\": \"210000000\", \"price\": \"0.000004\", \"filledSize\": \"30000000\", \"filledVolume\": \"100000\", \"filledFee\": \"1000000\", \"status\": \"processing\", \"createdAt\": \"1494900087\", \"validSince\": \"1494900087\", \"validUntil\": \"1495900087\", \"side\": \"buy\", \"market\": \"LRC-BTC\" } } 模型 推送数据结构 字段 类型 必现 说明 举例 topic string 是 订阅的主题和条件 \"order&LRC-ETH\" ts integer 是 推送时间 1584717910000 data Order 是 订单信息 / Order数据结构 字段 类型 必现 说明 举例 hash string 是 订单哈希 \"11212\" clientOrderId string 是 用户自定义id \"myOrder\" size string 是 base token 的数量 \"500000000\" volume string 是 quote token 的数量 \"210000000\" price string 是 订单价格 \"0.000004\" filledSize string 是 已经成交的basetoken的数量 \"30000000\" filledVolume string 是 已经成交的quotetoken的数量 \"100000\" filledFee string 是 已支付的手续费 \"1000000\" status string 是 订单状态 \"processing\" createdAt integer 是 订单创建时间 1584717910000 updateAt integer 是 订单最后一次的更新时间 1584717910000 side string 是 买或卖 \"buy\" market string 是 交易对 \"LRC-ETH\" 订单状态取值范围 状态 说明 processing 订单进行中，订单等待成交或者已经成交一部分 processed 订单完全成交 cancelling 取消中 cancelled 订单取消 expired 订单过期 waiting 订单还未生效 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Glossary DEX Decenralized EXchange. Zero-Knowledge Proofs A method by which one party (the prover) can prove to another party (the verifier) that they know a value x, without conveying any information apart from the fact that they know the value x. source: https://en.wikipedia.org/wiki/Zero-knowledge_proof Relayer Loopring Exchange's backend system that handles order matching and settlement, deposits, withdrawals, and Zero-Knowledge Proof generation, etc. On-chain Requests User requests sent to Loopring Exchange through Ethereum transactions. Off-chain Requests User requests sent to Loopring Exchange using Loopring's APIs. Base Token The target token to trade. For example, in the LRC-ETH trading pair, LRC is referred to as the base token. Quote Token The token to quote price. For example, in the LRC-ETH trading pair, ETH is referred to as the base token. Size The quantity of the base token in an order or a fill. Volume The quantity of the quote token in an order or a fill. EdDSA The signing algorithm used by Loopring to sign off-chain requests. EdDSA is more circuit friendly compared to Ethereum's ECDSA algorithm. "}}